"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .linkedinperson import LinkedInPerson, LinkedInPersonTypedDict
from exfunc.types import BaseModel
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class SearchPeopleRequestBodyTypedDict(TypedDict):
    keywords: str
    r"""Keywords to search for in people profiles"""
    locations: NotRequired[List[str]]
    titles: NotRequired[List[str]]
    seniorities: NotRequired[List[str]]
    company_sizes: NotRequired[List[str]]
    company_industries: NotRequired[List[str]]
    company_domains: NotRequired[List[str]]
    page: NotRequired[int]
    r"""Page number for pagination (default is 1)"""


class SearchPeopleRequestBody(BaseModel):
    keywords: str
    r"""Keywords to search for in people profiles"""

    locations: Optional[List[str]] = None

    titles: Optional[List[str]] = None

    seniorities: Optional[List[str]] = None

    company_sizes: Optional[List[str]] = None

    company_industries: Optional[List[str]] = None

    company_domains: Optional[List[str]] = None

    page: Optional[int] = None
    r"""Page number for pagination (default is 1)"""


class SearchPeopleResponseBodyTypedDict(TypedDict):
    r"""SearchPeople API successful response"""

    people: NotRequired[List[LinkedInPersonTypedDict]]


class SearchPeopleResponseBody(BaseModel):
    r"""SearchPeople API successful response"""

    people: Optional[List[LinkedInPerson]] = None
