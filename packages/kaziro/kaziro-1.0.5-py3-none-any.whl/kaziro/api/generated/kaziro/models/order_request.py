# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.5
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class OrderRequest(BaseModel):
    """
    OrderRequest
    """  # noqa: E501

    order_type: StrictStr = Field(description="Type of order. MARKET_REPLY or MARKET_REQUEST")
    outcome: Optional[StrictInt] = Field(default=1, description="Outcome of the order. 1 for outcome 1, 2 for outcome 2.")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size of the order. Only required for MARKET_REQUEST orders.")
    market_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the market. Only required for MARKET_REQUEST orders.")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the market. Only required for MARKET_REPLY orders.")
    probability: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(
        default=None, description="Probability for the order, between 0 and 1. Only required for MARKET_REPLY orders."
    )
    __properties: ClassVar[List[str]] = ["order_type", "outcome", "size", "market_id", "request_id", "probability"]

    @field_validator("order_type")
    def order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["MARKET_REQUEST", "MARKET_REPLY"]):
            raise ValueError("must be one of enum values ('MARKET_REQUEST', 'MARKET_REPLY')")
        return value

    @field_validator("outcome")
    def outcome_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "order_type": obj.get("order_type"),
                "outcome": obj.get("outcome") if obj.get("outcome") is not None else 1,
                "size": obj.get("size"),
                "market_id": obj.get("market_id"),
                "request_id": obj.get("request_id"),
                "probability": obj.get("probability"),
            }
        )
        return _obj
