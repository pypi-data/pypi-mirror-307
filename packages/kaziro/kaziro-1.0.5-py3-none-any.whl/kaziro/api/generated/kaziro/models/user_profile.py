# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.5
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class UserProfile(BaseModel):
    """
    UserProfile
    """  # noqa: E501

    id: StrictStr = Field(description="Unique identifier for the user")
    date_created: StrictStr = Field(description="Timestamp of user account creation")
    username: StrictStr = Field(description="User's chosen username")
    display_name: Optional[StrictStr] = Field(default=None, description="User's display name")
    profile_picture: Optional[StrictStr] = Field(default=None, description="URL to user's profile picture")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata for the user")
    user_type: Optional[StrictStr] = Field(default=None, description="Type of user account")
    bio: Optional[StrictStr] = Field(default=None, description="User's biography")
    __properties: ClassVar[List[str]] = ["id", "date_created", "username", "display_name", "profile_picture", "metadata", "user_type", "bio"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "date_created": obj.get("date_created"),
                "username": obj.get("username"),
                "display_name": obj.get("display_name"),
                "profile_picture": obj.get("profile_picture"),
                "metadata": obj.get("metadata"),
                "user_type": obj.get("user_type"),
                "bio": obj.get("bio"),
            }
        )
        return _obj
