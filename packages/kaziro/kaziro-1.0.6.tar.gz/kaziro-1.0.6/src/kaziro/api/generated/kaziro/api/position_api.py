# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.6
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from ..api_client import ApiClient, RequestSerialized
from ..api_response import ApiResponse
from ..models.position_response import PositionResponse
from ..rest import RESTResponseType


class PositionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_positions_v1_exchange_position_retrieve_get(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Filter positions by status: 'ACTIVE', 'CLOSED'")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for pagination. 100 positions per page.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order for results (ASC or DESC)")] = None,
        include_markets: Optional[StrictBool] = None,
        include_orders: Optional[StrictBool] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PositionResponse:
        """Get positions

        Retrieve positions for the authenticated user.

        :param status: Filter positions by status: 'ACTIVE', 'CLOSED'
        :type status: str
        :param page: Page number for pagination. 100 positions per page.
        :type page: int
        :param sort_order: Sort order for results (ASC or DESC)
        :type sort_order: str
        :param include_markets:
        :type include_markets: bool
        :param include_orders:
        :type include_orders: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_positions_v1_exchange_position_retrieve_get_serialize(
            status=status,
            page=page,
            sort_order=sort_order,
            include_markets=include_markets,
            include_orders=include_orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "PositionResponse",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_positions_v1_exchange_position_retrieve_get_with_http_info(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Filter positions by status: 'ACTIVE', 'CLOSED'")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for pagination. 100 positions per page.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order for results (ASC or DESC)")] = None,
        include_markets: Optional[StrictBool] = None,
        include_orders: Optional[StrictBool] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PositionResponse]:
        """Get positions

        Retrieve positions for the authenticated user.

        :param status: Filter positions by status: 'ACTIVE', 'CLOSED'
        :type status: str
        :param page: Page number for pagination. 100 positions per page.
        :type page: int
        :param sort_order: Sort order for results (ASC or DESC)
        :type sort_order: str
        :param include_markets:
        :type include_markets: bool
        :param include_orders:
        :type include_orders: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_positions_v1_exchange_position_retrieve_get_serialize(
            status=status,
            page=page,
            sort_order=sort_order,
            include_markets=include_markets,
            include_orders=include_orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "PositionResponse",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_positions_v1_exchange_position_retrieve_get_without_preload_content(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Filter positions by status: 'ACTIVE', 'CLOSED'")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for pagination. 100 positions per page.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order for results (ASC or DESC)")] = None,
        include_markets: Optional[StrictBool] = None,
        include_orders: Optional[StrictBool] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get positions

        Retrieve positions for the authenticated user.

        :param status: Filter positions by status: 'ACTIVE', 'CLOSED'
        :type status: str
        :param page: Page number for pagination. 100 positions per page.
        :type page: int
        :param sort_order: Sort order for results (ASC or DESC)
        :type sort_order: str
        :param include_markets:
        :type include_markets: bool
        :param include_orders:
        :type include_orders: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_positions_v1_exchange_position_retrieve_get_serialize(
            status=status,
            page=page,
            sort_order=sort_order,
            include_markets=include_markets,
            include_orders=include_orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "PositionResponse",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_positions_v1_exchange_position_retrieve_get_serialize(
        self,
        status,
        page,
        sort_order,
        include_markets,
        include_orders,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            _query_params.append(("status", status))

        if page is not None:
            _query_params.append(("page", page))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        if include_markets is not None:
            _query_params.append(("include_markets", include_markets))

        if include_orders is not None:
            _query_params.append(("include_orders", include_orders))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/exchange/position/retrieve",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
