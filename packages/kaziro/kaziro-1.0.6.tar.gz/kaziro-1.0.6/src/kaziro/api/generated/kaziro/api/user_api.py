# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.6
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from ..api_client import ApiClient, RequestSerialized
from ..api_response import ApiResponse
from ..models.user_retrieval_response import UserRetrievalResponse
from ..rest import RESTResponseType


class UserApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def profile_retrieve_endpoint_v1_user_retrieve_get(
        self,
        user_ids: Annotated[Optional[List[StrictStr]], Field(description="List of user IDs to retrieve profiles for")] = None,
        usernames: Annotated[Optional[List[StrictStr]], Field(description="List of usernames to retrieve profiles for")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserRetrievalResponse:
        """Profile Retrieve Endpoint

        Retrieve user profiles by either user IDs or usernames.  Parameters: - user_ids: Optional list of user IDs - usernames: Optional list of usernames  If no user_ids or usernames are provided, the user profile for the authenticated user will be retrieved. If no authenticated user is provided, an error will be returned.  Returns profiles for the requested users. Must provide either user_ids or usernames.

        :param user_ids: List of user IDs to retrieve profiles for
        :type user_ids: List[str]
        :param usernames: List of usernames to retrieve profiles for
        :type usernames: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._profile_retrieve_endpoint_v1_user_retrieve_get_serialize(
            user_ids=user_ids, usernames=usernames, _request_auth=_request_auth, _content_type=_content_type, _headers=_headers, _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserRetrievalResponse",
            "400": "ErrorResponse",
            "404": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def profile_retrieve_endpoint_v1_user_retrieve_get_with_http_info(
        self,
        user_ids: Annotated[Optional[List[StrictStr]], Field(description="List of user IDs to retrieve profiles for")] = None,
        usernames: Annotated[Optional[List[StrictStr]], Field(description="List of usernames to retrieve profiles for")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserRetrievalResponse]:
        """Profile Retrieve Endpoint

        Retrieve user profiles by either user IDs or usernames.  Parameters: - user_ids: Optional list of user IDs - usernames: Optional list of usernames  If no user_ids or usernames are provided, the user profile for the authenticated user will be retrieved. If no authenticated user is provided, an error will be returned.  Returns profiles for the requested users. Must provide either user_ids or usernames.

        :param user_ids: List of user IDs to retrieve profiles for
        :type user_ids: List[str]
        :param usernames: List of usernames to retrieve profiles for
        :type usernames: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._profile_retrieve_endpoint_v1_user_retrieve_get_serialize(
            user_ids=user_ids, usernames=usernames, _request_auth=_request_auth, _content_type=_content_type, _headers=_headers, _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserRetrievalResponse",
            "400": "ErrorResponse",
            "404": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def profile_retrieve_endpoint_v1_user_retrieve_get_without_preload_content(
        self,
        user_ids: Annotated[Optional[List[StrictStr]], Field(description="List of user IDs to retrieve profiles for")] = None,
        usernames: Annotated[Optional[List[StrictStr]], Field(description="List of usernames to retrieve profiles for")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Profile Retrieve Endpoint

        Retrieve user profiles by either user IDs or usernames.  Parameters: - user_ids: Optional list of user IDs - usernames: Optional list of usernames  If no user_ids or usernames are provided, the user profile for the authenticated user will be retrieved. If no authenticated user is provided, an error will be returned.  Returns profiles for the requested users. Must provide either user_ids or usernames.

        :param user_ids: List of user IDs to retrieve profiles for
        :type user_ids: List[str]
        :param usernames: List of usernames to retrieve profiles for
        :type usernames: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._profile_retrieve_endpoint_v1_user_retrieve_get_serialize(
            user_ids=user_ids, usernames=usernames, _request_auth=_request_auth, _content_type=_content_type, _headers=_headers, _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserRetrievalResponse",
            "400": "ErrorResponse",
            "404": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _profile_retrieve_endpoint_v1_user_retrieve_get_serialize(
        self,
        user_ids,
        usernames,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {
            "user_ids": "multi",
            "usernames": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_ids is not None:
            _query_params.append(("user_ids", user_ids))

        if usernames is not None:
            _query_params.append(("usernames", usernames))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/user/retrieve",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
