# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.6
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from ..api_client import ApiClient, RequestSerialized
from ..api_response import ApiResponse
from ..models.chat import Chat
from ..models.chat_creation_request import ChatCreationRequest
from ..models.chat_retrieval_response import ChatRetrievalResponse
from ..rest import RESTResponseType


class ChatApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def create_chat_message_endpoint_v1_exchange_chat_create_post(
        self,
        chat_creation_request: ChatCreationRequest,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Chat:
        """Create Chat Message Endpoint

        Create a new chat message.

        :param chat_creation_request: (required)
        :type chat_creation_request: ChatCreationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_chat_message_endpoint_v1_exchange_chat_create_post_serialize(
            chat_creation_request=chat_creation_request, _request_auth=_request_auth, _content_type=_content_type, _headers=_headers, _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Chat",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_chat_message_endpoint_v1_exchange_chat_create_post_with_http_info(
        self,
        chat_creation_request: ChatCreationRequest,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Chat]:
        """Create Chat Message Endpoint

        Create a new chat message.

        :param chat_creation_request: (required)
        :type chat_creation_request: ChatCreationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_chat_message_endpoint_v1_exchange_chat_create_post_serialize(
            chat_creation_request=chat_creation_request, _request_auth=_request_auth, _content_type=_content_type, _headers=_headers, _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Chat",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_chat_message_endpoint_v1_exchange_chat_create_post_without_preload_content(
        self,
        chat_creation_request: ChatCreationRequest,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Chat Message Endpoint

        Create a new chat message.

        :param chat_creation_request: (required)
        :type chat_creation_request: ChatCreationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_chat_message_endpoint_v1_exchange_chat_create_post_serialize(
            chat_creation_request=chat_creation_request, _request_auth=_request_auth, _content_type=_content_type, _headers=_headers, _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Chat",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_chat_message_endpoint_v1_exchange_chat_create_post_serialize(
        self,
        chat_creation_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if chat_creation_request is not None:
            _body_params = chat_creation_request

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/exchange/chat/create",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get(
        self,
        market_id: Optional[StrictStr] = None,
        order_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        is_global: Optional[StrictBool] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        before_date: Optional[StrictStr] = None,
        include_market: Annotated[Optional[StrictBool], Field(description="Include full market data in response")] = None,
        include_user: Annotated[Optional[StrictBool], Field(description="Include full user data in response")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChatRetrievalResponse:
        """Retrieve Chat Messages Endpoint

        Retrieve chat messages with optional related data.

        :param market_id:
        :type market_id: str
        :param order_id:
        :type order_id: str
        :param user_id:
        :type user_id: str
        :param is_global:
        :type is_global: bool
        :param limit:
        :type limit: int
        :param before_date:
        :type before_date: str
        :param include_market: Include full market data in response
        :type include_market: bool
        :param include_user: Include full user data in response
        :type include_user: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get_serialize(
            market_id=market_id,
            order_id=order_id,
            user_id=user_id,
            is_global=is_global,
            limit=limit,
            before_date=before_date,
            include_market=include_market,
            include_user=include_user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ChatRetrievalResponse",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get_with_http_info(
        self,
        market_id: Optional[StrictStr] = None,
        order_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        is_global: Optional[StrictBool] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        before_date: Optional[StrictStr] = None,
        include_market: Annotated[Optional[StrictBool], Field(description="Include full market data in response")] = None,
        include_user: Annotated[Optional[StrictBool], Field(description="Include full user data in response")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChatRetrievalResponse]:
        """Retrieve Chat Messages Endpoint

        Retrieve chat messages with optional related data.

        :param market_id:
        :type market_id: str
        :param order_id:
        :type order_id: str
        :param user_id:
        :type user_id: str
        :param is_global:
        :type is_global: bool
        :param limit:
        :type limit: int
        :param before_date:
        :type before_date: str
        :param include_market: Include full market data in response
        :type include_market: bool
        :param include_user: Include full user data in response
        :type include_user: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get_serialize(
            market_id=market_id,
            order_id=order_id,
            user_id=user_id,
            is_global=is_global,
            limit=limit,
            before_date=before_date,
            include_market=include_market,
            include_user=include_user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ChatRetrievalResponse",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get_without_preload_content(
        self,
        market_id: Optional[StrictStr] = None,
        order_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        is_global: Optional[StrictBool] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        before_date: Optional[StrictStr] = None,
        include_market: Annotated[Optional[StrictBool], Field(description="Include full market data in response")] = None,
        include_user: Annotated[Optional[StrictBool], Field(description="Include full user data in response")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve Chat Messages Endpoint

        Retrieve chat messages with optional related data.

        :param market_id:
        :type market_id: str
        :param order_id:
        :type order_id: str
        :param user_id:
        :type user_id: str
        :param is_global:
        :type is_global: bool
        :param limit:
        :type limit: int
        :param before_date:
        :type before_date: str
        :param include_market: Include full market data in response
        :type include_market: bool
        :param include_user: Include full user data in response
        :type include_user: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get_serialize(
            market_id=market_id,
            order_id=order_id,
            user_id=user_id,
            is_global=is_global,
            limit=limit,
            before_date=before_date,
            include_market=include_market,
            include_user=include_user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ChatRetrievalResponse",
            "400": "ErrorResponse",
            "500": "ErrorResponse",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _retrieve_chat_messages_endpoint_v1_exchange_chat_retrieve_get_serialize(
        self,
        market_id,
        order_id,
        user_id,
        is_global,
        limit,
        before_date,
        include_market,
        include_user,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if market_id is not None:
            _query_params.append(("market_id", market_id))

        if order_id is not None:
            _query_params.append(("order_id", order_id))

        if user_id is not None:
            _query_params.append(("user_id", user_id))

        if is_global is not None:
            _query_params.append(("is_global", is_global))

        if limit is not None:
            _query_params.append(("limit", limit))

        if before_date is not None:
            _query_params.append(("before_date", before_date))

        if include_market is not None:
            _query_params.append(("include_market", include_market))

        if include_user is not None:
            _query_params.append(("include_user", include_user))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/exchange/chat/retrieve",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
