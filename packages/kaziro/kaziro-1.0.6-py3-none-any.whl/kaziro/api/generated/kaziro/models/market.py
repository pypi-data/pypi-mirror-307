# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.6
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class Market(BaseModel):
    """
    Market
    """  # noqa: E501

    id: StrictStr = Field(description="Unique identifier for the market")
    date_created: StrictStr = Field(description="The date the market was created")
    question: StrictStr = Field(description="The question of the market")
    outcome_1: StrictStr = Field(description="The first outcome of the market")
    outcome_2: StrictStr = Field(description="The second outcome of the market")
    description: StrictStr = Field(description="The description of the market")
    end_date: Optional[StrictStr] = Field(default=None, description="The end date of the market")
    status: StrictStr = Field(description="The status of the market")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The tags of the market")
    creator_id: Optional[StrictStr] = Field(default=None, description="The creator of the market")
    date_closed: Optional[StrictStr] = Field(default=None, description="The date the market was closed")
    result: Optional[StrictStr] = Field(default=None, description="The result of the market. One of None, outcome_1, outcome_2, or void.")
    image_url: Optional[StrictStr] = Field(default=None, description="The URL of the image generated for the market")
    ref_id: Optional[StrictStr] = Field(default=None, description="The reference identifier of the market")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata for the market. Generally includes order_stat and position_stat")
    __properties: ClassVar[List[str]] = [
        "id",
        "date_created",
        "question",
        "outcome_1",
        "outcome_2",
        "description",
        "end_date",
        "status",
        "tags",
        "creator_id",
        "date_closed",
        "result",
        "image_url",
        "ref_id",
        "metadata",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["OPEN", "CLOSED", "ACTIVE", "CANCELLED"]):
            raise ValueError("must be one of enum values ('OPEN', 'CLOSED', 'ACTIVE', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Market from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Market from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "date_created": obj.get("date_created"),
                "question": obj.get("question"),
                "outcome_1": obj.get("outcome_1"),
                "outcome_2": obj.get("outcome_2"),
                "description": obj.get("description"),
                "end_date": obj.get("end_date"),
                "status": obj.get("status"),
                "tags": obj.get("tags"),
                "creator_id": obj.get("creator_id"),
                "date_closed": obj.get("date_closed"),
                "result": obj.get("result"),
                "image_url": obj.get("image_url"),
                "ref_id": obj.get("ref_id"),
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
