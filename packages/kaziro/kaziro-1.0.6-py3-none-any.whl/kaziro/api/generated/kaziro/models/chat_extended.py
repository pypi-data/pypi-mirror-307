# coding: utf-8

"""
Kaziro API

Kaziro Trading API Documentation

The version of the OpenAPI document: 1.0.6
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from ..models.market import Market
from ..models.order import Order
from ..models.user import User


class ChatExtended(BaseModel):
    """
    ChatExtended
    """  # noqa: E501

    id: StrictStr = Field(description="Unique identifier for the chat message")
    user_id: StrictStr = Field(description="User identifier associated with the chat message")
    content: StrictStr = Field(description="The content of the chat message")
    date_created: StrictStr = Field(description="The date the message was created")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata for the chat message")
    market_id: Optional[StrictStr] = Field(default=None, description="Market identifier associated with the chat message")
    order_id: Optional[StrictStr] = Field(default=None, description="Order identifier associated with the chat message")
    is_global: StrictBool = Field(
        description="Whether the chat message is global. A global chat message is visible to all users on Kaziro and is not associated with a particular market or order, while a non-global chat message is visible to the user who sent it and the creator of the market or order"
    )
    market: Optional[Market] = None
    order: Optional[Order] = None
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["id", "user_id", "content", "date_created", "metadata", "market_id", "order_id", "is_global", "market", "order", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatExtended from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market
        if self.market:
            _dict["market"] = self.market.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict["order"] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict["user"] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatExtended from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "user_id": obj.get("user_id"),
                "content": obj.get("content"),
                "date_created": obj.get("date_created"),
                "metadata": obj.get("metadata"),
                "market_id": obj.get("market_id"),
                "order_id": obj.get("order_id"),
                "is_global": obj.get("is_global"),
                "market": Market.from_dict(obj["market"]) if obj.get("market") is not None else None,
                "order": Order.from_dict(obj["order"]) if obj.get("order") is not None else None,
                "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            }
        )
        return _obj
