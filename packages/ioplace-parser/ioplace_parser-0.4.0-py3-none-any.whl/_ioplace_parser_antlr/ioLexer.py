# Generated from ioLexer.g by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,109,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,4,0,35,8,0,11,0,12,0,36,1,0,1,0,
        1,1,1,1,1,1,1,1,3,1,45,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,55,
        8,1,1,2,4,2,58,8,2,11,2,12,2,59,1,3,1,3,1,3,3,3,65,8,3,1,4,1,4,1,
        4,5,4,70,8,4,10,4,12,4,73,9,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,3,8,82,
        8,8,1,8,1,8,1,8,4,8,87,8,8,11,8,12,8,88,1,8,3,8,92,8,8,1,9,1,9,1,
        10,1,10,1,11,1,11,3,11,100,8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        0,23,0,25,0,27,0,29,0,31,0,1,0,6,5,0,40,43,46,46,63,63,91,93,124,
        124,4,0,69,69,78,78,83,83,87,87,2,0,9,9,32,32,1,0,10,10,3,0,65,90,
        95,95,97,122,1,0,48,57,115,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,1,34,1,0,0,0,3,54,1,0,0,0,5,57,1,0,0,0,7,61,
        1,0,0,0,9,66,1,0,0,0,11,74,1,0,0,0,13,76,1,0,0,0,15,78,1,0,0,0,17,
        81,1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,99,1,0,0,0,25,101,1,0,
        0,0,27,103,1,0,0,0,29,105,1,0,0,0,31,107,1,0,0,0,33,35,3,23,11,0,
        34,33,1,0,0,0,35,36,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,38,1,
        0,0,0,38,39,6,0,0,0,39,2,1,0,0,0,40,41,3,21,10,0,41,42,5,82,0,0,
        42,45,1,0,0,0,43,45,3,21,10,0,44,40,1,0,0,0,44,43,1,0,0,0,45,55,
        1,0,0,0,46,47,5,66,0,0,47,48,5,85,0,0,48,49,5,83,0,0,49,50,5,95,
        0,0,50,51,5,83,0,0,51,52,5,79,0,0,52,53,5,82,0,0,53,55,5,84,0,0,
        54,44,1,0,0,0,54,46,1,0,0,0,55,4,1,0,0,0,56,58,3,31,15,0,57,56,1,
        0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,6,1,0,0,0,61,
        64,3,5,2,0,62,63,5,46,0,0,63,65,3,5,2,0,64,62,1,0,0,0,64,65,1,0,
        0,0,65,8,1,0,0,0,66,71,3,29,14,0,67,70,3,29,14,0,68,70,3,31,15,0,
        69,67,1,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,
        0,0,0,72,10,1,0,0,0,73,71,1,0,0,0,74,75,5,64,0,0,75,12,1,0,0,0,76,
        77,5,35,0,0,77,14,1,0,0,0,78,79,5,61,0,0,79,16,1,0,0,0,80,82,5,94,
        0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,86,1,0,0,0,83,87,3,31,15,0,84,
        87,3,29,14,0,85,87,7,0,0,0,86,83,1,0,0,0,86,84,1,0,0,0,86,85,1,0,
        0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,92,
        5,36,0,0,91,90,1,0,0,0,91,92,1,0,0,0,92,18,1,0,0,0,93,94,5,36,0,
        0,94,20,1,0,0,0,95,96,7,1,0,0,96,22,1,0,0,0,97,100,7,2,0,0,98,100,
        3,25,12,0,99,97,1,0,0,0,99,98,1,0,0,0,100,24,1,0,0,0,101,102,5,10,
        0,0,102,26,1,0,0,0,103,104,8,3,0,0,104,28,1,0,0,0,105,106,7,4,0,
        0,106,30,1,0,0,0,107,108,7,5,0,0,108,32,1,0,0,0,13,0,36,44,54,59,
        64,69,71,81,86,88,91,99,1,6,0,0
    ]

class ioLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Ws = 1
    Direction = 2
    Integer = 3
    Float = 4
    Identifier = 5
    At = 6
    Hash = 7
    Equal = 8
    Regex = 9
    Dollar = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'#'", "'='", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "Ws", "Direction", "Integer", "Float", "Identifier", "At", "Hash", 
            "Equal", "Regex", "Dollar" ]

    ruleNames = [ "Ws", "Direction", "Integer", "Float", "Identifier", "At", 
                  "Hash", "Equal", "Regex", "Dollar", "Cardinal", "Whitespace", 
                  "EOL", "NonEOL", "Nondigit", "Digit" ]

    grammarFileName = "ioLexer.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


