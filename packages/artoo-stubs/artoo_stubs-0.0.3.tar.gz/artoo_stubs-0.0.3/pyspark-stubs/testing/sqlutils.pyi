import abc
import datetime
from collections.abc import Generator

from _typeshed import Incomplete
from pyspark.sql import SparkSession as SparkSession
from pyspark.sql.pandas.utils import (
    require_minimum_pandas_version as require_minimum_pandas_version,
    require_minimum_pyarrow_version as require_minimum_pyarrow_version,
)
from pyspark.sql.types import ArrayType as ArrayType, DoubleType as DoubleType, Row as Row, UserDefinedType as UserDefinedType
from pyspark.sql.utils import require_test_compiled as require_test_compiled
from pyspark.testing.utils import PySparkErrorTestUtils as PySparkErrorTestUtils, ReusedPySparkTestCase as ReusedPySparkTestCase

pandas_requirement_message: Incomplete
pyarrow_requirement_message: Incomplete
test_not_compiled_message: Incomplete
have_pandas: Incomplete
have_pyarrow: Incomplete
test_compiled: Incomplete

class UTCOffsetTimezone(datetime.tzinfo, metaclass=abc.ABCMeta):
    ZERO: Incomplete
    def __init__(self, offset: int = 0) -> None: ...
    def utcoffset(self, dt): ...
    def dst(self, dt): ...

class ExamplePointUDT(UserDefinedType):
    @classmethod
    def sqlType(cls): ...
    @classmethod
    def module(cls): ...
    @classmethod
    def scalaUDT(cls): ...
    def serialize(self, obj): ...
    def deserialize(self, datum): ...

class ExamplePoint:
    __UDT__: Incomplete
    x: Incomplete
    y: Incomplete
    def __init__(self, x, y) -> None: ...
    def __eq__(self, other): ...

class PythonOnlyUDT(UserDefinedType):
    @classmethod
    def sqlType(cls): ...
    @classmethod
    def module(cls): ...
    def serialize(self, obj): ...
    def deserialize(self, datum): ...
    @staticmethod
    def foo() -> None: ...
    @property
    def props(self): ...

class PythonOnlyPoint(ExamplePoint):
    __UDT__: Incomplete

class MyObject:
    key: Incomplete
    value: Incomplete
    def __init__(self, key, value) -> None: ...

class SQLTestUtils:
    def sql_conf(self, pairs) -> Generator[None]: ...
    def database(self, *databases) -> Generator[None]: ...
    def table(self, *tables) -> Generator[None]: ...
    def tempView(self, *views) -> Generator[None]: ...
    def function(self, *functions) -> Generator[None]: ...
    @staticmethod
    def assert_close(a, b) -> None: ...

class ReusedSQLTestCase(ReusedPySparkTestCase, SQLTestUtils, PySparkErrorTestUtils):
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
