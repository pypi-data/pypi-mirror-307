# Generated by ariadne-codegen
# Source: aesop/graphql/queries

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class GetGovernedTagChildTags(BaseModel):
    node: Optional[
        Annotated[
            Union[
                "GetGovernedTagChildTagsNodeNode",
                "GetGovernedTagChildTagsNodeUserDefinedResource",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class GetGovernedTagChildTagsNodeNode(BaseModel):
    typename__: Literal[
        "API",
        "Crawler",
        "CrawlerRun",
        "Dashboard",
        "Dataset",
        "Group",
        "Hierarchy",
        "KnowledgeCard",
        "Metric",
        "Namespace",
        "Node",
        "Person",
        "Pipeline",
        "SystemTagCounts",
        "VirtualView",
    ] = Field(alias="__typename")


class GetGovernedTagChildTagsNodeUserDefinedResource(BaseModel):
    typename__: Literal["UserDefinedResource"] = Field(alias="__typename")
    child_resources: "GetGovernedTagChildTagsNodeUserDefinedResourceChildResources" = (
        Field(alias="childResources")
    )


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResources(BaseModel):
    edges: List[
        Optional["GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdges"]
    ]
    page_info: (
        "GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesPageInfo"
    ) = Field(alias="pageInfo")


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdges(BaseModel):
    node: "GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNode"


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNode(BaseModel):
    id: str
    user_defined_resource_info: Optional[
        "GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeUserDefinedResourceInfo"
    ] = Field(alias="userDefinedResourceInfo")
    parent_resource: Optional[
        "GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeParentResource"
    ] = Field(alias="parentResource")


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeUserDefinedResourceInfo(
    BaseModel
):
    name: str
    description: Optional[
        "GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeUserDefinedResourceInfoDescription"
    ]


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeUserDefinedResourceInfoDescription(
    BaseModel
):
    text: str


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeParentResource(
    BaseModel
):
    id: str
    user_defined_resource_info: Optional[
        "GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeParentResourceUserDefinedResourceInfo"
    ] = Field(alias="userDefinedResourceInfo")


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeParentResourceUserDefinedResourceInfo(
    BaseModel
):
    name: str


class GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesPageInfo(BaseModel):
    has_next_page: Optional[bool] = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


GetGovernedTagChildTags.model_rebuild()
GetGovernedTagChildTagsNodeUserDefinedResource.model_rebuild()
GetGovernedTagChildTagsNodeUserDefinedResourceChildResources.model_rebuild()
GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdges.model_rebuild()
GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNode.model_rebuild()
GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeUserDefinedResourceInfo.model_rebuild()
GetGovernedTagChildTagsNodeUserDefinedResourceChildResourcesEdgesNodeParentResource.model_rebuild()
