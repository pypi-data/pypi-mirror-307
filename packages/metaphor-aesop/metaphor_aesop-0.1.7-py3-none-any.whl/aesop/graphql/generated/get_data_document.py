# Generated by ariadne-codegen
# Source: aesop/graphql/queries

from typing import Annotated, Any, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import KnowledgeCardType


class GetDataDocument(BaseModel):
    node: Optional[
        Annotated[
            Union["GetDataDocumentNodeNode", "GetDataDocumentNodeKnowledgeCard"],
            Field(discriminator="typename__"),
        ]
    ]


class GetDataDocumentNodeNode(BaseModel):
    typename__: Literal[
        "API",
        "Crawler",
        "CrawlerRun",
        "Dashboard",
        "Dataset",
        "Group",
        "Hierarchy",
        "Metric",
        "Namespace",
        "Node",
        "Person",
        "Pipeline",
        "SystemTagCounts",
        "UserDefinedResource",
        "VirtualView",
    ] = Field(alias="__typename")


class GetDataDocumentNodeKnowledgeCard(BaseModel):
    typename__: Literal["KnowledgeCard"] = Field(alias="__typename")
    knowledge_card_info: Optional[
        "GetDataDocumentNodeKnowledgeCardKnowledgeCardInfo"
    ] = Field(alias="knowledgeCardInfo")


class GetDataDocumentNodeKnowledgeCardKnowledgeCardInfo(BaseModel):
    created: "GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoCreated"
    last_modified: Optional[
        "GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoLastModified"
    ] = Field(alias="lastModified")
    detail: "GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetail"


class GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoCreated(BaseModel):
    time: Any
    actor: Optional[str]


class GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoLastModified(BaseModel):
    time: Any
    actor: Optional[str]


class GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetail(BaseModel):
    type: KnowledgeCardType
    data_document: Optional[
        "GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetailDataDocument"
    ] = Field(alias="dataDocument")


class GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetailDataDocument(BaseModel):
    title: Optional[str]
    content: str
    tokenized_content: Optional[
        "GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetailDataDocumentTokenizedContent"
    ] = Field(alias="tokenizedContent")


class GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetailDataDocumentTokenizedContent(
    BaseModel
):
    content: Optional[str]


GetDataDocument.model_rebuild()
GetDataDocumentNodeKnowledgeCard.model_rebuild()
GetDataDocumentNodeKnowledgeCardKnowledgeCardInfo.model_rebuild()
GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetail.model_rebuild()
GetDataDocumentNodeKnowledgeCardKnowledgeCardInfoDetailDataDocument.model_rebuild()
