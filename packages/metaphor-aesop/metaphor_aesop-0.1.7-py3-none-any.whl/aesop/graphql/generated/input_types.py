# Generated by ariadne-codegen
# Source: schema.gql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AggregationMetadataName,
    AnchorEntityType,
    APIPlatform,
    AppPlatform,
    AssetContactValueType,
    AssetEntityType,
    AssetRelationType,
    AssetSubType,
    ChangeRequestStatus,
    ChangeRequestType,
    CrawlerType,
    CustomMetadataDataType,
    DashboardPlatform,
    DashboardType,
    DataPlatform,
    DataQualityStatus,
    DbtMaterializationType,
    EntityType,
    GroupPlatform,
    InAppOnboardingCompletionStep,
    InAppProfileCompletionStep,
    KnowledgeCardState,
    KnowledgeCardType,
    LineageType,
    MetricType,
    NamespaceType,
    Order,
    Persona,
    PipelineType,
    PlatformType,
    QueryDescriptionSupportedStatement,
    QueryDescriptionType,
    SearchContext,
    SearchIndex,
    SystemTagSource,
    ThoughtSpotDataObjectType,
    UserActivityGranularity,
    UserActivitySource,
    UserActivityType,
    UserDefinedOrderType,
    UserDefinedResourceType,
    UserRole,
    VersionUpdateField,
    VirtualViewType,
    WebhookTriggerType,
)


class AISearchQueryInput(BaseModel):
    query: Optional[str] = ""


class APIIdInput(BaseModel):
    name: Optional[str] = ""
    platform: Optional[APIPlatform] = APIPlatform.UNKNOWN


class AcknowledgeChangeRequestInput(BaseModel):
    acknowledged_by: Optional["AuditStampInput"] = Field(
        alias="acknowledgedBy",
        default_factory=lambda: globals()["AuditStampInput"].model_validate(
            {"time": "1970-01-01T00:00:00.000Z"}
        ),
    )
    entity_id: Optional[str] = Field(alias="entityId", default="")
    message: Optional[str] = None


class ActivityFeedConnectionFilterInput(BaseModel):
    attached: Optional[bool] = True
    authors: Optional[List[str]] = None
    change_request_recipients: Optional[List[str]] = Field(
        alias="changeRequestRecipients", default=None
    )
    change_request_status: Optional[List[ChangeRequestStatus]] = Field(
        alias="changeRequestStatus", default=None
    )
    contains_text: Optional[str] = Field(alias="containsText", default=None)
    data_group_id: Optional[str] = Field(alias="dataGroupId", default=None)
    entity_ids: Optional[List[str]] = Field(alias="entityIds", default=None)
    field_path: Optional[List[str]] = Field(alias="fieldPath", default=None)
    field_path_namespace: Optional[str] = Field(
        alias="fieldPathNamespace", default=None
    )
    followed_by: Optional[List[str]] = Field(alias="followedBy", default=None)
    governed_tags: Optional[List[str]] = Field(alias="governedTags", default=None)
    hashtags: Optional[List[str]] = None
    include_archived: Optional[bool] = Field(alias="includeArchived", default=None)
    include_deleted: Optional[bool] = Field(alias="includeDeleted", default=False)
    include_draft: Optional[bool] = Field(alias="includeDraft", default=None)
    is_following: Optional[bool] = Field(alias="isFollowing", default=None)
    is_generated: Optional[bool] = Field(alias="isGenerated", default=None)
    is_marked_as_curated: Optional[bool] = Field(
        alias="isMarkedAsCurated", default=None
    )
    knowledge_card_types: Optional[List[KnowledgeCardType]] = Field(
        alias="knowledgeCardTypes",
        default_factory=lambda: [
            KnowledgeCardType.CHANGE_REQUEST,
            KnowledgeCardType.DEPRECATION,
            KnowledgeCardType.HOW_TO_USE,
            KnowledgeCardType.INCIDENT,
        ],
    )
    mentioned: Optional[bool] = False
    namespace_types: Optional[List[NamespaceType]] = Field(
        alias="namespaceTypes", default=None
    )
    only_top_level_comments: Optional[bool] = Field(
        alias="onlyTopLevelComments", default=True
    )
    parent_comment: Optional[str] = Field(alias="parentComment", default=None)
    parsed_statement: Optional[List[QueryDescriptionSupportedStatement]] = Field(
        alias="parsedStatement", default=None
    )
    person_id: Optional[str] = Field(alias="personId", default=None)
    query_ids: Optional[List[str]] = Field(alias="queryIds", default=None)
    related_entity_ids: Optional[List[str]] = Field(
        alias="relatedEntityIds", default=None
    )
    status: Optional[List[KnowledgeCardState]] = None


class AddTenantInput(BaseModel):
    name: Optional[str] = ""


class AddWebhookInput(BaseModel):
    description: Optional[str] = None
    trigger: Optional[WebhookTriggerType] = WebhookTriggerType.UNKNOWN
    url: Optional[str] = ""


class ApiKeyDeleteInput(BaseModel):
    ids: List[str]


class AssetConnectionFilterInput(BaseModel):
    entity_types: List[EntityType] = Field(alias="entityTypes")
    knowledge_card_filters: Optional["KnowledgeCardConnectionFilterInput"] = Field(
        alias="knowledgeCardFilters", default=None
    )
    namespace_filters: Optional["NamespaceInfoConnectionFilterInput"] = Field(
        alias="namespaceFilters", default=None
    )


class AssetContactsPatchInput(BaseModel):
    contacts_to_add: Optional[List["DesignatedContactInput"]] = Field(
        alias="contactsToAdd", default=None
    )
    contacts_to_remove: Optional[List["DesignatedContactInput"]] = Field(
        alias="contactsToRemove", default=None
    )
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    search_query: Optional["SearchArguments"] = Field(alias="searchQuery", default=None)


class AssetDescriptionKnowledgeCardInput(BaseModel):
    description: Optional[str] = ""
    title: Optional[str] = None
    tokenized_content: Optional["AssetDescriptionTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "AssetDescriptionTokenizedContentInput"
        ].model_validate({}),
    )


class AssetDescriptionTokenizedContentInput(BaseModel):
    description: Optional[str] = None


class AssetFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    entity_type: Optional[List[AssetEntityType]] = Field(
        alias="entityType", default=None
    )
    hashtags: Optional[List[str]] = None
    hierarchies: Optional[List[str]] = None
    hierarchies_length: Optional[int] = Field(alias="hierarchiesLength", default=None)
    is_complete: Optional[bool] = Field(alias="isComplete", default=None)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_production: Optional[bool] = Field(alias="isProduction", default=None)
    platform: Optional[List[PlatformType]] = None
    sub_type: Optional[List[AssetSubType]] = Field(alias="subType", default=None)


class AssetGovernedTagsPatchInput(BaseModel):
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    governed_tags_to_add: Optional[List[str]] = Field(
        alias="governedTagsToAdd", default=None
    )
    governed_tags_to_remove: Optional[List[str]] = Field(
        alias="governedTagsToRemove", default=None
    )
    search_query: Optional["SearchArguments"] = Field(alias="searchQuery", default=None)


class AssetLikeInput(BaseModel):
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )


class AssetSort(BaseModel):
    dataset_row_count: Optional[Order] = Field(alias="datasetRowCount", default=None)
    dataset_size: Optional[Order] = Field(alias="datasetSize", default=None)
    dataset_usage: Optional[Order] = Field(alias="datasetUsage", default=None)
    view_count: Optional[Order] = Field(alias="viewCount", default=None)


class AssetsConnectionFilterInput(BaseModel):
    contact_display_names: Optional[List[str]] = Field(
        alias="contactDisplayNames", default=None
    )
    entity_type: Optional[List[AssetEntityType]] = Field(
        alias="entityType", default=None
    )
    governed_tags: Optional[List[str]] = Field(alias="governedTags", default=None)
    name: Optional[str] = None
    sub_type: Optional[List[AssetSubType]] = Field(alias="subType", default=None)


class AssociatedAssetConnectionFilterInput(BaseModel):
    designated_contacts: Optional[List[str]] = Field(
        alias="designatedContacts", default=None
    )
    entity_types: List[EntityType] = Field(alias="entityTypes")
    knowledge_card_filters: Optional["KnowledgeCardConnectionFilterInput"] = Field(
        alias="knowledgeCardFilters", default=None
    )
    namespace_filters: Optional["NamespaceInfoConnectionFilterInput"] = Field(
        alias="namespaceFilters", default=None
    )


class AthenaQueryRequest(BaseModel):
    execution_id: Optional[str] = Field(alias="executionId", default=None)
    limit: Optional[int] = 10
    next_token: Optional[str] = Field(alias="nextToken", default=None)
    statement: Optional[str] = None


class AuditStampInput(BaseModel):
    actor: Optional[str] = None
    time: Optional[Any] = "1970-01-01T00:00:00.000Z"


class AuthorizationInput(BaseModel):
    new_user_default_role: Optional[UserRole] = Field(
        alias="newUserDefaultRole", default=None
    )


class AutoGeneratedDocumentInput(BaseModel):
    path: Optional[List[str]] = Field(default_factory=lambda: [])
    title: Optional[str] = ""


class AzureAdSSOInput(BaseModel):
    metadata_url: Optional[str] = Field(alias="metadataUrl", default="")


class BaseConnectionFilter(BaseModel):
    include_deleted: Optional[bool] = Field(alias="includeDeleted", default=None)


class ChangeRequestKnowledgeCardInput(BaseModel):
    acknowledged: Optional["AcknowledgeChangeRequestInput"] = None
    message: Optional[str] = None
    recipient_id: Optional[str] = Field(alias="recipientId", default="")
    request_type: Optional[ChangeRequestType] = Field(
        alias="requestType", default=ChangeRequestType.UNKNOWN
    )
    status: Optional["StatusBaseInput"] = None
    title: Optional[str] = ""
    tokenized_content: Optional["ChangeRequestTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "ChangeRequestTokenizedContentInput"
        ].model_validate({}),
    )


class ChangeRequestStatusPatchInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    status: ChangeRequestStatus


class ChangeRequestTokenizedContentInput(BaseModel):
    message: Optional[str] = None


class ColumnDescriptionKnowledgeCardInput(BaseModel):
    description: Optional[str] = ""
    field_path: Optional[str] = Field(alias="fieldPath", default="")
    field_path_namespace: Optional[str] = Field(
        alias="fieldPathNamespace", default=None
    )
    title: Optional[str] = ""


class CommentInput(BaseModel):
    comment: Optional[str] = ""
    parent_comment_id: Optional[str] = Field(alias="parentCommentId", default=None)
    title: Optional[str] = ""
    tokenized_content: Optional["CommentTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "CommentTokenizedContentInput"
        ].model_validate({}),
    )


class CommentTokenizedContentInput(BaseModel):
    comment: Optional[str] = None


class CommonColumnAttributesInput(BaseModel):
    contacts: Optional[List["DesignatedContactInput"]] = None
    description: Optional["UserDefinedResourceDescriptionInput"] = None
    entity_id: Optional[str] = Field(alias="entityId", default="")
    exclusion: Optional[List["DatasetColumnsInput"]] = Field(default_factory=lambda: [])
    governed_tags: Optional[List[str]] = Field(alias="governedTags", default=None)


class CommonColumnAttributesPatchInput(BaseModel):
    contacts_to_add: Optional[List["DesignatedContactInput"]] = Field(
        alias="contactsToAdd", default=None
    )
    contacts_to_remove: Optional[List["DesignatedContactInput"]] = Field(
        alias="contactsToRemove", default=None
    )
    description: Optional["UserDefinedResourceDescriptionInput"] = None
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    exclusion: Optional[List["DatasetColumnsInput"]] = None
    governed_tags_to_add: Optional[List[str]] = Field(
        alias="governedTagsToAdd", default=None
    )
    governed_tags_to_remove: Optional[List[str]] = Field(
        alias="governedTagsToRemove", default=None
    )


class ConnectionOrderBy(BaseModel):
    custom_order: Optional["CustomOrder"] = Field(alias="customOrder", default=None)
    names: Optional[List[str]] = Field(default_factory=lambda: [])
    order: Optional[Order] = Order.Asc


class CrawlerFilter(BaseModel):
    id: Optional[str] = None
    is_metaphor_managed: Optional[bool] = Field(alias="isMetaphorManaged", default=None)


class CreateApiKeyInput(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = True
    name: str


class CreateCrawlerInput(BaseModel):
    description: Optional[str] = None
    display_name: Optional[str] = Field(alias="displayName", default=None)
    is_metaphor_managed: Optional[bool] = Field(alias="isMetaphorManaged", default=True)
    schedule: Optional["CreateCrawlerScheduleInput"] = Field(
        default_factory=lambda: globals()["CreateCrawlerScheduleInput"].model_validate(
            {
                "enabled": False,
                "isDaily": True,
                "type": CreateCrawlerScheduleInput.UNKNOWN,
            }
        )
    )


class CreateCrawlerScheduleInput(BaseModel):
    enabled: Optional[bool] = False
    is_daily: Optional[bool] = Field(alias="isDaily", default=True)
    schedule: Optional[str] = None
    type: Optional[CrawlerType] = CrawlerType.UNKNOWN


class CustomAttributesInput(BaseModel):
    color: Optional[str] = None
    icon_key: Optional[str] = Field(alias="iconKey", default=None)


class CustomMetadataConfigInput(BaseModel):
    data_type: Optional[CustomMetadataDataType] = Field(
        alias="dataType", default=CustomMetadataDataType.STRING
    )
    display_name: Optional[str] = Field(alias="displayName", default=None)
    highlight: Optional[bool] = True
    key: Optional[str] = ""
    search_operator_example: Optional[str] = Field(
        alias="searchOperatorExample", default=None
    )
    searchable: Optional[bool] = True


class CustomMetadataFacetFilterInput(BaseModel):
    key: Optional[str] = ""
    values: Optional[List[str]] = Field(default_factory=lambda: [])


class CustomMetadataItemInput(BaseModel):
    key: Optional[str] = ""
    value: Optional[str] = ""


class CustomOrder(BaseModel):
    indexed_rank: List[str] = Field(alias="indexedRank")
    rank_if_not_found: Optional[int] = Field(alias="rankIfNotFound", default=None)


class CustomTagAttributesInput(BaseModel):
    color: Optional[str] = None
    icon_key: Optional[str] = Field(alias="iconKey", default=None)


class DashboardConnectionFilterInput(BaseModel):
    name: Optional[str] = None


class DashboardFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_complete: Optional[bool] = Field(alias="isComplete", default=None)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_production: Optional[bool] = Field(alias="isProduction", default=None)
    platform: Optional[List[DashboardPlatform]] = None


class DashboardIdInput(BaseModel):
    dashboard_id: Optional[str] = Field(alias="dashboardId", default="")
    platform: Optional[DashboardPlatform] = DashboardPlatform.UNKNOWN


class DashboardSort(BaseModel):
    view_count: Optional[Order] = Field(alias="viewCount", default=None)


class DataDocumentInput(BaseModel):
    content: Optional[str] = ""
    title: Optional[str] = None
    tokenized_content: Optional["DataDocumentTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "DataDocumentTokenizedContentInput"
        ].model_validate({}),
    )


class DataDocumentTokenizedContentInput(BaseModel):
    content: Optional[str] = None


class DatasetColumnsInput(BaseModel):
    dataset_id: Optional[str] = Field(alias="datasetId", default="")
    dataset_logical_id: Optional["DatasetIdInput"] = Field(
        alias="datasetLogicalId", default=None
    )
    fields: Optional[List[str]] = Field(default_factory=lambda: [])


class DatasetColumnsPatternInput(BaseModel):
    glob_pattern: Optional[str] = Field(alias="globPattern", default="")


class DatasetFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    database: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_complete: Optional[bool] = Field(alias="isComplete", default=None)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_production: Optional[bool] = Field(alias="isProduction", default=None)
    platform: Optional[List[DataPlatform]] = None
    schema_: Optional[List[str]] = Field(alias="schema", default=None)


class DatasetIdInput(BaseModel):
    account: Optional[str] = None
    name: Optional[str] = ""
    platform: Optional[DataPlatform] = DataPlatform.UNKNOWN


class DatasetPatternInput(BaseModel):
    account: Optional[str] = None
    database: Optional[str] = ""
    is_case_sensitive: Optional[bool] = Field(alias="isCaseSensitive", default=False)
    platform: Optional[DataPlatform] = DataPlatform.UNKNOWN
    schema_: Optional[str] = Field(alias="schema", default="")
    table: Optional[str] = ""


class DatasetRelationInput(BaseModel):
    types: Optional[List[AssetRelationType]] = None


class DatasetSort(BaseModel):
    row_count: Optional[Order] = Field(alias="rowCount", default=None)
    size: Optional[Order] = None
    usage: Optional[Order] = None
    view_count: Optional[Order] = Field(alias="viewCount", default=None)


class DbtDownstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class DbtModelRelationInput(BaseModel):
    types: Optional[List[AssetRelationType]] = None


class DbtUpstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class DeleteCrawlerInput(BaseModel):
    ids: Optional[List[str]] = Field(default_factory=lambda: [])


class DeleteWebhooksInput(BaseModel):
    ids: Optional[List[str]] = Field(default_factory=lambda: [])


class DeprecationKnowledgeCardInput(BaseModel):
    detail: Optional[str] = ""
    planned_date: Optional[Any] = Field(
        alias="plannedDate", default="1970-01-01T00:00:00.000Z"
    )
    title: Optional[str] = None
    tokenized_content: Optional["DeprecationTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "DeprecationTokenizedContentInput"
        ].model_validate({}),
    )


class DeprecationTokenizedContentInput(BaseModel):
    detail: Optional[str] = None


class DesignatedContactInput(BaseModel):
    designation: Optional[str] = ""
    value: Optional[str] = ""
    value_type: Optional[AssetContactValueType] = Field(
        alias="valueType", default=AssetContactValueType.UNKNOWN
    )


class DropTenantInput(BaseModel):
    id: Optional[str] = ""
    name: Optional[str] = ""


class FieldTagAssociationsPatchInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    patch_schema_field_governed_tags: Optional[List["FieldTagPatchInput"]] = Field(
        alias="patchSchemaFieldGovernedTags", default_factory=lambda: []
    )


class FieldTagPatchInput(BaseModel):
    field_path: Optional[str] = Field(alias="fieldPath", default="")
    tags_to_add: Optional[List[str]] = Field(alias="tagsToAdd", default=None)
    tags_to_remove: Optional[List[str]] = Field(alias="tagsToRemove", default=None)


class FollowAssetInput(BaseModel):
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    followers_to_enroll: Optional[List[str]] = Field(
        alias="followersToEnroll", default_factory=lambda: []
    )
    search_query: Optional["SearchArguments"] = Field(alias="searchQuery", default=None)


class GeneratedAssetDescriptionInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    field_paths: Optional[List[str]] = Field(alias="fieldPaths", default=None)
    table: Optional[str] = None


class GetWebhookPayloadSchemaInput(BaseModel):
    trigger: Optional[WebhookTriggerType] = WebhookTriggerType.UNKNOWN


class GetWebhooksInput(BaseModel):
    trigger: Optional[WebhookTriggerType] = None


class GoogleSocialLoginInput(BaseModel):
    allowed_email_patterns: Optional[List[str]] = Field(
        alias="allowedEmailPatterns", default_factory=lambda: ["@metaphor\\.io$"]
    )


class GoogleWorkspaceSSOInput(BaseModel):
    metadata_file: Optional[str] = Field(alias="metadataFile", default="")


class GovernedTagFilterInput(BaseModel):
    common_attributes_last_updated_by: Optional[List[str]] = Field(
        alias="commonAttributesLastUpdatedBy", default=None
    )
    common_column_contacts: Optional[List[str]] = Field(
        alias="commonColumnContacts", default=None
    )
    common_column_tags: Optional[List[str]] = Field(
        alias="commonColumnTags", default=None
    )
    created_by: Optional[List[str]] = Field(alias="createdBy", default=None)
    designated_contacts: Optional[List[str]] = Field(
        alias="designatedContacts", default=None
    )
    entity_id: Optional[List[str]] = Field(alias="entityId", default=None)
    has_parent: Optional[bool] = Field(alias="hasParent", default=None)
    is_child_of: Optional[List[str]] = Field(alias="isChildOf", default=None)
    name: Optional[str] = None
    type: Optional[List[UserDefinedResourceType]] = Field(
        default_factory=lambda: [UserDefinedResourceType.GOVERNED_TAG]
    )


class GroupConnectionFilterInput(BaseModel):
    creator: Optional[str] = None
    managed_by: Optional[GroupPlatform] = Field(alias="managedBy", default=None)
    name: Optional[str] = None


class GroupDescriptionInput(BaseModel):
    text: Optional[str] = ""
    tokenized_text: Optional[str] = Field(alias="tokenizedText", default=None)


class GroupFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)


class GroupInfoInput(BaseModel):
    description: Optional["GroupDescriptionInput"] = None
    email: Optional[str] = None
    entity_id: Optional[str] = Field(alias="entityId", default="")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    managed_by: Optional[GroupPlatform] = Field(
        alias="managedBy", default=GroupPlatform.METAPHOR
    )
    members: Optional[List[str]] = Field(default_factory=lambda: [])
    name: Optional[str] = ""
    subgroups: Optional[List[str]] = None


class GroupInput(BaseModel):
    group_info: Optional["GroupInfoInput"] = Field(alias="groupInfo", default=None)


class GroupMembersPatchInput(BaseModel):
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    member_ids_to_add: Optional[List[str]] = Field(alias="memberIdsToAdd", default=None)
    member_ids_to_remove: Optional[List[str]] = Field(
        alias="memberIdsToRemove", default=None
    )


class HardDeletionInput(BaseModel):
    enabled: Optional[bool] = True
    threshold_hours: Optional[float] = Field(alias="thresholdHours", default=1440)


class HashtagInput(BaseModel):
    value: Optional[str] = ""


class HashtagPatchInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    hashtags_to_add: Optional[List[Optional["HashtagInput"]]] = Field(
        alias="hashtagsToAdd", default_factory=lambda: []
    )
    hashtags_to_remove: Optional[List[Optional["HashtagInput"]]] = Field(
        alias="hashtagsToRemove", default_factory=lambda: []
    )


class HierarchyConnectionFilterInput(BaseModel):
    parent_path: Optional[List[str]] = Field(alias="parentPath", default=None)


class HierarchyFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)


class HierarchyLogicalIdInput(BaseModel):
    path: Optional[List[str]] = Field(default_factory=lambda: [])


class HowToUseTokenizedContentInput(BaseModel):
    detail: Optional[str] = None


class IncidentKnowledgeCardInput(BaseModel):
    detail: Optional[str] = ""
    title: Optional[str] = None
    tokenized_content: Optional["IncidentTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "IncidentTokenizedContentInput"
        ].model_validate({}),
    )


class IncidentTokenizedContentInput(BaseModel):
    detail: Optional[str] = None


class InvitedPersonInput(BaseModel):
    email: Optional[str] = ""
    role: Optional[UserRole] = None


class KnowledgeCardAvailabilityStatusPatchInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    is_archived: Optional[bool] = Field(alias="isArchived", default=None)
    is_draft: Optional[bool] = Field(alias="isDraft", default=None)
    is_published: Optional[bool] = Field(alias="isPublished", default=None)


class KnowledgeCardConnectionFilterInput(BaseModel):
    attached: Optional[bool] = True
    authors: Optional[List[str]] = None
    change_request_recipients: Optional[List[str]] = Field(
        alias="changeRequestRecipients", default=None
    )
    change_request_status: Optional[List[ChangeRequestStatus]] = Field(
        alias="changeRequestStatus", default=None
    )
    contains_text: Optional[str] = Field(alias="containsText", default=None)
    entity_ids: Optional[List[str]] = Field(alias="entityIds", default=None)
    field_path: Optional[List[str]] = Field(alias="fieldPath", default=None)
    field_path_namespace: Optional[str] = Field(
        alias="fieldPathNamespace", default=None
    )
    followed_by: Optional[List[str]] = Field(alias="followedBy", default=None)
    governed_tags: Optional[List[str]] = Field(alias="governedTags", default=None)
    hashtags: Optional[List[str]] = None
    include_archived: Optional[bool] = Field(alias="includeArchived", default=None)
    include_deleted: Optional[bool] = Field(alias="includeDeleted", default=False)
    include_draft: Optional[bool] = Field(alias="includeDraft", default=None)
    is_generated: Optional[bool] = Field(alias="isGenerated", default=None)
    is_marked_as_curated: Optional[bool] = Field(
        alias="isMarkedAsCurated", default=None
    )
    knowledge_card_types: Optional[List[KnowledgeCardType]] = Field(
        alias="knowledgeCardTypes",
        default_factory=lambda: [
            KnowledgeCardType.CHANGE_REQUEST,
            KnowledgeCardType.DEPRECATION,
            KnowledgeCardType.HOW_TO_USE,
            KnowledgeCardType.INCIDENT,
        ],
    )
    mentioned: Optional[bool] = False
    namespace_types: Optional[List[NamespaceType]] = Field(
        alias="namespaceTypes", default=None
    )
    only_top_level_comments: Optional[bool] = Field(
        alias="onlyTopLevelComments", default=True
    )
    parent_comment: Optional[str] = Field(alias="parentComment", default=None)
    parsed_statement: Optional[List[QueryDescriptionSupportedStatement]] = Field(
        alias="parsedStatement", default=None
    )
    query_ids: Optional[List[str]] = Field(alias="queryIds", default=None)
    related_entity_ids: Optional[List[str]] = Field(
        alias="relatedEntityIds", default=None
    )
    status: Optional[List[KnowledgeCardState]] = None


class KnowledgeCardDeleteInput(BaseModel):
    ids: List[str]


class KnowledgeCardDetailInput(BaseModel):
    asset_description: Optional["AssetDescriptionKnowledgeCardInput"] = Field(
        alias="assetDescription", default=None
    )
    change_request: Optional["ChangeRequestKnowledgeCardInput"] = Field(
        alias="changeRequest", default=None
    )
    column_description: Optional["ColumnDescriptionKnowledgeCardInput"] = Field(
        alias="columnDescription", default=None
    )
    comment: Optional["CommentInput"] = None
    data_document: Optional["DataDocumentInput"] = Field(
        alias="dataDocument", default=None
    )
    deprecation: Optional["DeprecationKnowledgeCardInput"] = None
    incident: Optional["IncidentKnowledgeCardInput"] = None
    query: Optional["QueryKnowledgeCardInput"] = None
    type: Optional[KnowledgeCardType] = KnowledgeCardType.UNKNOWN
    usage: Optional["UsageKnowledgeCardInput"] = None


class KnowledgeCardFilters(BaseModel):
    author: Optional[List[str]] = None
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_archived: Optional[bool] = Field(alias="isArchived", default=False)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_draft: Optional[bool] = Field(alias="isDraft", default=False)
    type: Optional[List[KnowledgeCardType]] = None


class KnowledgeCardIdInput(BaseModel):
    id: Optional[str] = ""


class KnowledgeCardInfoInput(BaseModel):
    anchor_entity_id: Optional[str] = Field(alias="anchorEntityId", default=None)
    detail: Optional["KnowledgeCardDetailInput"] = Field(
        default_factory=lambda: globals()["KnowledgeCardDetailInput"].model_validate(
            {"type": KnowledgeCardDetailInput.UNKNOWN}
        )
    )
    entity_id: Optional[str] = Field(alias="entityId", default="")
    hashtags: Optional[List["HashtagInput"]] = None
    impersonated_as: Optional[str] = Field(alias="impersonatedAs", default=None)
    related_entity_ids: Optional[List[str]] = Field(
        alias="relatedEntityIds", default_factory=lambda: []
    )


class KnowledgeCardInput(BaseModel):
    impersonated_as: Optional[str] = Field(alias="impersonatedAs", default=None)
    is_published: Optional[bool] = Field(alias="isPublished", default=None)
    knowledge_card_info: Optional["KnowledgeCardInfoInput"] = Field(
        alias="knowledgeCardInfo", default=None
    )


class KnowledgeCardSort(BaseModel):
    created_at: Optional[Order] = Field(alias="createdAt", default=None)
    view_count: Optional[Order] = Field(alias="viewCount", default=None)


class LDAPGroupSearchInput(BaseModel):
    base_dn: Optional[str] = Field(alias="baseDN", default="")
    filter: Optional[str] = None
    name_attr: Optional[str] = Field(alias="nameAttr", default="name")


class LDAPInput(BaseModel):
    bind_dn: Optional[str] = Field(alias="bindDN", default=None)
    bind_password: Optional[str] = Field(alias="bindPassword", default=None)
    group_search: Optional["LDAPGroupSearchInput"] = Field(
        alias="groupSearch",
        default_factory=lambda: globals()["LDAPGroupSearchInput"].model_validate(
            {"baseDN": "", "nameAttr": "name"}
        ),
    )
    host: Optional[str] = ""
    user_search: Optional["LDAPUserSearchInput"] = Field(
        alias="userSearch",
        default_factory=lambda: globals()["LDAPUserSearchInput"].model_validate(
            {
                "baseDN": "",
                "emailAttr": "mail",
                "idAttr": "uid",
                "nameAttr": "displayName",
                "username": "mail",
            }
        ),
    )


class LDAPUserSearchInput(BaseModel):
    base_dn: Optional[str] = Field(alias="baseDN", default="")
    email_attr: Optional[str] = Field(alias="emailAttr", default="mail")
    filter: Optional[str] = None
    id_attr: Optional[str] = Field(alias="idAttr", default="uid")
    name_attr: Optional[str] = Field(alias="nameAttr", default="displayName")
    username: Optional[str] = "mail"


class LastActiveInput(BaseModel):
    platform: Optional[AppPlatform] = AppPlatform.Unknown


class LineageFilterInput(BaseModel):
    types: Optional[List[LineageType]] = None


class LinkedInSocialLoginInput(BaseModel):
    auth_0_client_id: Optional[str] = Field(alias="auth0ClientId", default="")
    auth_0_client_secret: Optional[str] = Field(alias="auth0ClientSecret", default="")
    auth_0_issuer: Optional[str] = Field(alias="auth0Issuer", default="")


class MetricConnectionFilterInput(BaseModel):
    name: Optional[str] = None


class MetricFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_complete: Optional[bool] = Field(alias="isComplete", default=None)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_production: Optional[bool] = Field(alias="isProduction", default=None)
    type: Optional[List[MetricType]] = None


class MetricLogicalIdInput(BaseModel):
    name: Optional[str] = ""
    type: Optional[MetricType] = MetricType.UNKNOWN


class MetricSort(BaseModel):
    view_count: Optional[Order] = Field(alias="viewCount", default=None)


class MicrosoftSocialLoginInput(BaseModel):
    allowed_email_patterns: Optional[List[str]] = Field(
        alias="allowedEmailPatterns", default_factory=lambda: ["@metaphor\\.io$"]
    )


class NamedAssetCollectionInput(BaseModel):
    asset_ids: Optional[List[str]] = Field(alias="assetIds", default_factory=lambda: [])
    name: Optional[str] = ""


class NamespaceAssetsInput(BaseModel):
    asset_ids: Optional[List[str]] = Field(alias="assetIds", default_factory=lambda: [])
    entity_id: Optional[str] = Field(alias="entityId", default="")
    named_asset_collections: Optional[List["NamedAssetCollectionInput"]] = Field(
        alias="namedAssetCollections", default=None
    )


class NamespaceAssetsPatchInput(BaseModel):
    asset_ids_to_add: Optional[List[str]] = Field(alias="assetIdsToAdd", default=None)
    asset_ids_to_remove: Optional[List[str]] = Field(
        alias="assetIdsToRemove", default=None
    )
    collection_id: Optional[str] = Field(alias="collectionId", default=None)
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    named_asset_collection_name: Optional[str] = Field(
        alias="namedAssetCollectionName", default=None
    )
    remove_collection: Optional[bool] = Field(alias="removeCollection", default=None)


class NamespaceAssetsUserDefinedOrderInput(BaseModel):
    ordered_entry: Optional["OrderedEntryInput"] = Field(
        alias="orderedEntry",
        default_factory=lambda: globals()["OrderedEntryInput"].model_validate(
            {"id": "", "orderedEntries": []}
        ),
    )
    type: Optional[UserDefinedOrderType] = UserDefinedOrderType.UNKNOWN


class NamespaceDeleteInput(BaseModel):
    ids: List[str]
    viewer_has_confirmed_deletion: Optional[bool] = Field(
        alias="viewerHasConfirmedDeletion", default=False
    )


class NamespaceDescriptionInput(BaseModel):
    text: Optional[str] = ""
    tokenized_text: Optional[str] = Field(alias="tokenizedText", default=None)


class NamespaceFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    type: Optional[List[NamespaceType]] = None


class NamespaceInfoConnectionFilterInput(BaseModel):
    contains_asset_ids: Optional[List[str]] = Field(
        alias="containsAssetIds", default=None
    )
    created_by: Optional[List[str]] = Field(alias="createdBy", default=None)
    entity_id: Optional[List[str]] = Field(alias="entityId", default=None)
    has_parent: Optional[bool] = Field(alias="hasParent", default=None)
    is_child_of: Optional[List[str]] = Field(alias="isChildOf", default=None)
    name: Optional[str] = None
    type: List[NamespaceType]


class NamespaceInfoInput(BaseModel):
    custom_attributes: Optional["CustomAttributesInput"] = Field(
        alias="customAttributes", default=None
    )
    description: Optional["NamespaceDescriptionInput"] = None
    detail: Optional["NamespaceTypeDetailInput"] = Field(
        default_factory=lambda: globals()["NamespaceTypeDetailInput"].model_validate(
            {"type": NamespaceTypeDetailInput.UNKNOWN}
        )
    )
    entity_id: Optional[str] = Field(alias="entityId", default="")
    name: Optional[str] = ""
    parent_id: Optional[str] = Field(alias="parentId", default=None)
    visible_to: Optional[List[str]] = Field(
        alias="visibleTo", default_factory=lambda: []
    )


class NamespaceInfoPatchInput(BaseModel):
    custom_attributes: Optional["CustomAttributesInput"] = Field(
        alias="customAttributes", default=None
    )
    description: Optional["NamespaceDescriptionInput"] = None
    entity_id: Optional[str] = Field(alias="entityId", default="")
    name: Optional[str] = None
    parent_id: Optional[str] = Field(alias="parentId", default=None)


class NamespaceInput(BaseModel):
    namespace_assets: Optional["NamespaceAssetsInput"] = Field(
        alias="namespaceAssets", default=None
    )
    namespace_info: Optional["NamespaceInfoInput"] = Field(
        alias="namespaceInfo", default=None
    )


class NamespaceTypeDetailInput(BaseModel):
    saved_queries: Optional[List["SavedLiveQueryInput"]] = Field(
        alias="savedQueries", default=None
    )
    type: Optional[NamespaceType] = NamespaceType.UNKNOWN


class NonProdInput(BaseModel):
    dataset_patterns: Optional[List["DatasetPatternInput"]] = Field(
        alias="datasetPatterns", default_factory=lambda: []
    )


class OktaSSOInput(BaseModel):
    client_id: Optional[str] = Field(alias="clientId", default="")
    client_secret: Optional[str] = Field(alias="clientSecret", default="")
    issuer: Optional[str] = ""


class OneLoginSSOInput(BaseModel):
    client_id: Optional[str] = Field(alias="clientId", default="")
    client_secret: Optional[str] = Field(alias="clientSecret", default="")
    issuer: Optional[str] = ""


class OrderedEntryInput(BaseModel):
    id: Optional[str] = ""
    ordered_entries: Optional[List["OrderedEntryInput"]] = Field(
        alias="orderedEntries", default_factory=lambda: []
    )


class OrganizationInput(BaseModel):
    about: Optional[str] = ""
    logo_url: Optional[str] = Field(alias="logoUrl", default=None)
    name: Optional[str] = ""


class PersonActivityInput(BaseModel):
    ai_query: Optional["AISearchQueryInput"] = Field(alias="aiQuery", default=None)
    query: Optional["SearchQueryInput"] = None
    viewed_id: Optional[str] = Field(alias="viewedId", default=None)


class PersonConnectionFilterInput(BaseModel):
    first_last_name_or_email_pattern: Optional[str] = Field(
        alias="firstLastNameOrEmailPattern", default=None
    )
    has_logged_in_once: Optional[bool] = Field(alias="hasLoggedInOnce", default=None)
    person_ids: Optional[List[str]] = Field(alias="personIds", default=None)
    role: Optional[List[Optional[UserRole]]] = None


class PersonFilter(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)


class PersonInput(BaseModel):
    activity: Optional["PersonActivityInput"] = None
    logical_id: Optional["PersonLogicalIdInput"] = Field(
        alias="logicalId",
        default_factory=lambda: globals()["PersonLogicalIdInput"].model_validate(
            {"email": "unknown@example.com"}
        ),
    )
    organization: Optional["PersonOrganizationInput"] = None
    personalization: Optional["PersonalizationOptionsInput"] = None
    properties: Optional["PersonPropertiesInput"] = None


class PersonLogicalIdInput(BaseModel):
    email: Optional[str] = "unknown@example.com"


class PersonOrganizationInput(BaseModel):
    department: Optional[str] = None
    division: Optional[str] = None
    employee_number: Optional[str] = Field(alias="employeeNumber", default=None)
    groups: Optional[List[str]] = None
    manager: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None


class PersonOrganizationPatchInput(BaseModel):
    department: Optional[str] = None
    title: Optional[str] = None


class PersonPatchInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    organization: Optional["PersonOrganizationPatchInput"] = None
    properties: Optional["PersonPropertiesPatchInput"] = None
    saved_queries: Optional[List["SavedLiveQueryInput"]] = Field(
        alias="savedQueries", default=None
    )


class PersonPropertiesInput(BaseModel):
    about_me: Optional[str] = Field(alias="aboutMe", default=None)
    avatar_url: Optional[str] = Field(alias="avatarUrl", default=None)
    display_name: Optional[str] = Field(alias="displayName", default=None)
    first_name: Optional[str] = Field(alias="firstName", default="")
    issuer: Optional[str] = None
    last_active: Optional[Any] = Field(alias="lastActive", default=None)
    last_logged_in: Optional[Any] = Field(alias="lastLoggedIn", default=None)
    last_name: Optional[str] = Field(alias="lastName", default="")
    mobile_phone: Optional[str] = Field(alias="mobilePhone", default=None)
    occupation: Optional[str] = None
    primary_phone: Optional[str] = Field(alias="primaryPhone", default=None)
    provider_name: Optional[str] = Field(alias="providerName", default=None)
    role: Optional[UserRole] = None
    status: Optional[str] = None


class PersonPropertiesPatchInput(BaseModel):
    about_me: Optional[str] = Field(alias="aboutMe", default=None)
    avatar_url: Optional[str] = Field(alias="avatarUrl", default=None)


class PersonalizationOptionsInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    persona: Optional[Persona] = None


class PersonalizationOptionsPatchInput(BaseModel):
    get_started_dismissed: Optional[bool] = Field(
        alias="getStartedDismissed", default=None
    )
    get_started_step_completed: Optional[InAppOnboardingCompletionStep] = Field(
        alias="getStartedStepCompleted", default=None
    )
    profile_completion_dismissed: Optional[bool] = Field(
        alias="profileCompletionDismissed", default=None
    )
    profile_completion_step_completed: Optional[InAppProfileCompletionStep] = Field(
        alias="profileCompletionStepCompleted", default=None
    )
    reset_personalization: Optional[bool] = Field(
        alias="resetPersonalization", default=None
    )


class PinOrUnpinAssetInput(BaseModel):
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )


class PinsConnectionFilterInput(BaseModel):
    attached: Optional[bool] = True
    authors: Optional[List[str]] = None
    change_request_recipients: Optional[List[str]] = Field(
        alias="changeRequestRecipients", default=None
    )
    change_request_status: Optional[List[ChangeRequestStatus]] = Field(
        alias="changeRequestStatus", default=None
    )
    contains_asset_ids: Optional[List[str]] = Field(
        alias="containsAssetIds", default=None
    )
    contains_text: Optional[str] = Field(alias="containsText", default=None)
    entity_id: Optional[List[str]] = Field(alias="entityId", default=None)
    entity_ids: Optional[List[str]] = Field(alias="entityIds", default=None)
    field_path: Optional[List[str]] = Field(alias="fieldPath", default=None)
    field_path_namespace: Optional[str] = Field(
        alias="fieldPathNamespace", default=None
    )
    followed_by: Optional[List[str]] = Field(alias="followedBy", default=None)
    governed_tags: Optional[List[str]] = Field(alias="governedTags", default=None)
    has_parent: Optional[bool] = Field(alias="hasParent", default=None)
    hashtags: Optional[List[str]] = None
    include_archived: Optional[bool] = Field(alias="includeArchived", default=None)
    include_deleted: Optional[bool] = Field(alias="includeDeleted", default=False)
    include_draft: Optional[bool] = Field(alias="includeDraft", default=None)
    is_child_of: Optional[List[str]] = Field(alias="isChildOf", default=None)
    is_generated: Optional[bool] = Field(alias="isGenerated", default=None)
    is_marked_as_curated: Optional[bool] = Field(
        alias="isMarkedAsCurated", default=None
    )
    knowledge_card_types: Optional[List[KnowledgeCardType]] = Field(
        alias="knowledgeCardTypes",
        default_factory=lambda: [
            KnowledgeCardType.CHANGE_REQUEST,
            KnowledgeCardType.DEPRECATION,
            KnowledgeCardType.HOW_TO_USE,
            KnowledgeCardType.INCIDENT,
        ],
    )
    mentioned: Optional[bool] = False
    namespace_types: Optional[List[NamespaceType]] = Field(
        alias="namespaceTypes", default=None
    )
    only_top_level_comments: Optional[bool] = Field(
        alias="onlyTopLevelComments", default=True
    )
    parent_comment: Optional[str] = Field(alias="parentComment", default=None)
    parsed_statement: Optional[List[QueryDescriptionSupportedStatement]] = Field(
        alias="parsedStatement", default=None
    )
    query_ids: Optional[List[str]] = Field(alias="queryIds", default=None)
    related_entity_ids: Optional[List[str]] = Field(
        alias="relatedEntityIds", default=None
    )
    status: Optional[List[KnowledgeCardState]] = None


class PipelineFilter(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_complete: Optional[bool] = Field(alias="isComplete", default=None)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_production: Optional[bool] = Field(alias="isProduction", default=None)
    type: Optional[List[PipelineType]] = None


class PowerQueryExplainerInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    regenerate: Optional[bool] = False
    table: Optional[str] = None


class PurgeDataQualityInput(BaseModel):
    enabled: Optional[bool] = True
    threshold_hours: Optional[float] = Field(alias="thresholdHours", default=48)


class QueryDescriptionTokenizedContentInput(BaseModel):
    explanation: Optional[str] = None


class QueryExplainerInput(BaseModel):
    explanation: Optional[str] = ""
    tokenized_content: Optional["QueryDescriptionTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "QueryDescriptionTokenizedContentInput"
        ].model_validate({}),
    )
    type: Optional[QueryDescriptionType] = QueryDescriptionType.Freeform


class QueryInfoAssetsConnectionFilterInput(BaseModel):
    exclude_ids: Optional[List[str]] = Field(alias="excludeIds", default=None)


class QueryInfoConnectionFilterInput(BaseModel):
    dataset_id: Optional[str] = Field(alias="datasetId", default=None)
    hide_duplicates: Optional[bool] = Field(alias="hideDuplicates", default=True)
    hide_service_account: Optional[bool] = Field(
        alias="hideServiceAccount", default=True
    )
    issued_by: Optional[List[str]] = Field(alias="issuedBy", default=None)
    lookback_days: Optional[int] = Field(alias="lookbackDays", default=1)


class QueryKnowledgeCardInput(BaseModel):
    explanations: Optional[List["QueryExplainerInput"]] = None
    is_curation_request: Optional[bool] = Field(alias="isCurationRequest", default=None)
    is_generated: Optional[bool] = Field(alias="isGenerated", default=False)
    is_marked_as_curated: Optional[bool] = Field(
        alias="isMarkedAsCurated", default=False
    )
    query: Optional[str] = ""
    query_id: Optional[str] = Field(alias="queryId", default="")
    title: Optional[str] = ""


class QueryKnowledgeCardPatchInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    explanations_to_add: Optional[List["QueryExplainerInput"]] = Field(
        alias="explanationsToAdd", default=None
    )
    explanations_to_remove: Optional[List[str]] = Field(
        alias="explanationsToRemove", default=None
    )
    is_generated: Optional[bool] = Field(alias="isGenerated", default=None)
    is_marked_as_curated: Optional[bool] = Field(
        alias="isMarkedAsCurated", default=None
    )
    query: Optional[str] = None
    title: Optional[str] = None


class QueryRequest(BaseModel):
    limit: Optional[int] = 10
    skip: Optional[int] = 0
    statement: Optional[str] = ""


class QueryUserEmailInput(BaseModel):
    email: Optional[str] = ""
    user_id: Optional[str] = Field(alias="userId", default="")


class RecentUserActivitiesFilterInput(BaseModel):
    activity_type: Optional[UserActivityType] = Field(
        alias="activityType", default=None
    )
    granularity: Optional[UserActivityGranularity] = None
    lookback_days: Optional[int] = Field(alias="lookbackDays", default=None)
    source: Optional[UserActivitySource] = None


class RelatedAssetsPatchInput(BaseModel):
    entity_ids: Optional[List[str]] = Field(
        alias="entityIds", default_factory=lambda: []
    )
    entity_ids_to_add: Optional[List[str]] = Field(alias="entityIdsToAdd", default=None)
    entity_ids_to_remove: Optional[List[str]] = Field(
        alias="entityIdsToRemove", default=None
    )


class ResourceInfoConnectionFilterInput(BaseModel):
    common_attributes_last_updated_by: Optional[List[str]] = Field(
        alias="commonAttributesLastUpdatedBy", default=None
    )
    common_column_contacts: Optional[List[str]] = Field(
        alias="commonColumnContacts", default=None
    )
    common_column_tags: Optional[List[str]] = Field(
        alias="commonColumnTags", default=None
    )
    created_by: Optional[List[str]] = Field(alias="createdBy", default=None)
    designated_contacts: Optional[List[str]] = Field(
        alias="designatedContacts", default=None
    )
    entity_id: Optional[List[str]] = Field(alias="entityId", default=None)
    has_parent: Optional[bool] = Field(alias="hasParent", default=None)
    is_child_of: Optional[List[str]] = Field(alias="isChildOf", default=None)
    name: Optional[str] = None
    type: List[UserDefinedResourceType]


class SQLExplainerInput(BaseModel):
    query_id: Optional[str] = Field(alias="queryId", default="")
    regenerate: Optional[bool] = False


class SSOInput(BaseModel):
    azure_ad: Optional["AzureAdSSOInput"] = Field(alias="azureAd", default=None)
    google_workspace: Optional["GoogleWorkspaceSSOInput"] = Field(
        alias="googleWorkspace", default=None
    )
    ldap: Optional["LDAPInput"] = None
    okta: Optional["OktaSSOInput"] = None
    one_login: Optional["OneLoginSSOInput"] = Field(alias="oneLogin", default=None)


class SavedLiveQueryInput(BaseModel):
    context: Optional[SearchContext] = None
    facets_json: Optional[str] = Field(alias="facetsJSON", default=None)
    keyword: Optional[str] = ""
    name: Optional[str] = None


class SearchArguments(BaseModel):
    aggregations: Optional[List[AggregationMetadataName]] = None
    facets: Optional["SearchFacets"] = None
    fields_selection: Optional["SearchResultFieldsSelection"] = Field(
        alias="fieldsSelection", default=None
    )
    filters: Optional["SearchQueryFilters"] = None
    from_: Optional[int] = Field(alias="from", default=0)
    indices: Optional[List[SearchIndex]] = Field(
        default_factory=lambda: [SearchIndex.Datasets]
    )
    input: str
    meta_only: Optional[bool] = Field(alias="metaOnly", default=False)
    related_assets: Optional[List[str]] = Field(alias="relatedAssets", default=None)
    score_details: Optional[bool] = Field(alias="scoreDetails", default=None)
    search_after: Optional[str] = Field(alias="searchAfter", default=None)
    size: Optional[int] = 10
    sort: Optional["SearchResultSort"] = None


class SearchFacets(BaseModel):
    anchor_entity_type: Optional[List[AnchorEntityType]] = Field(
        alias="anchorEntityType", default=None
    )
    author_display_name: Optional[List[str]] = Field(
        alias="authorDisplayName", default=None
    )
    contact_display_names: Optional[List[str]] = Field(
        alias="contactDisplayNames", default=None
    )
    custom_metadata: Optional[List["CustomMetadataFacetFilterInput"]] = Field(
        alias="customMetadata", default=None
    )
    dashboard_platform: Optional[List[DashboardPlatform]] = Field(
        alias="dashboardPlatform", default=None
    )
    dashboard_type: Optional[List[DashboardType]] = Field(
        alias="dashboardType", default=None
    )
    data_platform: Optional[List[DataPlatform]] = Field(
        alias="dataPlatform", default=None
    )
    data_quality: Optional[List[DataQualityStatus]] = Field(
        alias="dataQuality", default=None
    )
    database: Optional[List[str]] = None
    dbt_materialization_type: Optional[List[DbtMaterializationType]] = Field(
        alias="dbtMaterializationType", default=None
    )
    dbt_tags: Optional[List[str]] = Field(alias="dbtTags", default=None)
    department: Optional[List[str]] = None
    directory: Optional[List[str]] = None
    domain_display_name: Optional[List[str]] = Field(
        alias="domainDisplayName", default=None
    )
    domain_display_names: Optional[List[str]] = Field(
        alias="domainDisplayNames", default=None
    )
    governed_tags: Optional[List[str]] = Field(alias="governedTags", default=None)
    hashtags: Optional[List[str]] = None
    knowledge_card_type: Optional[List[KnowledgeCardType]] = Field(
        alias="knowledgeCardType", default=None
    )
    looker_tags: Optional[List[str]] = Field(alias="lookerTags", default=None)
    materialization_type: Optional[List[str]] = Field(
        alias="materializationType", default=None
    )
    model: Optional[List[str]] = None
    platform: Optional[List[PlatformType]] = None
    project: Optional[List[str]] = None
    schema_: Optional[List[str]] = Field(alias="schema", default=None)
    snowflake_tags: Optional[List[str]] = Field(alias="snowflakeTags", default=None)
    sub_type: Optional[List[AssetSubType]] = Field(alias="subType", default=None)
    tableau_tags: Optional[List[str]] = Field(alias="tableauTags", default=None)
    thought_spot_data_object_type: Optional[List[ThoughtSpotDataObjectType]] = Field(
        alias="thoughtSpotDataObjectType", default=None
    )
    thought_spot_tags: Optional[List[str]] = Field(
        alias="thoughtSpotTags", default=None
    )
    unity_catalog_tags: Optional[List[str]] = Field(
        alias="unityCatalogTags", default=None
    )
    usage_level: Optional[List[str]] = Field(alias="usageLevel", default=None)
    workspace: Optional[List[str]] = None


class SearchQueryFilters(BaseModel):
    asset_filters: Optional["AssetFilters"] = Field(alias="assetFilters", default=None)
    dashboard_filters: Optional["DashboardFilters"] = Field(
        alias="dashboardFilters", default=None
    )
    dataset_filters: Optional["DatasetFilters"] = Field(
        alias="datasetFilters", default=None
    )
    group_filters: Optional["GroupFilters"] = Field(alias="groupFilters", default=None)
    hierarchy_filters: Optional["HierarchyFilters"] = Field(
        alias="hierarchyFilters", default=None
    )
    knowledge_card_filters: Optional["KnowledgeCardFilters"] = Field(
        alias="knowledgeCardFilters", default=None
    )
    metric_filters: Optional["MetricFilters"] = Field(
        alias="metricFilters", default=None
    )
    namespace_filters: Optional["NamespaceFilters"] = Field(
        alias="namespaceFilters", default=None
    )
    person_filters: Optional["PersonFilter"] = Field(
        alias="personFilters", default=None
    )
    pipeline_filters: Optional["PipelineFilter"] = Field(
        alias="pipelineFilters", default=None
    )
    user_defined_resource_filters: Optional["UserDefinedResourceFilters"] = Field(
        alias="userDefinedResourceFilters", default=None
    )
    virtual_view_filters: Optional["VirtualViewFilters"] = Field(
        alias="virtualViewFilters", default=None
    )


class SearchQueryInput(BaseModel):
    context: Optional[SearchContext] = None
    facets_json: Optional[str] = Field(alias="facetsJSON", default=None)
    keyword: Optional[str] = ""
    name: Optional[str] = None


class SearchResultFieldsSelection(BaseModel):
    excludes: Optional[List[str]] = Field(default_factory=lambda: [])
    includes: Optional[List[str]] = Field(default_factory=lambda: [])


class SearchResultSort(BaseModel):
    asset_sort: Optional["AssetSort"] = Field(alias="assetSort", default=None)
    dashboard_sort: Optional["DashboardSort"] = Field(
        alias="dashboardSort", default=None
    )
    dataset_sort: Optional["DatasetSort"] = Field(alias="datasetSort", default=None)
    knowledge_card_sort: Optional["KnowledgeCardSort"] = Field(
        alias="knowledgeCardSort", default=None
    )
    metric_sort: Optional["MetricSort"] = Field(alias="metricSort", default=None)
    virtual_view_sort: Optional["VirtualViewSort"] = Field(
        alias="virtualViewSort", default=None
    )


class SettingsInput(BaseModel):
    authorization: Optional["AuthorizationInput"] = None
    custom_metadata_config: Optional[List["CustomMetadataConfigInput"]] = Field(
        alias="customMetadataConfig", default=None
    )
    custom_user_defined_order_hierarchy: Optional[
        List["UserSpecifiedOrderingInput"]
    ] = Field(alias="customUserDefinedOrderHierarchy", default=None)
    hard_deletion: Optional["HardDeletionInput"] = Field(
        alias="hardDeletion", default=None
    )
    non_prod: Optional["NonProdInput"] = Field(alias="nonProd", default=None)
    organization: Optional["OrganizationInput"] = None
    purge_data_quality: Optional["PurgeDataQualityInput"] = Field(
        alias="purgeDataQuality", default=None
    )
    query_user_emails: Optional[List["QueryUserEmailInput"]] = Field(
        alias="queryUserEmails", default=None
    )
    service_accounts: Optional[List[str]] = Field(alias="serviceAccounts", default=None)
    social_login: Optional["SocialLoginInput"] = Field(
        alias="socialLogin", default=None
    )
    soft_deletion: Optional["SoftDeletionInput"] = Field(
        alias="softDeletion", default=None
    )
    sso: Optional["SSOInput"] = None


class SocialLoginInput(BaseModel):
    google: Optional["GoogleSocialLoginInput"] = None
    linked_in: Optional["LinkedInSocialLoginInput"] = Field(
        alias="linkedIn", default=None
    )
    microsoft: Optional["MicrosoftSocialLoginInput"] = None


class SoftDeletionInput(BaseModel):
    enabled: Optional[bool] = True
    threshold_hours: Optional[float] = Field(alias="thresholdHours", default=168)


class StatusBaseInput(BaseModel):
    status: Optional[ChangeRequestStatus] = ChangeRequestStatus.OPEN


class SystemTagsConnectionFilterInput(BaseModel):
    match_prefix: Optional[str] = Field(alias="matchPrefix", default=None)
    sources: Optional[List[SystemTagSource]] = Field(
        default_factory=lambda: [
            SystemTagSource.DATAHUB,
            SystemTagSource.DBT,
            SystemTagSource.LOOKER,
            SystemTagSource.SNOWFLAKE,
            SystemTagSource.TABLEAU,
            SystemTagSource.THOUGHT_SPOT,
            SystemTagSource.UNITY_CATALOG,
        ]
    )


class TableauDatasourceDownstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class TableauDatasourceUpstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class ThoughtSpotDataObjectDownstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class ThoughtSpotDataObjectUpstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class ToggleMuteNotificationInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")


class UniversalSearchInput(BaseModel):
    query_id: Optional[str] = Field(alias="queryId", default="")
    regenerate: Optional[bool] = False
    search_query: Optional[str] = Field(alias="searchQuery", default="")


class UpdateApiKeyInput(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = True
    name: Optional[str] = None


class UpdateCrawlerInput(BaseModel):
    contacts: Optional[List[str]] = None
    crawler_config: Optional[str] = Field(alias="crawlerConfig", default=None)
    description: Optional[str] = None
    display_name: Optional[str] = Field(alias="displayName", default=None)
    schedule: Optional["UpdateCrawlerScheduleInput"] = None


class UpdateCrawlerScheduleInput(BaseModel):
    enabled: Optional[bool] = False
    is_daily: Optional[bool] = Field(alias="isDaily", default=True)
    schedule: Optional[str] = None


class UpdateCustomMetadataConfigInput(BaseModel):
    data_type: Optional[CustomMetadataDataType] = Field(alias="dataType", default=None)
    display_name: Optional[str] = Field(alias="displayName", default=None)
    highlight: Optional[bool] = None
    key: Optional[str] = ""
    search_operator_example: Optional[str] = Field(
        alias="searchOperatorExample", default=None
    )
    searchable: Optional[bool] = None


class UpdateCustomMetadataInput(BaseModel):
    entity_id: Optional[str] = Field(alias="entityId", default="")
    set: Optional[List["CustomMetadataItemInput"]] = None
    unset: Optional[List[str]] = None


class UsageKnowledgeCardInput(BaseModel):
    detail: Optional[str] = ""
    example: Optional[str] = None
    title: Optional[str] = None
    tokenized_content: Optional["HowToUseTokenizedContentInput"] = Field(
        alias="tokenizedContent",
        default_factory=lambda: globals()[
            "HowToUseTokenizedContentInput"
        ].model_validate({}),
    )


class UserDefinedResourceDeleteInput(BaseModel):
    ids: List[str]


class UserDefinedResourceDescriptionInput(BaseModel):
    text: Optional[str] = ""
    tokenized_text: Optional[str] = Field(alias="tokenizedText", default=None)


class UserDefinedResourceFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    type: Optional[List[UserDefinedResourceType]] = None


class UserDefinedResourceInfoInput(BaseModel):
    custom_tag_attributes: Optional["CustomTagAttributesInput"] = Field(
        alias="customTagAttributes", default=None
    )
    description: Optional["UserDefinedResourceDescriptionInput"] = None
    entity_id: Optional[str] = Field(alias="entityId", default="")
    name: Optional[str] = ""
    parent_resource_id: Optional[str] = Field(alias="parentResourceId", default=None)
    type: Optional[UserDefinedResourceType] = UserDefinedResourceType.UNKNOWN


class UserDefinedResourceInput(BaseModel):
    child_resource_inputs: Optional[List["UserDefinedResourceInput"]] = Field(
        alias="childResourceInputs", default=None
    )
    common_column_attributes: Optional["CommonColumnAttributesInput"] = Field(
        alias="commonColumnAttributes", default=None
    )
    user_defined_resource_info: Optional["UserDefinedResourceInfoInput"] = Field(
        alias="userDefinedResourceInfo", default=None
    )


class UserSpecifiedOrderingInput(BaseModel):
    ordered_entries: Optional[List["OrderedEntryInput"]] = Field(
        alias="orderedEntries", default_factory=lambda: []
    )
    type: Optional[UserDefinedOrderType] = UserDefinedOrderType.UNKNOWN


class VersionHistoryConnectionFilterInput(BaseModel):
    updated: Optional[List[VersionUpdateField]] = None


class VirtualViewFilters(BaseModel):
    browse_paths: Optional[List[str]] = Field(alias="browsePaths", default=None)
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    is_complete: Optional[bool] = Field(alias="isComplete", default=None)
    is_deleted: Optional[bool] = Field(alias="isDeleted", default=None)
    is_production: Optional[bool] = Field(alias="isProduction", default=None)
    type: Optional[List[VirtualViewType]] = None


class VirtualViewLogicalIdInput(BaseModel):
    name: Optional[str] = ""
    type: Optional[VirtualViewType] = VirtualViewType.UNKNOWN


class VirtualViewSort(BaseModel):
    view_count: Optional[Order] = Field(alias="viewCount", default=None)


AcknowledgeChangeRequestInput.model_rebuild()
AssetConnectionFilterInput.model_rebuild()
AssetContactsPatchInput.model_rebuild()
AssetDescriptionKnowledgeCardInput.model_rebuild()
AssetGovernedTagsPatchInput.model_rebuild()
AssociatedAssetConnectionFilterInput.model_rebuild()
ChangeRequestKnowledgeCardInput.model_rebuild()
CommentInput.model_rebuild()
CommonColumnAttributesInput.model_rebuild()
CommonColumnAttributesPatchInput.model_rebuild()
ConnectionOrderBy.model_rebuild()
CreateCrawlerInput.model_rebuild()
DataDocumentInput.model_rebuild()
DatasetColumnsInput.model_rebuild()
DeprecationKnowledgeCardInput.model_rebuild()
FieldTagAssociationsPatchInput.model_rebuild()
FollowAssetInput.model_rebuild()
GroupInfoInput.model_rebuild()
GroupInput.model_rebuild()
HashtagPatchInput.model_rebuild()
IncidentKnowledgeCardInput.model_rebuild()
KnowledgeCardDetailInput.model_rebuild()
KnowledgeCardInfoInput.model_rebuild()
KnowledgeCardInput.model_rebuild()
LDAPInput.model_rebuild()
NamespaceAssetsInput.model_rebuild()
NamespaceAssetsUserDefinedOrderInput.model_rebuild()
NamespaceInfoInput.model_rebuild()
NamespaceInfoPatchInput.model_rebuild()
NamespaceInput.model_rebuild()
NamespaceTypeDetailInput.model_rebuild()
NonProdInput.model_rebuild()
OrderedEntryInput.model_rebuild()
PersonActivityInput.model_rebuild()
PersonInput.model_rebuild()
PersonPatchInput.model_rebuild()
QueryExplainerInput.model_rebuild()
QueryKnowledgeCardInput.model_rebuild()
QueryKnowledgeCardPatchInput.model_rebuild()
SSOInput.model_rebuild()
SearchArguments.model_rebuild()
SearchFacets.model_rebuild()
SearchQueryFilters.model_rebuild()
SearchResultSort.model_rebuild()
SettingsInput.model_rebuild()
SocialLoginInput.model_rebuild()
UpdateCrawlerInput.model_rebuild()
UpdateCustomMetadataInput.model_rebuild()
UsageKnowledgeCardInput.model_rebuild()
UserDefinedResourceInfoInput.model_rebuild()
UserDefinedResourceInput.model_rebuild()
UserSpecifiedOrderingInput.model_rebuild()
