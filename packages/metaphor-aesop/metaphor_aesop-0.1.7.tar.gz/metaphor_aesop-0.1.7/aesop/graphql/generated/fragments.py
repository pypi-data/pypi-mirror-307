# Generated by ariadne-codegen
# Source: aesop/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import SearchContext


class NamespaceParts(BaseModel):
    namespace_info: Optional["NamespacePartsNamespaceInfo"] = Field(
        alias="namespaceInfo"
    )
    parent_namespace: Optional["NamespacePartsParentNamespace"] = Field(
        alias="parentNamespace"
    )
    namespace_assets: Optional["NamespacePartsNamespaceAssets"] = Field(
        alias="namespaceAssets"
    )


class NamespacePartsNamespaceInfo(BaseModel):
    name: str
    created: "NamespacePartsNamespaceInfoCreated"
    last_modified: "NamespacePartsNamespaceInfoLastModified" = Field(
        alias="lastModified"
    )
    detail: "NamespacePartsNamespaceInfoDetail"
    visible_to: List[str] = Field(alias="visibleTo")
    description: Optional["NamespacePartsNamespaceInfoDescription"]
    custom_attributes: Optional["NamespacePartsNamespaceInfoCustomAttributes"] = Field(
        alias="customAttributes"
    )


class NamespacePartsNamespaceInfoCreated(BaseModel):
    time: Any
    actor: Optional[str]


class NamespacePartsNamespaceInfoLastModified(BaseModel):
    time: Any
    actor: Optional[str]


class NamespacePartsNamespaceInfoDetail(BaseModel):
    saved_queries: Optional[List["NamespacePartsNamespaceInfoDetailSavedQueries"]] = (
        Field(alias="savedQueries")
    )


class NamespacePartsNamespaceInfoDetailSavedQueries(BaseModel):
    name: Optional[str]
    keyword: str
    context: Optional[SearchContext]
    id: str
    facets_json: Optional[str] = Field(alias="facetsJSON")


class NamespacePartsNamespaceInfoDescription(BaseModel):
    text: Optional[str]
    tokenized_text: Optional[str] = Field(alias="tokenizedText")


class NamespacePartsNamespaceInfoCustomAttributes(BaseModel):
    color: Optional[str]
    icon_key: Optional[str] = Field(alias="iconKey")


class NamespacePartsParentNamespace(BaseModel):
    id: str


class NamespacePartsNamespaceAssets(BaseModel):
    named_asset_collections: Optional[
        List["NamespacePartsNamespaceAssetsNamedAssetCollections"]
    ] = Field(alias="namedAssetCollections")


class NamespacePartsNamespaceAssetsNamedAssetCollections(BaseModel):
    name: str
    asset_ids: List[str] = Field(alias="assetIds")


NamespaceParts.model_rebuild()
