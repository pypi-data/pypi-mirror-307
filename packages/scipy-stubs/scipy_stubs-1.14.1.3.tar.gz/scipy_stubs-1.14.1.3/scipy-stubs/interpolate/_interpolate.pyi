from scipy._typing import Untyped
from ._polyint import _Interpolator1D

__all__ = ["BPoly", "NdPPoly", "PPoly", "interp1d", "interp2d", "lagrange"]

err_mesg: str  # undocumented

class interp2d:
    def __init__(
        self,
        x: Untyped,
        y: Untyped,
        z: Untyped,
        kind: str = "linear",
        copy: bool = True,
        bounds_error: bool = False,
        fill_value: Untyped | None = None,
    ) -> None: ...

class interp1d(_Interpolator1D):
    bounds_error: Untyped
    copy: Untyped
    axis: Untyped
    y: Untyped
    x: Untyped
    x_bds: Untyped
    def __init__(
        self,
        x: Untyped,
        y: Untyped,
        kind: str = "linear",
        axis: int = -1,
        copy: bool = True,
        bounds_error: Untyped | None = None,
        fill_value: Untyped = ...,
        assume_sorted: bool = False,
    ) -> None: ...
    @property
    def fill_value(self) -> Untyped: ...
    @fill_value.setter
    def fill_value(self, fill_value: Untyped) -> None: ...

class _PPolyBase:
    c: Untyped
    x: Untyped
    extrapolate: Untyped
    axis: Untyped
    def __init__(self, c: Untyped, x: Untyped, extrapolate: Untyped | None = None, axis: int = 0) -> None: ...
    @classmethod
    def construct_fast(cls, c: Untyped, x: Untyped, extrapolate: Untyped | None = None, axis: int = 0) -> Untyped: ...
    def extend(self, c: Untyped, x: Untyped) -> None: ...
    def __call__(self, x: Untyped, nu: int = 0, extrapolate: Untyped | None = None) -> Untyped: ...

class PPoly(_PPolyBase):
    def derivative(self, nu: int = 1) -> Untyped: ...
    def antiderivative(self, nu: int = 1) -> Untyped: ...
    def integrate(self, a: Untyped, b: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...
    def solve(self, y: float = 0.0, discontinuity: bool = True, extrapolate: Untyped | None = None) -> Untyped: ...
    def roots(self, discontinuity: bool = True, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_spline(cls, tck: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_bernstein_basis(cls, bp: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...

class BPoly(_PPolyBase):
    def derivative(self, nu: int = 1) -> Untyped: ...
    def antiderivative(self, nu: int = 1) -> Untyped: ...
    def integrate(self, a: Untyped, b: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_power_basis(cls, pp: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_derivatives(
        cls,
        xi: Untyped,
        yi: Untyped,
        orders: Untyped | None = None,
        extrapolate: Untyped | None = None,
    ) -> Untyped: ...

class NdPPoly:
    def __init__(self, c: Untyped, x: Untyped, extrapolate: Untyped | None = None) -> None: ...
    @classmethod
    def construct_fast(cls, c: Untyped, x: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...
    def __call__(self, x: Untyped, nu: Untyped | None = None, extrapolate: Untyped | None = None) -> Untyped: ...
    def derivative(self, nu: Untyped) -> Untyped: ...
    def antiderivative(self, nu: Untyped) -> Untyped: ...
    def integrate_1d(self, a: Untyped, b: Untyped, axis: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...
    def integrate(self, ranges: Untyped, extrapolate: Untyped | None = None) -> Untyped: ...

def lagrange(x: Untyped, w: Untyped) -> Untyped: ...
