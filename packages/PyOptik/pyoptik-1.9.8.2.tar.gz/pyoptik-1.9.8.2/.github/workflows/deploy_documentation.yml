# .github/workflows/deploy_documentation.yml
name: Documentation

on:
  push:
    branches: [ "master" ]
    tags:
      - '*'
  pull_request:
    branches: [ "master" ]

jobs:
  documentation:
    name: Run the documentation building tools
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: "Set-up: Python 3.11"
        uses: actions/setup-python@v5
        id: cp311
        with:
            python-version: "3.11"

      - name: "Install: Dependencies for headless server"
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install xvfb

      - name: "Checkout requirements and files for testing"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Install everything, run the tests, produce the .coverage file
        run: |
          python -m pip install wheel build
          python -m build --wheel
          python -m pip install .[documentation]

      - name: Install dependencies
        run: |
          pip install sphinx sphinx_rtd_theme myst_parser jq

      - name: Get current tag
        id: get_tag
        run: |
          git fetch --tags
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Sphinx build
        run: |
          sphinx-build docs/source _build

      - name: "Deploy to documentation_page: specific version"
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        with:
          publish_branch: documentation_page
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _build/
          destination_dir: "docs/${{ env.tag }}"
          keep_files: true

  update_version_switcher:
    name: Update version_switcher.json
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: documentation  # This job depends on the successful completion of the 'documentation' job
    permissions:
      contents: write

    steps:
      - name: "Checkout documentation_page branch"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: documentation_page  # Directly check out the documentation_page branch

      - name: Install jq for JSON manipulation
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Scan for versions in docs folder and update version_switcher.json
        run: |
          # Define the path to version_switcher.json
          json_file="version_switcher.json"
          docs_path="docs"
          base_url="https://martinpdes.github.io/PyOptik"

          # Initialize an empty array for versions in JSON format
          versions_list=$(mktemp)  # Temporary file to store the array

          echo "[" > $versions_list  # Start of the JSON array

          # Scan each directory in docs and add it to the versions list
          first_entry=true
          for version_dir in ${docs_path}/*/; do
            version=$(basename "$version_dir")
            version_url="${base_url}/${docs_path}/${version}"

            # Add a comma if it's not the first entry
            if [ "$first_entry" = true ]; then
              first_entry=false
            else
              echo "," >> $versions_list
            fi

            # Append each version as a JSON entry
            jq -n \
              --arg name "$version" \
              --arg version "$version" \
              --arg url "$version_url" \
              '{name: $name, version: $version, url: $url}' >> $versions_list
          done

          echo "]" >> $versions_list  # End of the JSON array

          # Move the temporary array file to version_switcher.json
          mv $versions_list $json_file

      - name: Commit and push the updated version_switcher.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version_switcher.json
          git commit -m "Update version_switcher.json with new tag ${{ env.tag }}"
          git push origin documentation_page
