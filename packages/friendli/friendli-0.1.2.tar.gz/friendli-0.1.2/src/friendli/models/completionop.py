"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .completionrequestbody import CompletionRequestBody, CompletionRequestBodyTypedDict
from .completionresponse import CompletionResponse, CompletionResponseTypedDict
from .streamedcompletionresponse import (
    StreamedCompletionResponse,
    StreamedCompletionResponseTypedDict,
)
from friendli.types import BaseModel
from friendli.utils import FieldMetadata, HeaderMetadata, RequestMetadata
import pydantic
from typing import AsyncGenerator, Generator, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class CompletionRequestTypedDict(TypedDict):
    x_friendli_team: NotRequired[str]
    r"""ID of team to run requests as (optional parameter)."""
    completion_request_body: NotRequired[CompletionRequestBodyTypedDict]


class CompletionRequest(BaseModel):
    x_friendli_team: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Friendli-Team"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""ID of team to run requests as (optional parameter)."""

    completion_request_body: Annotated[
        Optional[CompletionRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


CompletionResponse1TypedDict = Union[
    CompletionResponseTypedDict,
    Union[
        Generator[StreamedCompletionResponseTypedDict, None, None],
        AsyncGenerator[StreamedCompletionResponseTypedDict, None],
    ],
]


CompletionResponse1 = Union[
    CompletionResponse,
    Union[
        Generator[StreamedCompletionResponse, None, None],
        AsyncGenerator[StreamedCompletionResponse, None],
    ],
]
