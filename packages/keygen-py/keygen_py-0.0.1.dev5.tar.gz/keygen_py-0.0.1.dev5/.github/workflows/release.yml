name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.platform.runner }} ${{ matrix.platform.target }} ${{ matrix.platform.manylinux }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
            before: 'yum install --assumeyes perl-core'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: x86_64
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: ubuntu-latest
            target: x64
            before: 'yum install --assumeyes perl-core'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: x86
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: ubuntu-latest
            target: aarch64
            before: 'apt update && apt install -y libssl-dev'
          - runner: ubuntu-latest
            target: aarch64
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: aarch64
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: ubuntu-latest
            target: armv7
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'auto'
          - runner: ubuntu-latest
            target: armv7
            before: 'apt update && apt install -y libssl-dev'
            manylinux: 'musllinux_1_2'
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
          - runner: macos-latest
            target: x86_64
          - runner: macos-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        if: runner.os == 'Windows'
        with:
          python-version: 3.*
          architecture: ${{ matrix.platform.target }}
      - uses: actions/setup-python@v5
        if: runner.os != 'Windows'
        with:
          python-version: 3.*
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: ${{ matrix.platform.manylinux }}
          before-script-linux: ${{ matrix.platform.before }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.manylinux }}-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'

      - name: Get project version
        id: 'pyproject_version'
        run: echo "version=v$(grep -m 1 version pyproject.toml | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)" >> $GITHUB_OUTPUT

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          toTag: ${{ github.sha }}
          ignorePreReleases: 'true'
          configurationJson: |
            {
              "template": "## Release ${{ steps.pyproject_version.outputs.version }}\n\n#{{CHANGELOG}}",
              "categories": [
                {
                    "title": "### Changes",
                    "labels": []
                }
              ]
            }

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          tag_name: ${{ steps.pyproject_version.outputs.version }}