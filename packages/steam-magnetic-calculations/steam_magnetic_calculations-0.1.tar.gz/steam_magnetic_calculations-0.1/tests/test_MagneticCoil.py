import time
import unittest
import os
import numpy as np
import matplotlib.pyplot as plt

from steam_magnetic_calculations.Magnetic_Coil import MagneticCoil
from steam_sdk.parsers.ParserMap2d import ParserMap2dFile
from steam_sdk.utils.make_folder_if_not_existing import make_folder_if_not_existing


class TestRunCircuits(unittest.TestCase):

    def setUp(self) -> None:
        """
            This function is executed before each test in this class
        """
        self.current_path = os.getcwd()
        os.chdir(os.path.dirname(__file__))  # move to the directory where this file is located
        print('\nCurrent folder:          {}'.format(self.current_path))
        print('\nTest is run from folder: {}'.format(os.getcwd()))

        # Default settings
        # Set plot properties
        self.selectedFont = {'fontname': 'DejaVu Sans', 'size': 14}
        self.default_figsize = (12, 10)
        self.time_to_wait_before_closing_figures = 1  # [s]

    def tearDown(self) -> None:
        """
            This function is executed after each test in this class
        """
        os.chdir(self.current_path)  # go back to initial folder
        plt.close('all')


    def test_all_MagneticCoil_calculateFieldStrandPositions(self):
        '''
        This test will run in a loop the test test_MagneticCoil_calculateFieldStrandPositions for a list of magnets.
        '''
        path_input_folder = os.path.join('input', 'map2d_noIron_noSelfField')
        list_magnets = [file_name.split('_All')[0] for file_name in os.listdir(path_input_folder)]  # Test all files in the input folder

        # list_magnets = ['MU', 'RMM_V1_6CS', 'RMM_V1']
        # list_magnets = ['MCS']
        # list_magnets = ['MQSXF', 'MQXA']

        max_absolute_error = 1e-1
        flag_plot_debug = False

        print(list_magnets)
        for magnet in list_magnets:
            print(f'Magnet {magnet}')
            self.test_MagneticCoil_calculateFieldStrandPositions(magnet_name=magnet, max_absolute_error=max_absolute_error, flag_plot_debug=flag_plot_debug)


    def test_MagneticCoil_calculateFieldStrandPositions(self, magnet_name='MQXA', max_absolute_error=1e-4, flag_plot_debug=True):
        '''
        The test:
        -	Reads x, y, strand positions and I currents in the current lines
        -	Calculates the field generated by the current lines in the current lines (i.e. strands) positions
        -	Makes some plots
        :return:
        '''
        # arrange
        path_input_file = os.path.join('input', 'map2d_noIron_noSelfField', f'{magnet_name}_All_NoIron_NoSelfField.map2d')
        ParserMap2 = ParserMap2dFile(path_input_file)

        # Acquire map2d information
        nT, nStrands_inGroup, polarities_inGroup, strandToHalfTurn, strandToGroup, x_strands, y_strands, I_strands, Bx, By = ParserMap2.getParametersFromMap2d(headerLines=1)

        # Acquire magnetic field values calculated with ROXIE from the map2d file
        data_ROXIE = ParserMap2.parseRoxieMap2d(headerLines=1)
        Bx_strands_from_ROXIE = data_ROXIE[:, 5]
        By_strands_from_ROXIE = data_ROXIE[:, 6]
        B_strands_from_ROXIE = (Bx_strands_from_ROXIE ** 2 + By_strands_from_ROXIE ** 2) ** .5


        # act
        # Define the magnetic coil
        definedMagneticCoil = MagneticCoil()
        definedMagneticCoil.setStrandPositions(x_strands, y_strands, I_strands)
        # Calculate field map
        Bx_strands, By_strands, B_strands = definedMagneticCoil.calculateMagneticField(x_strands, y_strands)


        # assert
        # Substitute elements that are strictly zero
        Bx_strands[Bx_strands == 0] = 1e-12
        By_strands[By_strands == 0] = 1e-12
        Bx_strands_from_ROXIE[Bx_strands_from_ROXIE == 0] = 1e-12
        By_strands_from_ROXIE[By_strands_from_ROXIE == 0] = 1e-12

        # Absolute differences check
        absolute_differences_Bx = Bx_strands - Bx_strands_from_ROXIE  # Matrix with absolute values of absolute differences between the two matrices
        max_absolute_difference_Bx = np.abs(np.max(np.max(absolute_differences_Bx)))  # Maximum absolute difference in the matrix
        self.assertAlmostEqual(0, max_absolute_difference_Bx, delta=max_absolute_error)  # Check that the maximum difference is below
        print(f"Magnet {magnet_name}. Calculated Bx  magnetic field differs by less than {max_absolute_difference_Bx} T from ROXIE reference.")

        absolute_differences_By = By_strands - By_strands_from_ROXIE  # Matrix with absolute values of absolute differences between the two matrices
        max_absolute_difference_By = np.abs(np.max(np.max(absolute_differences_By)))  # Maximum absolute difference in the matrix
        self.assertAlmostEqual(0, max_absolute_difference_By, delta=max_absolute_error)  # Check that the maximum difference is below
        print(f"Magnet {magnet_name}. Calculated By  magnetic field differs by less than {max_absolute_difference_By} T from ROXIE reference.")

        absolute_differences_B = B_strands - B_strands_from_ROXIE  # Matrix with absolute differences between the two matrices
        max_absolute_difference_B = np.abs(np.max(np.max(absolute_differences_B)))  # Maximum absolute difference in the matrix
        self.assertAlmostEqual(0, max_absolute_difference_B, delta=max_absolute_error)  # Check that the maximum difference is below
        print(f"Magnet {magnet_name}. Calculated |B| magnetic field differs by less than {max_absolute_difference_By} T from ROXIE reference.")

        # # Relative differences check
        # relative_differences_Bx = np.abs(Bx_strands - Bx_strands_from_ROXIE) / Bx_strands_from_ROXIE  # Matrix with absolute values of relative differences between the two matrices
        # max_relative_difference_Bx = np.max(np.max(relative_differences_Bx))  # Maximum relative difference in the matrix
        # self.assertAlmostEqual(0, max_relative_difference_Bx, delta=max_relative_error)  # Check that the maximum relative difference is below
        # print(f"Magnet {magnet_name}. Calculated Bx magnetic field differs by less than {max_relative_difference_Bx * 100}% from ROXIE reference.")
        #
        # relative_differences_By = np.abs(By_strands - By_strands_from_ROXIE) / By_strands_from_ROXIE  # Matrix with absolute values of relative differences between the two matrices
        # max_relative_difference_By = np.max(np.max(relative_differences_By))  # Maximum relative difference in the matrix
        # self.assertAlmostEqual(0, max_relative_difference_By, delta=max_relative_error)  # Check that the maximum relative difference is below
        # print(f"Magnet {magnet_name}. Calculated By magnetic field differs by less than {max_relative_difference_By * 100}% from ROXIE reference.")


        # plot
        if flag_plot_debug:
            output_folder = os.path.join('output', 'calculation_BiotSavart_withoutIron', magnet_name)
            make_folder_if_not_existing(output_folder)

            # Plot strand currents
            f = plt.figure(figsize=(16, 4))
            plt.subplot(1, 3, 1)
            plt.scatter(x_strands, y_strands, s=2, c=I_strands)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Currents', **self.selectedFont)
            plt.set_cmap('jet')
            cbar = plt.colorbar()
            cbar.set_label('Current per strand [A]', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')

            plt.subplot(1, 3, 2)
            plt.scatter(x_strands, y_strands, s=2, c=strandToGroup)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Groups', **self.selectedFont)
            plt.set_cmap('jet')
            cbar = plt.colorbar()
            cbar.set_label('Coil Section [-]', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')

            plt.subplot(1, 3, 3)
            plt.scatter(x_strands, y_strands, s=2, c=strandToHalfTurn)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Half turns', **self.selectedFont)
            plt.set_cmap('jet')
            cbar = plt.colorbar()
            cbar.set_label('Half turn [-]', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_I_groups_halfTurns.png'), format='png')


            # Plot magnetic field
            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=Bx_strands)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('B_x [T]', **self.selectedFont)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('X-component of magnetic field, not including iron yoke effect', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_Bx.png'), format='png')

            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=By_strands)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('B_y [T]', **self.selectedFont)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Y-component of magnetic field, not including iron yoke effect', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_By.png'), format='png')

            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=B_strands)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('|B| [T]', **self.selectedFont)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Magnetic field, not including iron yoke effect', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_absB.png'), format='png')

            # Plots errors
            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=absolute_differences_Bx)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('$\Delta$B_x [T]', **self.selectedFont)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Error in the X-component of magnetic field', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_Bx_absError.png'), format='png')

            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=absolute_differences_By)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('$\Delta$B_y [T]', **self.selectedFont)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Error in the Y-component of magnetic field', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_By_absError.png'), format='png')

            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=absolute_differences_B)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('$\Delta$|B| [T]', **self.selectedFont)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Error in the magnetic field', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_absB_absError.png'), format='png')

            f = plt.figure(figsize=(10, 7))
            plt.plot(absolute_differences_Bx)
            plt.plot(absolute_differences_By)
            plt.xlabel('Strand number [-]', **self.selectedFont)
            plt.ylabel('Absolute error [T]', **self.selectedFont)
            plt.legend('Bx', 'By')
            f.savefig(os.path.join(output_folder, f'{magnet_name}_Bx_By_absError_vsStrandPosition.png'), format='png')

            plt.show(block=False)
            plt.pause(self.time_to_wait_before_closing_figures)
            plt.close('all')


    def test_MagneticCoil_calculateFieldGrid(self, magnet_name='MQXA', flag_plot_debug=False):
        '''
        The test:
        -	Reads x, y, strand positions and I currents in the current lines
        -	Calculates the field generated by the current lines in a grid
        -	Makes some plots
        :return:
        '''

        # arrange
        path_input_file = os.path.join('input', 'map2d_noIron_noSelfField', f'{magnet_name}_All_NoIron_NoSelfField.map2d')

        # Acquire map2d information
        ParserMap2 = ParserMap2dFile(path_input_file)
        nT, nStrands_inGroup, polarities_inGroup, strandToHalfTurn, strandToGroup, x_strands, y_strands, I_strands, Bx, By = ParserMap2.getParametersFromMap2d(headerLines=1)


        # act
        # Calculate field map
        minMaxX = [-.15, +.15]  # to adjust depending on the coil dimensions
        minMaxY = [-.15, +.15]  # to adjust depending on the coil dimensions
        nGridPoints = [40, 40]

        # Define the magnetic coil
        definedMagneticCoil = MagneticCoil()
        definedMagneticCoil.setStrandPositions(x_strands, y_strands, I_strands)
        Bx_mapCoil, By_mapCoil, B_mapCoil, x_map, y_map = definedMagneticCoil.calculateMagneticFieldGrid(minMaxX, minMaxY, nGridPoints)

        # assert

        # plot
        if flag_plot_debug:
            # Plot strand currents
            f = plt.figure(figsize=(16, 4))
            plt.subplot(1, 3, 1)
            plt.scatter(x_strands, y_strands, s=2, c=I_strands)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Currents', **self.selectedFont)
            plt.set_cmap('jet')
            cbar = plt.colorbar()
            cbar.set_label('Current per strand [A]', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')

            plt.subplot(1, 3, 2)
            plt.scatter(x_strands, y_strands, s=2, c=strandToGroup)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Groups', **self.selectedFont)
            plt.set_cmap('jet')
            cbar = plt.colorbar()
            cbar.set_label('Coil Section [-]', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')

            plt.subplot(1, 3, 3)
            plt.scatter(x_strands, y_strands, s=2, c=strandToHalfTurn)
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Half turns', **self.selectedFont)
            plt.set_cmap('jet')
            cbar = plt.colorbar()
            cbar.set_label('Half turn [-]', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')

            # Plot current lines
            f = plt.figure(figsize=(10, 7))
            plt.scatter(x_strands, y_strands, s=2, c=I_strands)
            plt.set_cmap('jet')
            cbar1 = plt.colorbar()
            cbar1.set_label('Current per strand [A]', **self.selectedFont)

            # Plot magnetic field arrows
            q = plt.quiver(x_map, y_map, Bx_mapCoil, By_mapCoil, color='k')
            plt.xlabel('x [m]', **self.selectedFont)
            plt.ylabel('y [m]', **self.selectedFont)
            plt.title('Magnetic field lines from magnet coil, not including iron yoke effect', **self.selectedFont)
            plt.rcParams.update({'font.size': 12})
            plt.axis('equal')

            time.sleep(self.time_to_wait_before_closing_figures)
            plt.close('all')
