# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")



def _add_paths():
  import os
  result = []

  if hasattr(os, 'add_dll_directory'):
    for path in os.environ.get('PATH', '').split(';'):
      if os.path.isabs(path) and os.path.exists(path):
        result.append(os.add_dll_directory(path))

  return result

_extra_paths = _add_paths()

if __package__ or '.' in __name__:
    from . import _BrickAgxPyApi
else:
    import _BrickAgxPyApi

for path in _extra_paths:
  path.close()

del _extra_paths
del _add_paths



try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _BrickAgxPyApi.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BrickAgxPyApi.delete_SwigPyIterator

    def value(self):
        return _BrickAgxPyApi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BrickAgxPyApi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BrickAgxPyApi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BrickAgxPyApi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BrickAgxPyApi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BrickAgxPyApi.SwigPyIterator_copy(self)

    def next(self):
        return _BrickAgxPyApi.SwigPyIterator_next(self)

    def __next__(self):
        return _BrickAgxPyApi.SwigPyIterator___next__(self)

    def previous(self):
        return _BrickAgxPyApi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BrickAgxPyApi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BrickAgxPyApi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BrickAgxPyApi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BrickAgxPyApi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BrickAgxPyApi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BrickAgxPyApi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BrickAgxPyApi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BrickAgxPyApi:
_BrickAgxPyApi.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
import rebrick.Physics
import rebrick.Physics1D
import rebrick.Physics3D
import rebrick.DriveTrain
import rebrick.Robotics
import rebrick.Simulation
import agxSDK
import agx
import agxData
import agxStream
import agxCollide
import agxRender
class BrickToAgxMapper(object):
    r"""Proxy of C++ BrickAgx::BrickToAgxMapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BrickToAgxMapper self, Simulation simulation, std::string const & source_id, std::shared_ptr< BrickAgx::AgxCache > agx_cache=0, std::shared_ptr< BrickAgx::BrickMaterialManager > material_manager=0, std::shared_ptr< Brick::ErrorReporter > error_reporter=std::make_shared< Brick::ErrorReporter >()) -> BrickToAgxMapper

        Parameters
        ----------
        simulation: agxSDK::Simulation *
        source_id: std::string const &
        agx_cache: std::shared_ptr< BrickAgx::AgxCache >
        material_manager: std::shared_ptr< BrickAgx::BrickMaterialManager >
        error_reporter: std::shared_ptr< Brick::ErrorReporter >

        """
        _BrickAgxPyApi.BrickToAgxMapper_swiginit(self, _BrickAgxPyApi.new_BrickToAgxMapper(*args))

    def mapObject(self, object):
        r"""
        mapObject(BrickToAgxMapper self, std::shared_ptr< Brick::Core::Object > object) -> AssemblyRef

        Parameters
        ----------
        object: std::shared_ptr< Brick::Core::Object >

        """
        return _BrickAgxPyApi.BrickToAgxMapper_mapObject(self, object)

    def getErrorReporter(self):
        r"""getErrorReporter(BrickToAgxMapper self) -> std::shared_ptr< Brick::ErrorReporter >"""
        return _BrickAgxPyApi.BrickToAgxMapper_getErrorReporter(self)

    def getPowerLine(self):
        r"""getPowerLine(BrickToAgxMapper self) -> agxPowerLine::PowerLineRef"""
        return _BrickAgxPyApi.BrickToAgxMapper_getPowerLine(self)

    def getSimulation(self):
        r"""getSimulation(BrickToAgxMapper self) -> Simulation"""
        return _BrickAgxPyApi.BrickToAgxMapper_getSimulation(self)

    def getAgxCache(self):
        r"""getAgxCache(BrickToAgxMapper self) -> std::shared_ptr< BrickAgx::AgxCache >"""
        return _BrickAgxPyApi.BrickToAgxMapper_getAgxCache(self)

    def lookupAgxRigidBody(self, rigid_body):
        r"""
        lookupAgxRigidBody(BrickToAgxMapper self, std::shared_ptr< Brick::Physics3D::Bodies::RigidBody > const & rigid_body) -> RigidBodyRef

        Parameters
        ----------
        rigid_body: std::shared_ptr< Brick::Physics3D::Bodies::RigidBody > const &

        """
        return _BrickAgxPyApi.BrickToAgxMapper_lookupAgxRigidBody(self, rigid_body)

    def getAgxTerrainFor(self, b_terrain):
        r"""
        getAgxTerrainFor(BrickToAgxMapper self, std::shared_ptr< Brick::Terrain::Terrain > const & b_terrain) -> agxTerrain::TerrainRef

        Parameters
        ----------
        b_terrain: std::shared_ptr< Brick::Terrain::Terrain > const &

        """
        return _BrickAgxPyApi.BrickToAgxMapper_getAgxTerrainFor(self, b_terrain)

    def getEventListeners(self):
        r"""getEventListeners(BrickToAgxMapper self) -> agx::Vector< agxSDK::EventListenerRef > const &"""
        return _BrickAgxPyApi.BrickToAgxMapper_getEventListeners(self)

    def getTracks(self):
        r"""getTracks(BrickToAgxMapper self) -> std::vector< agxVehicle::TrackRef,std::allocator< agxVehicle::TrackRef > > const &"""
        return _BrickAgxPyApi.BrickToAgxMapper_getTracks(self)

    @staticmethod
    def mapGearBoxGear(gear_box, agx_gear_box, gear):
        r"""
        mapGearBoxGear(std::shared_ptr< Brick::DriveTrain::GearBox > const & gear_box, agxDriveTrain::GearBoxRef const & agx_gear_box, int gear) -> int

        Parameters
        ----------
        gear_box: std::shared_ptr< Brick::DriveTrain::GearBox > const &
        agx_gear_box: agxDriveTrain::GearBoxRef const &
        gear: int

        """
        return _BrickAgxPyApi.BrickToAgxMapper_mapGearBoxGear(gear_box, agx_gear_box, gear)
    __swig_destroy__ = _BrickAgxPyApi.delete_BrickToAgxMapper

# Register BrickToAgxMapper in _BrickAgxPyApi:
_BrickAgxPyApi.BrickToAgxMapper_swigregister(BrickToAgxMapper)

def BrickToAgxMapper_mapGearBoxGear(gear_box, agx_gear_box, gear):
    r"""
    BrickToAgxMapper_mapGearBoxGear(std::shared_ptr< Brick::DriveTrain::GearBox > const & gear_box, agxDriveTrain::GearBoxRef const & agx_gear_box, int gear) -> int

    Parameters
    ----------
    gear_box: std::shared_ptr< Brick::DriveTrain::GearBox > const &
    agx_gear_box: agxDriveTrain::GearBoxRef const &
    gear: int

    """
    return _BrickAgxPyApi.BrickToAgxMapper_mapGearBoxGear(gear_box, agx_gear_box, gear)

AgxToBrickTrimeshMode_OBJ_EXPORT = _BrickAgxPyApi.AgxToBrickTrimeshMode_OBJ_EXPORT

AgxToBrickTrimeshMode_INLINE = _BrickAgxPyApi.AgxToBrickTrimeshMode_INLINE

AgxToBrickTrimeshMode_CACHED = _BrickAgxPyApi.AgxToBrickTrimeshMode_CACHED

AgxToBrickMaterialNamingRule_BRICK_NAME = _BrickAgxPyApi.AgxToBrickMaterialNamingRule_BRICK_NAME

AgxToBrickMaterialNamingRule_AGX_NAME = _BrickAgxPyApi.AgxToBrickMaterialNamingRule_AGX_NAME

AgxToBrickMaterialNamingRule_AGX_UUID = _BrickAgxPyApi.AgxToBrickMaterialNamingRule_AGX_UUID

class EnsureUniqueId(object):
    r"""Proxy of C++ BrickAgx::EnsureUniqueId class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ensureUniqueId(self, name, uuid, used_names):
        r"""
        ensureUniqueId(EnsureUniqueId self, std::string const & name, Uuid uuid, std::unordered_set< std::string > & used_names) -> std::string

        Parameters
        ----------
        name: std::string const &
        uuid: agx::Uuid const &
        used_names: std::unordered_set< std::string > &

        """
        return _BrickAgxPyApi.EnsureUniqueId_ensureUniqueId(self, name, uuid, used_names)

    def lookupId(self, x_uuid):
        r"""
        lookupId(EnsureUniqueId self, Uuid x_uuid) -> std::string

        Parameters
        ----------
        x_uuid: agx::Uuid const &

        """
        return _BrickAgxPyApi.EnsureUniqueId_lookupId(self, x_uuid)

    def clear(self):
        r"""clear(EnsureUniqueId self)"""
        return _BrickAgxPyApi.EnsureUniqueId_clear(self)

    def __init__(self):
        r"""__init__(EnsureUniqueId self) -> EnsureUniqueId"""
        _BrickAgxPyApi.EnsureUniqueId_swiginit(self, _BrickAgxPyApi.new_EnsureUniqueId())
    __swig_destroy__ = _BrickAgxPyApi.delete_EnsureUniqueId

# Register EnsureUniqueId in _BrickAgxPyApi:
_BrickAgxPyApi.EnsureUniqueId_swigregister(EnsureUniqueId)

class AgxToBrickMapper(object):
    r"""Proxy of C++ BrickAgx::AgxToBrickMapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AgxToBrickMapper self, Simulation simulation, BrickAgx::AgxToBrickTrimeshMode trimesh_mode, uint32_t precision=6, bool discard_rigid_body_positions=False, bool regenerate_shape_uuids=False, BrickAgx::AgxToBrickMaterialNamingRule material_naming_rule=AGX_NAME) -> AgxToBrickMapper

        Parameters
        ----------
        simulation: agxSDK::Simulation *
        trimesh_mode: enum BrickAgx::AgxToBrickTrimeshMode
        precision: uint32_t
        discard_rigid_body_positions: bool
        regenerate_shape_uuids: bool
        material_naming_rule: enum BrickAgx::AgxToBrickMaterialNamingRule

        __init__(AgxToBrickMapper self, std::string const & export_folder, bool obj_relative_path, uint32_t precision=6, bool discard_rigid_body_positions=False, bool regenerate_shape_uuids=False) -> AgxToBrickMapper

        Parameters
        ----------
        export_folder: std::string const &
        obj_relative_path: bool
        precision: uint32_t
        discard_rigid_body_positions: bool
        regenerate_shape_uuids: bool

        """
        _BrickAgxPyApi.AgxToBrickMapper_swiginit(self, _BrickAgxPyApi.new_AgxToBrickMapper(*args))

    def nameOrUuid(self, name, uuid):
        r"""
        nameOrUuid(AgxToBrickMapper self, agx::Name const & name, Uuid uuid) -> std::string

        Parameters
        ----------
        name: agx::Name const &
        uuid: agx::Uuid const &

        """
        return _BrickAgxPyApi.AgxToBrickMapper_nameOrUuid(self, name, uuid)

    def nameWithIndexOrUuid(self, name, index, uuid):
        r"""
        nameWithIndexOrUuid(AgxToBrickMapper self, agx::Name const & name, size_t index, Uuid uuid) -> std::string

        Parameters
        ----------
        name: agx::Name const &
        index: size_t
        uuid: agx::Uuid const &

        """
        return _BrickAgxPyApi.AgxToBrickMapper_nameWithIndexOrUuid(self, name, index, uuid)

    def assemblyToDocument(self, assembly):
        r"""
        assemblyToDocument(AgxToBrickMapper self, AssemblyRef assembly) -> Brick::DocPtr

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef const &

        """
        return _BrickAgxPyApi.AgxToBrickMapper_assemblyToDocument(self, assembly)

    def assemblyToBrick(self, assembly):
        r"""
        assemblyToBrick(AgxToBrickMapper self, AssemblyRef assembly) -> std::string

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef const &

        """
        return _BrickAgxPyApi.AgxToBrickMapper_assemblyToBrick(self, assembly)
    __swig_destroy__ = _BrickAgxPyApi.delete_AgxToBrickMapper

# Register AgxToBrickMapper in _BrickAgxPyApi:
_BrickAgxPyApi.AgxToBrickMapper_swigregister(AgxToBrickMapper)

class Signals(object):
    r"""Proxy of C++ BrickAgx::Signals class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def popInputSignals():
        r"""popInputSignals() -> Physics_Signals_InputSignal_Vector"""
        return _BrickAgxPyApi.Signals_popInputSignals()

    @staticmethod
    def sendInputSignal(signal):
        r"""
        sendInputSignal(BrickAgx::InputSignalPtr signal) -> bool

        Parameters
        ----------
        signal: BrickAgx::InputSignalPtr

        """
        return _BrickAgxPyApi.Signals_sendInputSignal(signal)

    @staticmethod
    def getOutputSignals():
        r"""getOutputSignals() -> Physics_Signals_OutputSignal_Vector"""
        return _BrickAgxPyApi.Signals_getOutputSignals()

    @staticmethod
    def sendOutputSignal(signal):
        r"""
        sendOutputSignal(BrickAgx::OutputSignalPtr signal) -> bool

        Parameters
        ----------
        signal: BrickAgx::OutputSignalPtr

        """
        return _BrickAgxPyApi.Signals_sendOutputSignal(signal)

    @staticmethod
    def clearOutputSignals():
        r"""clearOutputSignals()"""
        return _BrickAgxPyApi.Signals_clearOutputSignals()

    def __init__(self):
        r"""__init__(Signals self) -> Signals"""
        _BrickAgxPyApi.Signals_swiginit(self, _BrickAgxPyApi.new_Signals())
    __swig_destroy__ = _BrickAgxPyApi.delete_Signals

# Register Signals in _BrickAgxPyApi:
_BrickAgxPyApi.Signals_swigregister(Signals)

def Signals_popInputSignals():
    r"""Signals_popInputSignals() -> Physics_Signals_InputSignal_Vector"""
    return _BrickAgxPyApi.Signals_popInputSignals()

def Signals_sendInputSignal(signal):
    r"""
    Signals_sendInputSignal(BrickAgx::InputSignalPtr signal) -> bool

    Parameters
    ----------
    signal: BrickAgx::InputSignalPtr

    """
    return _BrickAgxPyApi.Signals_sendInputSignal(signal)

def Signals_getOutputSignals():
    r"""Signals_getOutputSignals() -> Physics_Signals_OutputSignal_Vector"""
    return _BrickAgxPyApi.Signals_getOutputSignals()

def Signals_sendOutputSignal(signal):
    r"""
    Signals_sendOutputSignal(BrickAgx::OutputSignalPtr signal) -> bool

    Parameters
    ----------
    signal: BrickAgx::OutputSignalPtr

    """
    return _BrickAgxPyApi.Signals_sendOutputSignal(signal)

def Signals_clearOutputSignals():
    r"""Signals_clearOutputSignals()"""
    return _BrickAgxPyApi.Signals_clearOutputSignals()


def findAllOutputs(brick_scene):
    r"""
    findAllOutputs(Brick::Core::ObjectPtr const & brick_scene) -> Physics_Signals_Output_Vector

    Parameters
    ----------
    brick_scene: Brick::Core::ObjectPtr const &

    """
    return _BrickAgxPyApi.findAllOutputs(brick_scene)
class InputSignalListener(agxSDK.StepEventListener):
    r"""Proxy of C++ BrickAgx::InputSignalListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly):
        r"""
        __init__(InputSignalListener self, Assembly assembly) -> InputSignalListener

        Parameters
        ----------
        assembly: agxSDK::Assembly *

        """

        if str(type(assembly)) == "<class 'agxSDK.AssemblyRef'>":
            assembly = assembly.get()


        _BrickAgxPyApi.InputSignalListener_swiginit(self, _BrickAgxPyApi.new_InputSignalListener(assembly))

    def preCollide(self, time):
        r"""
        preCollide(InputSignalListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _BrickAgxPyApi.InputSignalListener_preCollide(self, time)
    RECOMMENDED_PRIO = _BrickAgxPyApi.InputSignalListener_RECOMMENDED_PRIO
    
    SEND_SIGNAL_PRIO = _BrickAgxPyApi.InputSignalListener_SEND_SIGNAL_PRIO
    

    def addNotification(self):
        _BrickAgxPyApi.InputSignalListener_addNotification
        super().addNotification()


    __swig_destroy__ = _BrickAgxPyApi.delete_InputSignalListener

# Register InputSignalListener in _BrickAgxPyApi:
_BrickAgxPyApi.InputSignalListener_swigregister(InputSignalListener)

class OutputSignalListener(agxSDK.StepEventListener):
    r"""Proxy of C++ BrickAgx::OutputSignalListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly, brick_scene):
        r"""
        __init__(OutputSignalListener self, Assembly assembly, std::shared_ptr< Brick::Core::Object > const & brick_scene) -> OutputSignalListener

        Parameters
        ----------
        assembly: agxSDK::Assembly *
        brick_scene: std::shared_ptr< Brick::Core::Object > const &

        """

        if str(type(assembly)) == "<class 'agxSDK.AssemblyRef'>":
            assembly = assembly.get()


        _BrickAgxPyApi.OutputSignalListener_swiginit(self, _BrickAgxPyApi.new_OutputSignalListener(assembly, brick_scene))

    def syncOutputSignals(self):
        r"""syncOutputSignals(OutputSignalListener self)"""
        return _BrickAgxPyApi.OutputSignalListener_syncOutputSignals(self)

    def post(self, time):
        r"""
        post(OutputSignalListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _BrickAgxPyApi.OutputSignalListener_post(self, time)
    RECOMMENDED_PRIO = _BrickAgxPyApi.OutputSignalListener_RECOMMENDED_PRIO
    
    __swig_destroy__ = _BrickAgxPyApi.delete_OutputSignalListener

# Register OutputSignalListener in _BrickAgxPyApi:
_BrickAgxPyApi.OutputSignalListener_swigregister(OutputSignalListener)

class AssemblyBrickObjectPair(object):
    r"""Proxy of C++ std::pair< std::shared_ptr< Brick::Core::Object >,agxSDK::AssemblyRef > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AssemblyBrickObjectPair self) -> AssemblyBrickObjectPair
        __init__(AssemblyBrickObjectPair self, std::shared_ptr< Brick::Core::Object > first, AssemblyRef second) -> AssemblyBrickObjectPair

        Parameters
        ----------
        first: std::shared_ptr< Brick::Core::Object >
        second: agx::ref_ptr< agxSDK::Assembly >

        __init__(AssemblyBrickObjectPair self, AssemblyBrickObjectPair other) -> AssemblyBrickObjectPair

        Parameters
        ----------
        other: std::pair< std::shared_ptr< Brick::Core::Object >,agxSDK::AssemblyRef > const &

        """
        _BrickAgxPyApi.AssemblyBrickObjectPair_swiginit(self, _BrickAgxPyApi.new_AssemblyBrickObjectPair(*args))
    first = property(_BrickAgxPyApi.AssemblyBrickObjectPair_first_get, _BrickAgxPyApi.AssemblyBrickObjectPair_first_set, doc=r"""first : std::shared_ptr<(Brick::Core::Object)>""")
    second = property(_BrickAgxPyApi.AssemblyBrickObjectPair_second_get, _BrickAgxPyApi.AssemblyBrickObjectPair_second_set, doc=r"""second : agx::ref_ptr<(agxSDK::Assembly)>""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _BrickAgxPyApi.delete_AssemblyBrickObjectPair

# Register AssemblyBrickObjectPair in _BrickAgxPyApi:
_BrickAgxPyApi.AssemblyBrickObjectPair_swigregister(AssemblyBrickObjectPair)

class ClickInputListener(object):
    r"""Proxy of C++ BrickAgx::ClickInputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server, brick_scene, time_step, autostepping_enabled):
        r"""
        __init__(ClickInputListener self, std::shared_ptr< click::Server > & server, std::shared_ptr< Brick::Core::Object > const & brick_scene, double time_step, bool autostepping_enabled) -> ClickInputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &
        brick_scene: std::shared_ptr< Brick::Core::Object > const &
        time_step: double
        autostepping_enabled: bool

        """
        _BrickAgxPyApi.ClickInputListener_swiginit(self, _BrickAgxPyApi.new_ClickInputListener(server, brick_scene, time_step, autostepping_enabled))
    __swig_destroy__ = _BrickAgxPyApi.delete_ClickInputListener

    def preFrame(self, arg2):
        r"""
        preFrame(ClickInputListener self, agx::TimeStamp const & arg2) -> bool

        Parameters
        ----------
        arg2: agx::TimeStamp const &

        """
        return _BrickAgxPyApi.ClickInputListener_preFrame(self, arg2)

    def set_autostepping_enabled(self, enabled):
        r"""
        set_autostepping_enabled(ClickInputListener self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _BrickAgxPyApi.ClickInputListener_set_autostepping_enabled(self, enabled)

    def is_autostepping_enabled(self):
        r"""is_autostepping_enabled(ClickInputListener self) -> bool"""
        return _BrickAgxPyApi.ClickInputListener_is_autostepping_enabled(self)

    def is_click_signal_available(self):
        r"""is_click_signal_available(ClickInputListener self) -> bool"""
        return _BrickAgxPyApi.ClickInputListener_is_click_signal_available(self)

    def setSensorRequestCallback(self, callback):
        r"""
        setSensorRequestCallback(ClickInputListener self, std::function< void (agx::TimeStamp const &) > callback)

        Parameters
        ----------
        callback: std::function< void (agx::TimeStamp const &) >

        """
        return _BrickAgxPyApi.ClickInputListener_setSensorRequestCallback(self, callback)

    def updateScene(self, brick_scene):
        r"""
        updateScene(ClickInputListener self, std::shared_ptr< Brick::Core::Object > const & brick_scene)

        Parameters
        ----------
        brick_scene: std::shared_ptr< Brick::Core::Object > const &

        """
        return _BrickAgxPyApi.ClickInputListener_updateScene(self, brick_scene)

    def autostepOffCallback(self):
        r"""autostepOffCallback(ClickInputListener self)"""
        return _BrickAgxPyApi.ClickInputListener_autostepOffCallback(self)

    def autostepOnCallback(self):
        r"""autostepOnCallback(ClickInputListener self)"""
        return _BrickAgxPyApi.ClickInputListener_autostepOnCallback(self)

    def stopApplicationCallback(self):
        r"""stopApplicationCallback(ClickInputListener self)"""
        return _BrickAgxPyApi.ClickInputListener_stopApplicationCallback(self)

    def resetCallback(self):
        r"""resetCallback(ClickInputListener self)"""
        return _BrickAgxPyApi.ClickInputListener_resetCallback(self)

    def getScene(self):
        r"""getScene(ClickInputListener self) -> std::shared_ptr< Brick::Core::Object >"""
        return _BrickAgxPyApi.ClickInputListener_getScene(self)

# Register ClickInputListener in _BrickAgxPyApi:
_BrickAgxPyApi.ClickInputListener_swigregister(ClickInputListener)

class OsgClickInputListener(ClickInputListener):
    r"""Proxy of C++ BrickAgx::OsgClickInputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server, brick_scene, time_step, autostepping_enabled):
        r"""
        __init__(OsgClickInputListener self, std::shared_ptr< click::Server > & server, std::shared_ptr< Brick::Core::Object > const & brick_scene, double time_step, bool autostepping_enabled) -> OsgClickInputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &
        brick_scene: std::shared_ptr< Brick::Core::Object > const &
        time_step: double
        autostepping_enabled: bool

        """
        _BrickAgxPyApi.OsgClickInputListener_swiginit(self, _BrickAgxPyApi.new_OsgClickInputListener(server, brick_scene, time_step, autostepping_enabled))

    def preFrame(self, app):
        r"""
        preFrame(OsgClickInputListener self, agxOSG::ExampleApplication * app)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *

        """
        return _BrickAgxPyApi.OsgClickInputListener_preFrame(self, app)

    def autostepOffCallback(self):
        r"""autostepOffCallback(OsgClickInputListener self)"""
        return _BrickAgxPyApi.OsgClickInputListener_autostepOffCallback(self)

    def autostepOnCallback(self):
        r"""autostepOnCallback(OsgClickInputListener self)"""
        return _BrickAgxPyApi.OsgClickInputListener_autostepOnCallback(self)

    def stopApplicationCallback(self):
        r"""stopApplicationCallback(OsgClickInputListener self)"""
        return _BrickAgxPyApi.OsgClickInputListener_stopApplicationCallback(self)

    def resetCallback(self):
        r"""resetCallback(OsgClickInputListener self)"""
        return _BrickAgxPyApi.OsgClickInputListener_resetCallback(self)
    __swig_destroy__ = _BrickAgxPyApi.delete_OsgClickInputListener

# Register OsgClickInputListener in _BrickAgxPyApi:
_BrickAgxPyApi.OsgClickInputListener_swigregister(OsgClickInputListener)

class ClickOutputListener(agxSDK.StepEventListener):
    r"""Proxy of C++ BrickAgx::ClickOutputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server):
        r"""
        __init__(ClickOutputListener self, std::shared_ptr< click::Server > & server) -> ClickOutputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &

        """
        _BrickAgxPyApi.ClickOutputListener_swiginit(self, _BrickAgxPyApi.new_ClickOutputListener(server))

    def post(self, prev_step):
        r"""
        post(ClickOutputListener self, agx::TimeStamp const & prev_step)

        Parameters
        ----------
        prev_step: agx::TimeStamp const &

        """
        return _BrickAgxPyApi.ClickOutputListener_post(self, prev_step)

    def last(self, simulated_time):
        r"""
        last(ClickOutputListener self, agx::TimeStamp const & simulated_time)

        Parameters
        ----------
        simulated_time: agx::TimeStamp const &

        """
        return _BrickAgxPyApi.ClickOutputListener_last(self, simulated_time)
    RECOMMENDED_PRIO = _BrickAgxPyApi.ClickOutputListener_RECOMMENDED_PRIO
    

    def sendResetMessage(self):
        r"""sendResetMessage(ClickOutputListener self)"""
        return _BrickAgxPyApi.ClickOutputListener_sendResetMessage(self)
    __swig_destroy__ = _BrickAgxPyApi.delete_ClickOutputListener

# Register ClickOutputListener in _BrickAgxPyApi:
_BrickAgxPyApi.ClickOutputListener_swigregister(ClickOutputListener)

class ClickKeyboardEventListener(agxSDK.GuiEventListener):
    r"""Proxy of C++ BrickAgx::ClickKeyboardEventListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, click_input_listener, app, click_adapter):
        r"""
        __init__(ClickKeyboardEventListener self, std::shared_ptr< BrickAgx::ClickInputListener > click_input_listener, agxOSG::ExampleApplication * app, OsgClickAdapter click_adapter) -> ClickKeyboardEventListener

        Parameters
        ----------
        click_input_listener: std::shared_ptr< BrickAgx::ClickInputListener >
        app: agxOSG::ExampleApplication *
        click_adapter: BrickAgx::OsgClickAdapter *

        """
        _BrickAgxPyApi.ClickKeyboardEventListener_swiginit(self, _BrickAgxPyApi.new_ClickKeyboardEventListener(click_input_listener, app, click_adapter))

    def keyboard(self, key, modkeyMask, x, y, keyDown):
        r"""
        keyboard(ClickKeyboardEventListener self, int key, unsigned int modkeyMask, float x, float y, bool keyDown) -> bool

        Parameters
        ----------
        key: int
        modkeyMask: unsigned int
        x: float
        y: float
        keyDown: bool

        """
        return _BrickAgxPyApi.ClickKeyboardEventListener_keyboard(self, key, modkeyMask, x, y, keyDown)
    RECOMMENDED_PRIO = _BrickAgxPyApi.ClickKeyboardEventListener_RECOMMENDED_PRIO
    
    __swig_destroy__ = _BrickAgxPyApi.delete_ClickKeyboardEventListener

# Register ClickKeyboardEventListener in _BrickAgxPyApi:
_BrickAgxPyApi.ClickKeyboardEventListener_swigregister(ClickKeyboardEventListener)

class OsgClickAdapter(object):
    r"""Proxy of C++ BrickAgx::OsgClickAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def sendResetMessage(self):
        r"""sendResetMessage(OsgClickAdapter self)"""
        return _BrickAgxPyApi.OsgClickAdapter_sendResetMessage(self)

    def willSendResetMessage(self):
        r"""willSendResetMessage(OsgClickAdapter self) -> bool"""
        return _BrickAgxPyApi.OsgClickAdapter_willSendResetMessage(self)

    def add_listeners(self, app, simulation, click_server_addr, brick_scene, output_signal_listener):
        r"""
        add_listeners(OsgClickAdapter self, agxOSG::ExampleApplication * app, Simulation simulation, std::string const & click_server_addr, std::shared_ptr< Brick::Core::Object > const & brick_scene, OutputSignalListener output_signal_listener)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *
        simulation: agxSDK::Simulation *
        click_server_addr: std::string const &
        brick_scene: std::shared_ptr< Brick::Core::Object > const &
        output_signal_listener: BrickAgx::OutputSignalListener *

        """
        return _BrickAgxPyApi.OsgClickAdapter_add_listeners(self, app, simulation, click_server_addr, brick_scene, output_signal_listener)

    def createClickInputListener(self, brick_scene, time_step, auto_stepping):
        r"""
        createClickInputListener(OsgClickAdapter self, std::shared_ptr< Brick::Core::Object > const & brick_scene, double time_step, bool auto_stepping) -> std::shared_ptr< BrickAgx::ClickInputListener >

        Parameters
        ----------
        brick_scene: std::shared_ptr< Brick::Core::Object > const &
        time_step: double
        auto_stepping: bool

        """
        return _BrickAgxPyApi.OsgClickAdapter_createClickInputListener(self, brick_scene, time_step, auto_stepping)

    def __init__(self):
        r"""__init__(OsgClickAdapter self) -> OsgClickAdapter"""
        _BrickAgxPyApi.OsgClickAdapter_swiginit(self, _BrickAgxPyApi.new_OsgClickAdapter())
    __swig_destroy__ = _BrickAgxPyApi.delete_OsgClickAdapter

# Register OsgClickAdapter in _BrickAgxPyApi:
_BrickAgxPyApi.OsgClickAdapter_swigregister(OsgClickAdapter)

class AgxCache(object):
    r"""Proxy of C++ BrickAgx::AgxCache class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AgxCache self) -> AgxCache"""
        _BrickAgxPyApi.AgxCache_swiginit(self, _BrickAgxPyApi.new_AgxCache())

    def readCollisionShape(self, uuid):
        r"""
        readCollisionShape(AgxCache self, std::string const & uuid) -> std::optional< agxCollide::ShapeRef >

        Parameters
        ----------
        uuid: std::string const &

        """
        return _BrickAgxPyApi.AgxCache_readCollisionShape(self, uuid)

    def readCollisionShapeAndTransform(self, uuid):
        r"""
        readCollisionShapeAndTransform(AgxCache self, std::string const & uuid) -> std::optional< std::pair< agxCollide::ShapeRef,agx::AffineMatrix4x4 > >

        Parameters
        ----------
        uuid: std::string const &

        """
        return _BrickAgxPyApi.AgxCache_readCollisionShapeAndTransform(self, uuid)

    def writeCollisionShape(self, shape):
        r"""
        writeCollisionShape(AgxCache self, ShapeRef shape)

        Parameters
        ----------
        shape: agxCollide::ShapeRef const &

        """
        return _BrickAgxPyApi.AgxCache_writeCollisionShape(self, shape)

    def cacheShapes(self, assembly):
        r"""
        cacheShapes(AgxCache self, AssemblyRef assembly)

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef const &

        """
        return _BrickAgxPyApi.AgxCache_cacheShapes(self, assembly)

    def flagAsConsumed(self, uuid):
        r"""
        flagAsConsumed(AgxCache self, std::string const & uuid)

        Parameters
        ----------
        uuid: std::string const &

        """
        return _BrickAgxPyApi.AgxCache_flagAsConsumed(self, uuid)

    def isConsumed(self, uuid):
        r"""
        isConsumed(AgxCache self, std::string const & uuid) -> bool

        Parameters
        ----------
        uuid: std::string const &

        """
        return _BrickAgxPyApi.AgxCache_isConsumed(self, uuid)
    __swig_destroy__ = _BrickAgxPyApi.delete_AgxCache

# Register AgxCache in _BrickAgxPyApi:
_BrickAgxPyApi.AgxCache_swigregister(AgxCache)

class BrickMaterialManager(object):
    r"""Proxy of C++ BrickAgx::BrickMaterialManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BrickMaterialManager self) -> BrickMaterialManager"""
        _BrickAgxPyApi.BrickMaterialManager_swiginit(self, _BrickAgxPyApi.new_BrickMaterialManager())

    def registerAndMergeScene(self, scene):
        r"""
        registerAndMergeScene(BrickMaterialManager self, System scene) -> bool

        Parameters
        ----------
        scene: Brick::Physics3D::System const &

        """
        return _BrickAgxPyApi.BrickMaterialManager_registerAndMergeScene(self, scene)
    __swig_destroy__ = _BrickAgxPyApi.delete_BrickMaterialManager

# Register BrickMaterialManager in _BrickAgxPyApi:
_BrickAgxPyApi.BrickMaterialManager_swigregister(BrickMaterialManager)

class Result(object):
    r"""Proxy of C++ BrickAgx::Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly, brick_object, errors, brick_to_agx_mapper):
        r"""
        __init__(Result self, Assembly assembly, std::shared_ptr< Brick::Core::Object > brick_object, ErrorVector errors, std::shared_ptr< BrickAgx::BrickToAgxMapper > brick_to_agx_mapper) -> Result

        Parameters
        ----------
        assembly: agxSDK::Assembly *
        brick_object: std::shared_ptr< Brick::Core::Object >
        errors: Brick::Errors
        brick_to_agx_mapper: std::shared_ptr< BrickAgx::BrickToAgxMapper >

        """
        _BrickAgxPyApi.Result_swiginit(self, _BrickAgxPyApi.new_Result(assembly, brick_object, errors, brick_to_agx_mapper))

    def assembly(self):
        r"""assembly(Result self) -> Assembly"""
        return _BrickAgxPyApi.Result_assembly(self)

    def brick_object(self):
        r"""brick_object(Result self) -> std::shared_ptr< Brick::Core::Object >"""
        return _BrickAgxPyApi.Result_brick_object(self)

    def errors(self):
        r"""errors(Result self) -> ErrorVector"""
        return _BrickAgxPyApi.Result_errors(self)

    def brick_to_agx_mapper(self):
        r"""brick_to_agx_mapper(Result self) -> std::shared_ptr< BrickAgx::BrickToAgxMapper >"""
        return _BrickAgxPyApi.Result_brick_to_agx_mapper(self)
    __swig_destroy__ = _BrickAgxPyApi.delete_Result

# Register Result in _BrickAgxPyApi:
_BrickAgxPyApi.Result_swigregister(Result)

class OptParams(object):
    r"""Proxy of C++ BrickAgx::OptParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def with_model_name(self, model_name):
        r"""
        with_model_name(OptParams self, std::string model_name) -> OptParams

        Parameters
        ----------
        model_name: std::string

        """
        return _BrickAgxPyApi.OptParams_with_model_name(self, model_name)

    def with_uuidv5(self, uuidv5_namespace_id):
        r"""
        with_uuidv5(OptParams self, std::string uuidv5_namespace_id) -> OptParams

        Parameters
        ----------
        uuidv5_namespace_id: std::string

        """
        return _BrickAgxPyApi.OptParams_with_uuidv5(self, uuidv5_namespace_id)

    def model_name(self):
        r"""model_name(OptParams self) -> std::optional< std::string > const &"""
        return _BrickAgxPyApi.OptParams_model_name(self)

    def uuidv5_namespace_id(self):
        r"""uuidv5_namespace_id(OptParams self) -> std::optional< std::string > const &"""
        return _BrickAgxPyApi.OptParams_uuidv5_namespace_id(self)

    def __init__(self):
        r"""__init__(OptParams self) -> OptParams"""
        _BrickAgxPyApi.OptParams_swiginit(self, _BrickAgxPyApi.new_OptParams())
    __swig_destroy__ = _BrickAgxPyApi.delete_OptParams

# Register OptParams in _BrickAgxPyApi:
_BrickAgxPyApi.OptParams_swigregister(OptParams)


def load_brick_string(*args):
    r"""
    load_brick_string(Simulation simulation, std::string const & source, std::string const & bundle_paths, OptParams optional_parameters=BrickAgx::OptParams()) -> Result

    Parameters
    ----------
    simulation: agxSDK::Simulation *
    source: std::string const &
    bundle_paths: std::string const &
    optional_parameters: BrickAgx::OptParams

    """
    return _BrickAgxPyApi.load_brick_string(*args)

def load_brick_file(*args):
    r"""
    load_brick_file(brick_file:str, bundle_paths:str, modelname:str=) -> Result { assembly(), brick_object(), errors() } 

    Load brickfile and return the BRICK model and corresponding AGX assembly

        Parameters
        ----------
        brick_file: path to the brick file
        brick_file: path to the brick file
        bundle_paths: semicolon separated list of file paths to bundles
        optional_parameters: OptParams object, for example: OptParams().with_model_name(...).with_uuidv5(...)

    load_brick_file(brick_file:str, bundle_paths:str, modelname:str=) -> Result { assembly(), brick_object(), errors() } 

    Load brickfile and return the BRICK model and corresponding AGX assembly

        Parameters
        ----------
        brick_file: path to the brick file
        brick_file: path to the brick file
        bundle_paths: semicolon separated list of file paths to bundles
        optional_parameters: OptParams object, for example: OptParams().with_model_name(...).with_uuidv5(...)


    """
    return _BrickAgxPyApi.load_brick_file(*args)

def serialize_brick_file(*args):
    r"""
    serialize_brick_file(std::string const & path, std::string const & bundle_paths, OptParams optional_parameters=BrickAgx::OptParams()) -> std::string

    Parameters
    ----------
    path: std::string const &
    bundle_paths: std::string const &
    optional_parameters: BrickAgx::OptParams

    """
    return _BrickAgxPyApi.serialize_brick_file(*args)

def register_bundles(brick_ctx):
    r"""
    register_bundles(BrickContext brick_ctx)

    Parameters
    ----------
    brick_ctx: Brick::Core::Api::BrickContext &

    """
    return _BrickAgxPyApi.register_bundles(brick_ctx)

def register_plugins(brick_ctx, cache=0):
    r"""
    register_plugins(BrickContext brick_ctx, std::shared_ptr< BrickAgx::AgxCache > cache=0)

    Parameters
    ----------
    brick_ctx: Brick::Core::Api::BrickContext &
    cache: std::shared_ptr< BrickAgx::AgxCache >

    """
    return _BrickAgxPyApi.register_plugins(brick_ctx, cache)

def set_log_level(log_level_name):
    r"""
    set_log_level(std::string const & log_level_name)

    Parameters
    ----------
    log_level_name: std::string const &

    """
    return _BrickAgxPyApi.set_log_level(log_level_name)

def check_if_migrate_hint_is_justified(current_version, errors):
    r"""
    check_if_migrate_hint_is_justified(std::string const & current_version, ErrorVector errors) -> std::string

    Parameters
    ----------
    current_version: std::string const &
    errors: Brick::Errors const &

    """
    return _BrickAgxPyApi.check_if_migrate_hint_is_justified(current_version, errors)

def parse_and_evaluate_string(bundle_paths, source, modelname):
    r"""
    parse_and_evaluate_string(std::string const & bundle_paths, std::string const & source, std::string const & modelname) -> std::pair< std::shared_ptr< Brick::Core::Object >,Brick::Errors >

    Parameters
    ----------
    bundle_paths: std::string const &
    source: std::string const &
    modelname: std::string const &

    """
    return _BrickAgxPyApi.parse_and_evaluate_string(bundle_paths, source, modelname)

def parseWithPlugin(arg1, key):
    r"""
    parseWithPlugin(std::shared_ptr< Brick::Plugin > arg1, std::string const & key) -> std::string

    Parameters
    ----------
    arg1: std::shared_ptr< Brick::Plugin >
    key: std::string const &

    """
    return _BrickAgxPyApi.parseWithPlugin(arg1, key)

def get_error_strings(errors):
    r"""
    get_error_strings(ErrorVector errors) -> StringVector

    Parameters
    ----------
    errors: Brick::Errors const &

    """
    return _BrickAgxPyApi.get_error_strings(errors)

def addVisuals(result, osg_root, debug_render_frames=False):
    r"""
    addVisuals(Result result, osg::Group * osg_root, bool debug_render_frames=False) -> bool

    Parameters
    ----------
    result: BrickAgx::Result
    osg_root: osg::Group *
    debug_render_frames: bool

    """
    return _BrickAgxPyApi.addVisuals(result, osg_root, debug_render_frames)

def addDeformableVisualUpdaters(result, osg_root):
    r"""
    addDeformableVisualUpdaters(Result result, osg::Group * osg_root)

    Parameters
    ----------
    result: BrickAgx::Result
    osg_root: osg::Group *

    """
    return _BrickAgxPyApi.addDeformableVisualUpdaters(result, osg_root)

def add_file_changed_listener(app, brickfile):
    r"""
    add_file_changed_listener(agxOSG::ExampleApplication * app, std::string const & brickfile)

    Parameters
    ----------
    app: agxOSG::ExampleApplication *
    brickfile: std::string const &

    """
    return _BrickAgxPyApi.add_file_changed_listener(app, brickfile)
class FileChangedListener(object):
    r"""Proxy of C++ BrickAgx::FileChangedListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file_to_track):
        r"""
        __init__(FileChangedListener self, std::string file_to_track) -> FileChangedListener

        Parameters
        ----------
        file_to_track: std::string

        """
        _BrickAgxPyApi.FileChangedListener_swiginit(self, _BrickAgxPyApi.new_FileChangedListener(file_to_track))

    def preFrame(self, app):
        r"""
        preFrame(FileChangedListener self, agxOSG::ExampleApplication * app)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *

        """
        return _BrickAgxPyApi.FileChangedListener_preFrame(self, app)

    def postFrame(self, arg2):
        r"""
        postFrame(FileChangedListener self, agxOSG::ExampleApplication * arg2)

        Parameters
        ----------
        arg2: agxOSG::ExampleApplication *

        """
        return _BrickAgxPyApi.FileChangedListener_postFrame(self, arg2)
    __swig_destroy__ = _BrickAgxPyApi.delete_FileChangedListener

# Register FileChangedListener in _BrickAgxPyApi:
_BrickAgxPyApi.FileChangedListener_swigregister(FileChangedListener)



