[tool.poetry]
name = "easytelemetry"
version = "1.0.0"
description = "Telemetry package (logging and metrics) with minimal and opinionated API using Application Insights as back-end."
authors = ["jan Dvorak <jandvorak.public@gmail.com>"]
readme = "README.md"
keywords = ["azure", "application insights", "telemetry", "logging"]
repository = "https://github.com/jdvor/easytelemetry"
license = "MIT"
packages = [
  { include = "easytelemetry" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/jdvor/easytelemetry/issues"

[tool.poetry.dependencies]
python = "^3.12"
orjson = "^3.10.11"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
atomics = "^1.0.2"
bandit = { version = "^1.7.10", extras = ["toml"] }
bumpver = "^2023.1129"
coverage = { version = "^7.6.4", extras = ["toml"] }
mypy = "^1.13.0"
pip-audit = "^2.7.3"
poethepoet = "^0.26.1"
pydocstyle = { version = "^6.3.0", extras = ["toml"] }
pyperf = "^2.8.0"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
python-dotenv = "^1.0.1"
pytest-timeout = "^2.3.1"
ruff = "^0.4.4"
types-requests = "^2.32.0.20241016"

[tool.mypy]
exclude = '^(tests|examples|benchmarks|dist)/'
python_version = "3.12"
cache_dir = ".cache/mypy/"
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = false
warn_unused_ignores = true

[tool.pytest.ini_options]
cache_dir = ".cache/pytest/"
pythonpath = [
  "easytelemetry/",
]
testpaths = [
  "tests/",
]
addopts = [
  "--cov=easytelemetry",
  "--cov-fail-under=60",
  "--cov-report=term-missing:skip-covered",
  "-ra",
  "--no-header",
  "--capture=no",
  "--strict-markers",
]
markers = [
  "slow: Slow tests",
  "integration: Integration tests using real external resources, so they may require infrastructure setup",
]

# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [
  ".venv/*",
  "tests/*",
  "*/__main__.py",
  "inmemory.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "raise NotImplementedError",
  "except DistributionNotFound",
  "TYPE_CHECKING",
]

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 120
output-format = "grouped"
target-version = "py312"

[tool.ruff.lint]
ignore = [
  "E501",    # line-too-long
  "PTH123",  # `open()` should be replaced by `Path.open()`
]
select = [
  "A",    # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # mccabe
  "E",    # pycodestyle
  "F",    # Pyflakes
  "I001", # isort
  "N",    # pep8-naming
  "NPY",  # NumPy
  "PD",   # pandas-vet
  "PIE",  # flake8-pie
  "PLE",  # Pylint Error
  "PTH",  # flake8-use-pathlib
  "RUF",  # Ruff
  "S",    # flake8-bandit
  "SIM",  # flakes8-simplify
  "T20",  # flake8-print
  "UP",   # pyupgrade
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.pydocstyle]
match_dir = "easytelemetry"
ignore = [  # https://www.pydocstyle.org/en/stable/error_codes.html
  "D102", # documentation required on all public methods, even on property setters and getters.
  "D105", # magic methods
  "D107", # __init__
  "D203", # 1 blank line required before class docstring
  "D205", # 1 blank line required between summary line and description
  "D212", # multiline docstring should start at the first line (mutualy exclusive with D213)
  "D400", # First line should end with a period
  "D415", # First line should end with a period, question mark, or exclamation point
]

[tool.poe.tasks]

[tool.poe.tasks.clean]
help = "Remove generated files (cache, test reports, etc.) to clean up the solution directory"
cmd  = """
  rm -rf .cache
         .coverage
         .mypy_cache
         .pytest_cache
         ./**/__pycache__
         dist
         htmlcov
         test-report-junit.xml
"""

[tool.poe.tasks.code]
help = "Run formating, linting and various code quality checks in a sequence"
sequence = ["format", "lintfix", "codestyle", "docstyle", "type"]

[tool.poe.tasks.format]
help = "Format the code"
cmd = "ruff format ."

[tool.poe.tasks.test]
help = "Run unit tests skipping slow and integration tests."
cmd  = "pytest -m 'not slow and not integration'"

[tool.poe.tasks.citest]
help = "Run all unit tests in CI pipeline (creates file test-report-junit.xml)"
cmd  = "pytest --junit-xml=test-report-junit.xml"

[tool.poe.tasks.type]
help = "Check typing hints"
cmd  = "mypy ."

[tool.poe.tasks.lint]
help = "Run code linter"
cmd  = "ruff check easytelemetry"

[tool.poe.tasks.lintfix]
help = "Run linter and fix issues"
cmd  = "ruff check easytelemetry --fix"

[tool.poe.tasks.codestyle]
help = "Check code style"
cmd = "ruff format --check --quiet ."

[tool.poe.tasks.docstyle]
help = "Check docstring conventions"
cmd  = "pydocstyle --config=pyproject.toml easytelemetry"

[tool.poe.tasks.security]
help = "Check code security"
sequence = ["bandit -r easytelemetry", "pip-audit --progress-spinner off"]
default_item_type = "cmd"

[tool.poe.tasks.version_and_push]
help = "Update semantic version, create git tag and push everything to remote (both changes and the tag)"
cmd  = "bumpver update"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]
