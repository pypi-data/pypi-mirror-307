# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import PlanqkServiceApiEnvironment
from .resources.service_api.client import AsyncServiceApiClient, ServiceApiClient
from .resources.status_api.client import AsyncStatusApiClient, StatusApiClient


class PlanqkServiceApi:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PlanqkServiceApiEnvironment = PlanqkServiceApiEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.status_api = StatusApiClient(client_wrapper=self._client_wrapper)
        self.service_api = ServiceApiClient(client_wrapper=self._client_wrapper)


class AsyncPlanqkServiceApi:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PlanqkServiceApiEnvironment = PlanqkServiceApiEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.status_api = AsyncStatusApiClient(client_wrapper=self._client_wrapper)
        self.service_api = AsyncServiceApiClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: PlanqkServiceApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
