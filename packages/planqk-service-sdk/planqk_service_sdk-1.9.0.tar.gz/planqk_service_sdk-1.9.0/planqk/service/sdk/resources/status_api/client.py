# This file was auto-generated by Fern from our API Definition.

from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .types.health_check_response import HealthCheckResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class StatusApiClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def health_check(self) -> HealthCheckResponse:
        """
        Checks the health of the service.

        ---
        from planqk-service.client import PlanqkServiceApi

        client = PlanqkServiceApi(token="YOUR_TOKEN", )
        client.status_api.health_check()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET", self._client_wrapper.get_base_url(), headers=self._client_wrapper.get_headers(), timeout=60
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(HealthCheckResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncStatusApiClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def health_check(self) -> HealthCheckResponse:
        """
        Checks the health of the service.

        ---
        from planqk-service.client import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(token="YOUR_TOKEN", )
        await client.status_api.health_check()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET", self._client_wrapper.get_base_url(), headers=self._client_wrapper.get_headers(), timeout=60
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(HealthCheckResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
