{"version":3,"sources":["AntTree.tsx","index.tsx"],"names":["find_dropdown","id","dropdown","Array","from","document","getElementsByClassName","height_of_dropdown","forEach","element","height","offsetHeight","withStreamlitConnection","props","useState","undefined","value","setValue","args","treeData","allowClear","bordered","max_height","width_dropdown","disabled","filterTreeNode","dropdownStyle","multiple","placeholder","placement","showArrow","showSearch","treeCheckable","treeDefaultExpandAll","treeDefaultExpandedKes","treeLine","on_change","on_select","on_search","defaultValue","min_height_dropdown","maxTagCount","key","useEffect","Streamlit","setFrameHeight","on_change_func","Function","on_select_func","on_search_func","defaultValue_tree","treeData_copy","loop_through_treeData","input","title","parse","replace","domNode","Element","attribs","class","children","treeDefaultExpandedKeys","style","width","marginTop","onSearch","newValue","onSelect","maxHeight","overflow","onChange","setComponentValue","onDropdownVisibleChange","setTimeout","current_state","getElementById","getAttribute","getAriaControls","console","log","set_height","onTreeExpand","onClear","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9aa500bf.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n\r\n} from \"streamlit-component-lib\";\r\n\r\nimport { TreeSelect } from 'antd';\r\nimport parse, { domToReact, htmlToDOM, Element } from 'html-react-parser';\r\n\r\nconst parser = (input: string) =>\r\n  parse(input, {\r\n    replace: domNode => {\r\n      if (domNode instanceof Element && domNode.attribs.class === 'remove') {\r\n        return <></>;\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n\r\n//function that takes the id of an element an return its aria controls\r\nfunction getAriaControls(id: string) {\r\n  //check if the element hast the attribute aria-expanded\r\n\r\n  if (document.getElementById(id)?.getAttribute(\"aria-expanded\") == null) {\r\n    return \"first_time\";\r\n  }\r\n  else {\r\n\r\n  return document.getElementById(id)?.getAttribute(\"aria-expanded\");\r\n  }\r\n\r\n}\r\n\r\nfunction find_dropdown(id: string) {\r\n\r\n  //return all elements that contain the class ant-select-dropdown\r\n\r\n  var dropdown = Array.from(document.getElementsByClassName(\"ant-select-dropdown\"));\r\n\r\n  //get the height of the dropdown\r\n\r\n  var height_of_dropdown = 0;\r\n  dropdown.forEach((element) => {\r\n    var height = (element as HTMLElement).offsetHeight;\r\n\r\n    //if height is an integer return it\r\n    if (height) {\r\n      //test integer\r\n      if (height % 1 === 0) {\r\n        height_of_dropdown = height;\r\n      }\r\n    }\r\n  });\r\n\r\n  height_of_dropdown = height_of_dropdown + 100;\r\n\r\n  return height_of_dropdown;\r\n  }\r\n\r\n\r\n\r\nconst TreeComponent = (props: ComponentProps) => {\r\n  const [value, setValue] = useState<string | undefined>(undefined);\r\n\r\n  const {treeData, allowClear, bordered, max_height, width_dropdown, disabled,\r\n    dropdownStyle,filterTreeNode,multiple, placeholder, placement,\r\n    showArrow, showSearch, treeCheckable, treeDefaultExpandAll, treeDefaultExpandedKes,\r\n    treeLine, on_change, on_select, on_search, defaultValue, min_height_dropdown, maxTagCount, key} = props.args;\r\n\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n  }, []);\r\n\r\n\r\n\r\n  const onDropdownVisibleChange = () => {\r\n\r\n    setTimeout(function() {\r\n\r\n      var current_state = getAriaControls(key)\r\n      var height = find_dropdown(key) \r\n\r\n    //if height is 0 set it to 50 \r\n    console.log(\"State\", current_state)\r\n    var set_height = 0;\r\n\r\n    if (height < min_height_dropdown) {\r\n      set_height = min_height_dropdown;\r\n    }\r\n    else {\r\n      set_height = height;\r\n\r\n    }\r\n\r\n    if (current_state == \"true\") {\r\n      Streamlit.setFrameHeight(set_height);\r\n    }\r\n    else {\r\n      Streamlit.setFrameHeight(min_height_dropdown);\r\n    }\r\n    }, 1);\r\n\r\n  };\r\n\r\n\r\n  if (on_change) {\r\n    var on_change_func = Function(on_change);\r\n  }\r\n  else {\r\n    var on_change_func = Function();\r\n  }\r\n\r\n  if (on_select) {\r\n    var on_select_func = Function(on_select);\r\n  }\r\n  else {\r\n    var on_select_func = Function();\r\n  }\r\n\r\n  if (on_search) {\r\n    var on_search_func = Function(on_search);\r\n  }\r\n  else {\r\n    var on_search_func = Function();\r\n  }\r\n\r\n  if (defaultValue) {\r\n    var defaultValue_tree = defaultValue;\r\n  }\r\n  else {\r\n    var defaultValue_tree = undefined;\r\n  }\r\n\r\n  \r\n  const onChange = (newValue: string) => {\r\n    setValue(newValue);\r\n    Streamlit.setComponentValue(newValue);\r\n    on_change_func();\r\n  };\r\n\r\n  const onSelect = (newValue: string) => {\r\n    on_select_func();\r\n  };\r\n\r\n  const onSearch = (newValue: string) => {\r\n    on_search_func();\r\n  };\r\n\r\n\r\n  function onTreeExpand_func() {\r\n    //wait one seconds than execute find_dropdown\r\n    var height = find_dropdown(key);\r\n    //timeout Function weil HTML Keys nicht schnell genug geupdatet werden..\r\n    setTimeout(function() {\r\n      height = find_dropdown(key)\r\n\r\n      var set_height = 0;\r\n\r\n      if (height == 0) {\r\n        set_height = min_height_dropdown;\r\n      }\r\n      else {\r\n        set_height = height;\r\n      }\r\n      Streamlit.setFrameHeight(set_height);\r\n    }, 1);\r\n\r\n  }\r\n\r\n  //loop through treeData and parse html title for each element\r\n  var treeData_copy = treeData;\r\n\r\n\r\n\r\n  function loop_through_treeData(treeData_copy: any) {\r\n    treeData_copy.forEach((element: any) => {\r\n      //if element.title is a string\r\n      if (element.title && typeof element.title === \"string\")\r\n      {\r\n        element.title = parser(element.title)\r\n      }\r\n\r\n      //detect how many children the element has if those have children too without looping through them all \r\n      if (element.children) {\r\n        //if the element has children loop through them\r\n        loop_through_treeData(element.children)\r\n      }\r\n    });\r\n\r\n  }\r\nloop_through_treeData(treeData_copy)\r\n\r\n\r\n\r\n  return (\r\n    <TreeSelect\r\n      id  = {key}\r\n      showSearch = {showSearch}\r\n      showArrow = {showArrow}\r\n      filterTreeNode = {filterTreeNode}\r\n      multiple = {multiple}\r\n      disabled = {disabled}\r\n      treeCheckable = {treeCheckable}\r\n      treeLine = {treeLine}\r\n      treeDefaultExpandedKeys = {treeDefaultExpandedKes}\r\n      placement = {placement}\r\n      style={{ width: width_dropdown, marginTop: \"10px\" }}\r\n      onSearch={onSearch}\r\n      onSelect={onSelect}\r\n      defaultValue={defaultValue_tree}\r\n      value={value}\r\n      dropdownStyle={{ maxHeight: max_height, overflow: 'auto', width: width_dropdown }}\r\n      placeholder= {placeholder}\r\n      allowClear = {allowClear}\r\n      treeDefaultExpandAll = {treeDefaultExpandAll}\r\n      onChange={onChange}\r\n      treeData={treeData_copy}\r\n      onDropdownVisibleChange={onDropdownVisibleChange}\r\n      onTreeExpand = {onTreeExpand_func}\r\n      //onTreeLoad = {onTreeLoad_f}\r\n      maxTagCount = {maxTagCount}\r\n      onClear = {() => {Streamlit.setComponentValue(undefined)}}\r\n\r\n      //on clear\r\n      bordered = {bordered}\r\n\r\n\r\n    />\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default withStreamlitConnection(TreeComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TreeComponent from \"./AntTree\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TreeComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}