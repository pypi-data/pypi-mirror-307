{"version":3,"sources":["AntTree.tsx","index.tsx"],"names":["find_dropdown","dropdown","Array","from","document","getElementsByClassName","height_of_dropdown","forEach","element","height","offsetHeight","withStreamlitConnection","props","useState","undefined","value","setValue","args","treeData","allowClear","bordered","max_height","width_dropdown","disabled","multiple","placeholder","status","showArrow","showSearch","treeCheckable","treeDefaultExpandAll","treeDefaultExpandedKeys","treeLine","on_select","on_change","on_search","defaultValue","min_height_dropdown","maxTagCount","key","only_children_select","treeDefaultSelectedKeys","overall_css","useEffect","Streamlit","setFrameHeight","on_select_func","Function","on_search_func","defaultValue_tree","loop_through_treeData","input","title","parse","replace","domNode","Element","attribs","class","children","dangerouslySetInnerHTML","__html","id","placement","style","width","marginTop","onSearch","onSelect","dropdownStyle","maxHeight","overflow","dropdownAlign","offset","onChange","newValue","setComponentValue","onDropdownVisibleChange","setTimeout","current_state","getElementById","getAttribute","getAriaControls","set_height","onTreeExpand","onClear","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.17d6c2c5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n\r\n} from \"streamlit-component-lib\";\r\n\r\n\r\nimport { TreeSelect } from 'antd';\r\nimport parse, {Element } from 'html-react-parser';\r\n\r\ninterface TreeNode {\r\n  title: string | JSX.Element;\r\n  key: string;\r\n  disabled?: boolean;\r\n  children?: TreeNode[];\r\n  style?: React.CSSProperties; // Optional style object for custom styling\r\n}\r\n\r\n//parser to parse the html from the strings in treeData\r\nconst parser = (input: string) =>\r\n  parse(input, {\r\n    replace: domNode => {\r\n      if (domNode instanceof Element && domNode.attribs.class === 'remove') {\r\n        return <></>;\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n//function that takes the id of an element an return its aria controls -> Used to track wether the dropdown is open or not\r\nfunction getAriaControls(id: string) {\r\n  //check if the element hast the attribute aria-expanded\r\n\r\n  if (document.getElementById(id)?.getAttribute(\"aria-expanded\") == null) {\r\n    return \"first_time\";\r\n  }\r\n  else {\r\n  return document.getElementById(id)?.getAttribute(\"aria-expanded\");\r\n  }\r\n\r\n}\r\n\r\nfunction find_dropdown() {\r\n//function to get the height of the dropdown\r\n\r\n  var dropdown = Array.from(document.getElementsByClassName(\"ant-select-dropdown\"));\r\n\r\n  var height_of_dropdown = 0;\r\n  dropdown.forEach((element) => {\r\n  var height = (element as HTMLElement).offsetHeight;\r\n\r\n    //if height is an integer return it\r\n    if (height) {\r\n      //test integer\r\n      if (height % 1 === 0) {\r\n        height_of_dropdown = height;\r\n      }\r\n    }\r\n  });\r\n\r\n  height_of_dropdown = height_of_dropdown + 100;\r\n\r\n  return height_of_dropdown;\r\n  }\r\n\r\n\r\n////Tree Component////\r\nconst TreeComponent = (props: ComponentProps) => {\r\n  const [value, setValue] = useState<string | undefined>(undefined);\r\n  const [searchValue, setSearchValue] = useState('');\r\n\r\n\r\n  const {\r\n    treeData, allowClear, bordered, max_height, width_dropdown, disabled,\r\n     multiple, placeholder, status, showArrow, showSearch,\r\n    treeCheckable, treeDefaultExpandAll, treeDefaultExpandedKeys, treeLine,\r\n    on_change, on_select, on_search, defaultValue, min_height_dropdown,\r\n    maxTagCount, key, treeDefaultSelectedKeys, only_children_select, overall_css\r\n  } = props.args;\r\n  \r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n  }, []);\r\n\r\n\r\n  const filterTreeNode = (inputValue: string, treeNode: unknown): boolean => {\r\n    const node = treeNode as { title: string; value: string; children?: any[] };\r\n    const searchString = inputValue.toLowerCase();\r\n    return node.title.toLowerCase().includes(searchString) ||\r\n           node.value.toLowerCase().includes(searchString);\r\n  };\r\n  \r\n\r\n\r\n  //Everything the the dropdown visibility changes the height of the component must change as well\r\n  const onDropdownVisibleChange = () => {\r\n\r\n    setTimeout(function() {\r\n      var current_state = getAriaControls(key)\r\n      var height = find_dropdown() \r\n    //if height is 0 set it to 50 \r\n    var set_height = 0;\r\n    if (height < min_height_dropdown) {\r\n      set_height = min_height_dropdown;\r\n    }\r\n    else {\r\n      set_height = height;\r\n    }\r\n    if (current_state == \"true\") {\r\n      Streamlit.setFrameHeight(set_height);\r\n    }\r\n    else {\r\n      Streamlit.setFrameHeight();\r\n     // Streamlit.setFrameHeight(min_height_dropdown);\r\n    }\r\n    }, 1);\r\n  };\r\n\r\n\r\n  // if (on_change) {\r\n  //   var on_change_func = Function(on_change);\r\n  // }\r\n  // else {\r\n  //   var on_change_func = Function();\r\n  // }\r\n\r\n  if (on_select) {\r\n    var on_select_func = Function(on_select);\r\n  }\r\n  else {\r\n    var on_select_func = Function();\r\n  }\r\n\r\n  if (on_search) {\r\n    var on_search_func = Function(on_search);\r\n  }\r\n  else {\r\n    var on_search_func = Function();\r\n  }\r\n\r\n  if (defaultValue) {\r\n    var defaultValue_tree = defaultValue;\r\n  }\r\n  else {\r\n    var defaultValue_tree = undefined;\r\n  }\r\n\r\n  \r\n  const onChange = (newValue: string) => {\r\n    setValue(newValue);\r\n    Streamlit.setComponentValue(newValue);\r\n   // on_change_func();\r\n  };\r\n\r\n  const onSelect = () => {\r\n    on_select_func();\r\n  };\r\n\r\n  const onSearch = () => {\r\n    on_search_func();\r\n  };\r\n\r\n\r\n  function onTreeExpand_func() {\r\n    //wait one seconds than execute find_dropdown\r\n    //timeout Function weil HTML Keys nicht schnell genug geupdatet werden..\r\n    setTimeout(function() {\r\n      var height = find_dropdown()\r\n\r\n      var set_height = 0;\r\n\r\n      if (height == 0) {\r\n        set_height = min_height_dropdown;\r\n      }\r\n      else {\r\n        set_height = height;\r\n      }\r\n      Streamlit.setFrameHeight(set_height);\r\n    }, 1);\r\n\r\n  }\r\n\r\n  //function to loop through treeData and parse the html if necessary\r\n//   function loop_through_treeData(treeData: any) {\r\n//     treeData.forEach((element: any) => {\r\n//       //if element.title is a string\r\n//       if (element.title && typeof element.title === \"string\")\r\n//       {\r\n//         element.title = parser(element.title)\r\n//       }\r\n\r\n//       //detect how many children the element has if those have children too without looping through them all \r\n//       if (element.children) {\r\n//         //if the element has children loop through them\r\n//         loop_through_treeData(element.children)\r\n//       }\r\n//     });\r\n\r\n//   }\r\n// loop_through_treeData(treeData)\r\n\r\n // Function to loop through treeData and modify it as necessary\r\n// Function to loop through treeData and modify it as necessary\r\n// Parser to ensure the output is either a string or a single JSX Element\r\n\r\nloop_through_treeData(treeData)\r\n\r\nfunction loop_through_treeData(treeData: any) {\r\n  treeData.forEach((element: any) => {\r\n    //if element.title is a string\r\n    if (element.title && typeof element.title === \"string\")\r\n    {\r\n      element.title = parser(element.title)\r\n    }\r\n\r\n    //detect how many children the element has if those have children too without looping through them all \r\n    if (element.children) {\r\n      //if the element has children loop through them\r\n      if (only_children_select) {\r\n        element.disabled = true;\r\n      }\r\n      loop_through_treeData(element.children)\r\n    }\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    <style dangerouslySetInnerHTML={{ __html: overall_css }} />\r\n    <TreeSelect\r\n      id  = {key}\r\n      showSearch = {showSearch}\r\n      showArrow = {showArrow}\r\n     // filterTreeNode = {filterTreeNode}\r\n      multiple = {multiple}\r\n      disabled = {disabled}\r\n      treeCheckable = {treeCheckable}\r\n      treeLine = {treeLine}\r\n      status= {status}\r\n      treeDefaultExpandedKeys = {treeDefaultExpandedKeys}\r\n      placement = \"bottomLeft\"\r\n      style={{ width: width_dropdown, marginTop: \"10px\" }}\r\n      onSearch={onSearch}\r\n      onSelect={onSelect}\r\n      defaultValue={defaultValue_tree}\r\n      value={value}\r\n      dropdownStyle={{ maxHeight: max_height, overflow: 'auto', width: width_dropdown }}\r\n      dropdownAlign = {{offset: [0, 0]}}\r\n      placeholder= {placeholder}\r\n      allowClear = {allowClear}\r\n      treeDefaultExpandAll = {treeDefaultExpandAll}\r\n      onChange={onChange}\r\n      treeData={treeData}\r\n      onDropdownVisibleChange={onDropdownVisibleChange}\r\n      onTreeExpand = {onTreeExpand_func}\r\n      maxTagCount = {maxTagCount}\r\n      onClear = {() => {Streamlit.setComponentValue(undefined)}}\r\n\r\n      //on clear\r\n      bordered = {bordered}\r\n\r\n      \r\n    />\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\n\r\n\r\nexport default withStreamlitConnection(TreeComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TreeComponent from \"./AntTree\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TreeComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}