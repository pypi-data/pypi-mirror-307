import argparse
import logging
import os
from pathlib import Path
from subprocess import check_call

from ..constants import HHANDROID_SOCKET_PATH
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..utils import print_err

logger = logging.getLogger(__name__)

DESKTOP_ENTRY = f"""[Desktop Entry]
Name=hhandroid protocol handler
Exec=sh -c 'printf %u | socat UNIX-CONNECT:{HHANDROID_SOCKET_PATH} -'
Type=Application
Terminal=false
MimeType=x-scheme-handler/hhandroid
"""


class Namespace(BaseNamespace):
    force: bool


class Operation(BaseOperation):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ hhandroid, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument(
            "-f",
            "--force",
            help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            default=False,
            action=argparse.BooleanOptionalAction,
        )

    def run(self, args: Namespace) -> None:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ WSL
        if self.is_wsl():
            print_err("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ WSL üí©. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–≤—Å–µ.")
            print_err("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö Linux-—Å–∏—Å—Ç–µ–º–∞—Ö.")
            return 1

        # TODO: —Å root –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        desktop_path = Path(
            "~/.local/share/applications/hhandroid.desktop"
        ).expanduser()
        if args.force or not desktop_path.exists():
            desktop_path.write_text(DESKTOP_ENTRY)
            logger.info("saved %s", desktop_path)
            check_call(["update-desktop-database", str(desktop_path.parent)])
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            print_err("‚õî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return 1

    def is_wsl(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ WSL."""
        return "WSL_DISTRO_NAME" in os.environ
