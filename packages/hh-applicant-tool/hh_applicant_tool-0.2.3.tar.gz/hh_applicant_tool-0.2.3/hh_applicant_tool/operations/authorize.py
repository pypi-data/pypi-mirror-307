import argparse
import logging
import socketserver
import subprocess
import time
from pathlib import Path
from urllib.parse import parse_qs, urlsplit

from ..api import OAuthClient
from ..constants import HHANDROID_SOCKET_PATH
from ..main import BaseOperation, Namespace
from ..utils import Config

logger = logging.getLogger(__package__)


class HHAndroidProtocolServer(socketserver.ThreadingUnixStreamServer):
    def __init__(
        self,
        socket_path: Path | str,
        oauth_client: OAuthClient,
        config: Config,
    ) -> None:
        self._socket_path = Path(socket_path)
        self._oauth_client = oauth_client
        self._config = config
        super().__init__(str(self._socket_path), HHAndroidProtocolHandler)

    def server_bind(self) -> None:
        self._socket_path.parent.mkdir(parents=True, exist_ok=True)
        self._socket_path.unlink(missing_ok=True)
        return super().server_bind()

    def server_close(self) -> None:
        self._socket_path.unlink()
        return super().server_close()

    def handle_redirect_uri(self, redirect_uri: str) -> None:
        logger.debug(redirect_uri)
        sp = urlsplit(redirect_uri)
        assert sp.scheme == "hhandroid"
        assert sp.netloc == "oauthresponse"
        code = parse_qs(sp.query)["code"][0]
        token = self._oauth_client.authenticate(code)
        logger.debug("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω")
        # —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫–∏—Ö-—Ç–æ –º–µ—Ç–æ–∫ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        self._config.save(token=dict(token, created_at=int(time.time())))
        print("üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        self.shutdown()


class HHAndroidProtocolHandler(socketserver.BaseRequestHandler):
    def handle(self) -> None:
        self.server.handle_redirect_uri(self.request.recv(1024).decode())


class Operation(BaseOperation):
    """–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ"""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        pass

    def run(self, args: Namespace) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ socat
        if not self.is_socat_installed():
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: socat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å unix-—Å–æ–∫–µ—Ç–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å socat.")
            print()
            print("–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å socat —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:")
            print()
            print("  - Debian/Ubuntu: sudo apt-get install socat")
            print("  - Fedora: sudo dnf install socat")
            print("  - Arch/Manjaro: sudo pacman -S socat")
            print()

        oauth = OAuthClient(
            user_agent=(
                args.config["oauth_user_agent"] or args.config["user_agent"]
            ),
        )
        print("–ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ:", oauth.authorize_url)
        subprocess.Popen(["xdg-open", oauth.authorize_url])
        print("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ <–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å>")
        logger.info(
            "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º TCP-—Å–µ—Ä–≤–µ—Ä –∏ —Å–ª—É—à–∞–µ–º unix://%s", HHANDROID_SOCKET_PATH
        )
        server = HHAndroidProtocolServer(
            HHANDROID_SOCKET_PATH, oauth_client=oauth, config=args.config
        )
        server.serve_forever()

    def is_socat_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ socat –≤ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            subprocess.run(["socat", "-h"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return True
        except FileNotFoundError:
            return False
