[build-system]
requires = [ "hatchling" ]
build-backend = "hatchling.build"

[project]
name = "pymdown-ietflinks"
version = "0.0.0"
description = "Easily link to IETF documentation from within MarkDown"
readme = "README.md"
requires-python = ">=3.12"
license = { file = "LICENSE" }
authors = [ { name = "Dave Shawley", email = "daveshawley@gmail.com" } ]
dependencies = [ "markdown>=3.7,<4" ]
classifiers = [
	"Intended Audience :: Developers",
	"License :: OSI Approved :: BSD License",
	"Operating System :: OS Independent",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
	"Development Status :: 1 - Planning",
	"Topic :: Text Processing",
	"Typing :: Typed"
]

[project.entry-points."markdown.extensions"]
ietflinks = "ietflinks.main:IetfLinksExtension"

[project.urls]
"Source Code" = "https://github.com/dave-shawley/pymdown-ietf"

[tool.hatch.build.targets.sdist]
include = [
	"/ietflinks",
	"/.pre-commit-config.yaml",
	"/AUTHORS.md",
	"/CHANGELOG.md",
	"/CODE_OF_CONDUCT.md",
	"/CONTRIBUTING.md",
]

[tool.hatch.build.targets.wheel]
packages = [ "ietflinks" ]

[tool.hatch.envs.default]
python = "3.12"
dependencies = [
	"mypy>=1.13,<2",
	"pre-commit>=4,<5",
	"ruff>=0.7,<1",
	"types-markdown",
	"types-requests",
]

[tool.hatch.envs.default.scripts]
ci = [
	"ruff format",
	"ruff check",
	"mypy",
]

[tool.mypy]
mypy_path = []
strict = true
packages = "ietflinks"

[tool.ruff]
line-length = 79

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
	"COM812",	# conflicts with ruff formatter
	"D203",		# need to select between D203 and D211 for formatter
	"D213",		# need to select between D212 and D213 for formatter
	"ISC001",	# conflicts with ruff formatter

	"ANN101",	# type annotation not required for `self`
	"ANN102",	# type annotation not required for `cls`
	"D100",		# No need for module level docstrings
	"D104",		# No need for docstring at the package level
	"D105",		# No need for docstrings in magic methods
	"D107",		# __init__ params are in the class docstring
	"N818",		# Exception class names don't end in "Error"
	"PT",   	# I don't like pytest conventions
	"EM101",	# Passing literal messages in raise is fine
	"EM102",	# Passing f-strings in raise is fine
	"TRY003",	# Passing literal messages in raise is fine
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
	"D",    	# tests don't require docs
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
