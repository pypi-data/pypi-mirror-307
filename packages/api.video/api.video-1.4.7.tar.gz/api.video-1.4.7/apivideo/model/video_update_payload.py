"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.  # noqa: E501

    Contact: ecosystem@api.video
"""


import re  # noqa: F401
import sys  # noqa: F401

from apivideo.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from apivideo.model.metadata import Metadata
    globals()['Metadata'] = Metadata


class VideoUpdatePayload(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('language',): {
            'None': None,
            'AR': "ar",
            'CA': "ca",
            'CS': "cs",
            'DA': "da",
            'DE': "de",
            'EL': "el",
            'EN': "en",
            'ES': "es",
            'FA': "fa",
            'FI': "fi",
            'FR': "fr",
            'HE': "he",
            'HI': "hi",
            'HR': "hr",
            'HU': "hu",
            'IT': "it",
            'JA': "ja",
            'KO': "ko",
            'ML': "ml",
            'NL': "nl",
            'NN': "nn",
            'FALSE': "false",
            'PL': "pl",
            'PT': "pt",
            'RU': "ru",
            'SK': "sk",
            'SL': "sl",
            'TE': "te",
            'TR': "tr",
            'UK': "uk",
            'UR': "ur",
            'VI': "vi",
            'ZH': "zh",
        },
        ('transcript_summary_attributes',): {
            'ABSTRACT': "abstract",
            'TAKEAWAYS': "takeaways",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'player_id': (str, type(None),),  # noqa: E501
            'title': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'public': (bool,),  # noqa: E501
            'panoramic': (bool,),  # noqa: E501
            'mp4_support': (bool,),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'metadata': ([Metadata],),  # noqa: E501
            'language': (str, none_type,),  # noqa: E501
            'transcript': (bool,),  # noqa: E501
            'transcript_summary': (bool,),  # noqa: E501
            'transcript_summary_attributes': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'player_id': 'playerId',  # noqa: E501
        'title': 'title',  # noqa: E501
        'description': 'description',  # noqa: E501
        'public': 'public',  # noqa: E501
        'panoramic': 'panoramic',  # noqa: E501
        'mp4_support': 'mp4Support',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'language': 'language',  # noqa: E501
        'transcript': 'transcript',  # noqa: E501
        'transcript_summary': 'transcriptSummary',  # noqa: E501
        'transcript_summary_attributes': 'transcriptSummaryAttributes',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """VideoUpdatePayload - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            player_id (str): The unique ID for the player you want to associate with your video.. [optional]  # noqa: E501
            title (str): The title you want to use for your video.. [optional]  # noqa: E501
            description (str): A brief description of the video.. [optional]  # noqa: E501
            public (bool): Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos/).. [optional]  # noqa: E501
            panoramic (bool): Whether the video is a 360 degree or immersive video.. [optional]  # noqa: E501
            mp4_support (bool): Whether the player supports the mp4 format.. [optional]  # noqa: E501
            tags ([str]): A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.. [optional]  # noqa: E501
            metadata ([Metadata]): A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video.. [optional]  # noqa: E501
            language (str, none_type): Use this parameter to set the language of the video. When this parameter is set, the API creates a transcript of the video using the language you specify. You must use the [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.  `language` is a permanent attribute of the video. You can update it to another language using the [`PATCH /videos/{videoId}`](https://docs.api.video/reference/api/Videos#update-a-video-object) operation. This triggers the API to generate a new transcript using a different language.. [optional]  # noqa: E501
            transcript (bool): Use this parameter to enable transcription.   - When `true`, the API generates a transcript for the video. - The default value is `false`. - If you define a video language using the `language` parameter, the API uses that language to transcribe the video. If you do not define a language, the API detects it based on the video.  - When the API generates a transcript, it will be available as a caption for the video.. [optional]  # noqa: E501
            transcript_summary (bool): Use this parameter to enable summarization.   - When `true`, the API generates a summary for the video, based on the transcription. - The default value is `false`. - If you define a video language using the `language` parameter, the API uses that language to summarize the video. If you do not define a language, the API detects it based on the video.. [optional]  # noqa: E501
            transcript_summary_attributes ([str]): Use this parameter to define the elements of a summary that you want to generate. If you do not define this parameter, the API generates a full summary with all attributes.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
