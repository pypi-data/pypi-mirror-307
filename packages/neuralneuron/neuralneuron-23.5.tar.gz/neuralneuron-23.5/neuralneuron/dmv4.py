def b4():
    print("""# -*- coding: utf-8 -*-
'Data_Wrangling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ChlGv90spSwY9qYy6ZSCPFrZFRVV9g9
'

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

'# Loading Dataset and Checking columns names
+ whitespaces
+ irrelevent names
'

data = pd.read_csv("Bengaluru_House_Data.csv")
data

data.columns

'# Changing name of columns
+ bath -> Bathrooms
+ price -> Price (Lakhs)
'

data.rename(columns={
    'bath' : 'Bathrooms',
    "price" : "Price (Lakhs)"
},inplace=True)
data

data.columns

'# Handling missing values'

data.isnull().sum()

dataset = data.dropna()
dataset.isnull().sum()

'# Filter and subset the data based of specific Criteria'

unique, counts,= np.unique(data['area_type'], return_counts=True)
print(f"unique : \n{unique} And Count : \n{counts}")

df = data.drop(['area_type','availability','society'], axis='columns')
df

'# Handing categorical data'

df['size'].unique()

df['size'] = df['size'].fillna("1 BHK")

df['BHK'] = df['size'].apply(lambda x: int(x.split(' ')[0]))
df['BHK']

'# Removing column size'

df = df.drop(['size'],axis='columns')
df

'# Aggregate the data to calculate summary statistics or derived metrics such as average sale prices by neighborhood or property type.'

avg_price_by_location = df.groupby('location')['Price (Lakhs)'].mean().reset_index()
print(avg_price_by_location)

'# summary statistics'

df.describe()

'# Identify and handle outliers or extreme values in the data that may affect the analysis or modeling process.
+ Price (Lakhs)
+ Bathrooms
+ BHK
'

Q1 = df['Price (Lakhs)'].quantile(0.25)
Q3 = df['Price (Lakhs)'].quantile(0.75)

IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Identify outliers
outliers = df[(df['Price (Lakhs)'] < lower_bound) | (df['Price (Lakhs)'] > upper_bound)]

# Create a boxplot to visualize outliers
fig, axes = plt.subplots(1, 2, figsize=(16, 5))
sns.boxplot(x=df['Price (Lakhs)'], ax=axes[0], color="skyblue")
axes[0].set_title('With Outliers [Price (Lakhs)]')

# Boxplot without outliers
df_clean = df[(df['Price (Lakhs)'] >= lower_bound) & (df['Price (Lakhs)'] <= upper_bound)]
sns.boxplot(x=df_clean['Price (Lakhs)'], color="salmon")
axes[1].set_title('Without Outliers [Price (Lakhs)]')
plt.show()

Q1 = df['Bathrooms'].quantile(0.25)
Q3 = df['Bathrooms'].quantile(0.75)

IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Identify outliers
outliers = df[(df['Bathrooms'] < lower_bound) | (df['Bathrooms'] > upper_bound)]

# Create a boxplot to visualize outliers
fig, axes = plt.subplots(1, 2, figsize=(16, 5))
sns.boxplot(x=df['Bathrooms'], ax=axes[0], color="skyblue")
axes[0].set_title('With Outliers [Bathrooms]')

# Boxplot without outliers
df_clean = df[(df['Bathrooms'] >= lower_bound) & (df['Bathrooms'] <= upper_bound)]
sns.boxplot(x=df_clean['Bathrooms'], color="salmon")
axes[1].set_title('Without Outliers [Bathrooms]')
plt.show()

Q1 = df['BHK'].quantile(0.25)
Q3 = df['BHK'].quantile(0.75)

IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers = df[(df['BHK'] < lower_bound) | (df['BHK'] > upper_bound)]

fig, axes = plt.subplots(1, 2, figsize=(16, 5))
sns.boxplot(x=df['BHK'], ax=axes[0], color="skyblue")
axes[0].set_title('With Outliers [BHK]')

# Boxplot without outliers
df_clean = df[(df['BHK'] >= lower_bound) & (df['BHK'] <= upper_bound)]
sns.boxplot(x=df_clean['BHK'], ax=axes[1], color="salmon")
axes[1].set_title('Without Outliers [BHK]')
plt.show()

""")
b4()
