def b2():
    print("""# -*- coding: utf-8 -*-
'OpenWeather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOWJTkF_Nb8TP31Kc01ktSd0RT-BcZ9R

# Importing Required Libraries
'

import requests,datetime,json
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

'# Api Setup'

API_KEY = "8d9579bad99e253139a746fe370c2344"
location = "Tokyo,JP"
api_url = f"http://api.openweathermap.org/data/2.5/forecast?q={location}&appid={API_KEY}&units=metric"

'# Interacting with OpenWeatherApi'

response = requests.get(api_url)
weather_data = response.json()
weather_data['list'][0]['weather'][0]['description']
print(json.dumps(weather_data,indent=4))

'# Extracting relevant weather attributes : Temperature, humidity, wind speed, precipitation, description and Timestamp'

Temperature = [data['main']['temp'] for data in weather_data['list']]
Humidity = [data['main']['humidity'] for data in weather_data['list']]
Description = [data['weather'][0]['description'] for data in weather_data['list']]
wind_speed = [data['wind']['speed'] for data in weather_data['list']]
timestamps = [data['dt'] for data in weather_data['list']]
Pressure = [data['main']['pressure'] for data in weather_data['list']]

'# Making DataFrame, Cleaning : Handing missing values if any'

date = pd.to_datetime(timestamps, unit='s')

weather_df = pd.DataFrame(
    {
        "Dates" : date,
        "Temperature" : Temperature,
        "Humidity" : Humidity,
        "wind_speed" : wind_speed,
        "Pressure" : Pressure,
        "Description" : Description
    }
)

weather_df

weather_df.isnull().sum()

'# Perform Data Modeling to Analyze weather patttern, such as average temperature, Maximum temperature, Minimum temperature'

avg_temperature = weather_df['Temperature'].mean()
min_temperature = weather_df['Temperature'].min()
max_temperature = weather_df['Temperature'].max()
print("+----- Weather Pattern -------+")
print(f"| Average Temperature : {avg_temperature:.2f} |")
print(f"| Minimum Temperature : {min_temperature} |")
print(f"| Maximum Temperature : {max_temperature} |")
print("+-----------------------------+")

'# Data Aggregation techniques to summarize weather statistics by specific time periods
+ Daily
+ Monthly
+ Seasonal
'

weather_df.set_index('Dates', inplace=True)

temperature_daily = weather_df['Temperature'].resample('D').mean()
temperature_Montly = weather_df['Temperature'].resample('ME').mean()
temperature_Seasonal = weather_df['Temperature'].resample('QE').mean()

print("+------- Data Aggregation : Temperature [Daily]  ------------+")
print(temperature_daily)
print("\n+------- Data Aggregation : Temperature [Monthly]  ------------+")
print(temperature_Montly)
print("\n+------- Data Aggregation : Temperature [Seasonal]  ------------+")
print(temperature_Seasonal)

'# Visualize the Weather Data - Mean of daily Temperature'

plt.figure(figsize=(10, 6))
temperature_daily.plot(color='Blue', linestyle='-', marker='o')
plt.title('Mean Daily Temperature')
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.grid(True)
plt.show()

'# Visualize the Weather Data - Mean of daily Humidity'

humidity_daily = weather_df['Humidity'].resample('D').mean()

plt.figure(figsize=(10, 6))
humidity_daily.plot(color='purple', kind='bar')
plt.title('Mean Daily Humidity')
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.grid(True)
plt.show()

'# Visualize Relationship between weather attributes'

correlation_matrix = weather_df[['Temperature','Humidity','wind_speed','Pressure']].corr()
sns.heatmap(correlation_matrix,fmt='.2f',annot=True,cmap='magma',square=True)
plt.figure(figsize=(10,5))
plt.show()

data_compare = weather_df[['Temperature','Humidity']]
plt.figure(figsize=(15,20))
plt.title("Temperature and Humidity Relationship")
sns.heatmap(data_compare,cmap='magma',annot=True)
plt.show()

plt.scatter(weather_df['Temperature'], weather_df['Humidity'],color="purple")
plt.title("Temperature Vs Humidity")
plt.xlabel('Temperature (°C)')
plt.ylabel('Humidity (%)')
plt.show()

""")
b2()
