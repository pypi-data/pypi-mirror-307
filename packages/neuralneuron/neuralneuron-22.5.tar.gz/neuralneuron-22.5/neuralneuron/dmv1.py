def b1():
    print("""
          # -*- coding: utf-8 -*-
DMV-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o-MvZ5ogn75yGC0SPmoSx0s_kQvmJ6Ce


!pip install xlrd

import xlrd

import pandas as pd
import plotly.express as px
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json


df = pd.read_csv("sales_data_sample.csv", encoding='latin1')
df


duplicates_count = df.duplicated().sum()
print(duplicates_count)

df.isnull().sum()

# Cleaning Dataset

data = df.dropna()
data.isnull().sum()

# Transformation Tasks

unique_values = np.unique(df['STATUS'])
print(unique_values)

df.replace(to_replace=['Cancelled','Disputed','In Process','On Hold','Resolved','Shipped'], value=[1,2,3,4,5,6],inplace=True)
df['STATUS']

# Analyze the sales data by performing

+ descriptive statistics
+ aggregating data by specific variables
+ calculating metrics such as total sales
+ average order value
+ product category distribution.

# Descriptive Statistics


sales_summary = df[['SALES', 'QUANTITYORDERED', 'PRICEEACH']].describe()
print("Descriptive Statistics for Sales Data:\n", sales_summary)

# aggregating data by specific variables
+ Sales per country
+ Sales over months
+ Sales over ProductLine


sales_by_country = df.groupby('COUNTRY')['SALES'].sum().sort_values(ascending=False)
print("Sales by Country:\n", sales_by_country)

sales_by_country = df.groupby('MONTH_ID')['SALES'].sum().sort_values(ascending=False)
print("Sales by Months:\n", sales_by_country)

sales_by_category = df.groupby('PRODUCTLINE')['SALES'].sum()
print("Sales by Product Category:\n", sales_by_category)

# calculating metrics such as total sales

total_sales = df['SALES'].sum()
print("Total Sales:", total_sales)

# Average Order Value (AOV)

average_order_value = df['SALES'].mean()
print("Average Order Value (AOV):", average_order_value)

# product category distribution

product_distribution = df['PRODUCTLINE'].value_counts(normalize=True) * 100
print("Product Category Distribution (%):\n", product_distribution)

# Visualize
+ Pie Chart
+ Boxplot


Values = df['PRODUCTLINE'].value_counts(normalize=True) * 100
category = Values.index

fig = px.pie(df, values=Values, names=category, title='Product Category Distribution')
fig.show()

sns.set_theme(style="dark")
sns.boxplot(x = 'TERRITORY', y = 'QUANTITYORDERED', data = df)

# XLS FORMAT

file = pd.read_excel('Sample - Superstore.xls')
file.head()

# Into DataFrame

df1 = pd.DataFrame(file)
df1

Regions = df1['Region']
Discount = df1['Discount']

sns.set_theme(style="whitegrid")
plt.bar(Regions[0:30],Discount[0:30],color='skyblue', edgecolor='gray')
plt.show()

# JSON FORMAT - same like WeatherAPi

with open("customers.json",'r') as J :
    content = json.load(J)
    print(json.dumps(content,indent=4))

id = [data['id'] for data in content]
email = [data['email'] for data in content]
first = [data['first'] for data in content]
last = [data['last'] for data in content]
company = [data['company'] for data in content]
created_at = [data['created_at'] for data in content]
country = [data['country'] for data in content]

df2 = pd.DataFrame({
    "ID" : id,
    "Email" : email,
    "First" : first,
    "Last" : last,
    "Company" : company,
    "Created_at" : created_at,
    "Country" : country,

})
df2

df2.isnull().sum()

User = df2['ID']
created_at = df2['Created_at']

plt.figure(figsize=(12,8))
plt.grid(True)
sns.set_theme(style="whitegrid")
plt.title('User Registrations over Time')
plt.bar(User[0:30],created_at[0:30],color='skyblue', edgecolor='gray')
plt.show()

""")
b1()
