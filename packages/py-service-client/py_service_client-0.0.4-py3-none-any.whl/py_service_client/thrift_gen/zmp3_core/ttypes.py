#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class TArtist(object):
    """
    Attributes:
     - id
     - name
     - gender
     - beginYear
     - nationality
     - genreIds
     - countryCodes
     - bestOfPlaylistId
     - mixPlaylistId
     - playlistIds
     - birthday
     - createdTime
     - modifiedTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
        (3, TType.I32, 'gender', None, None, ),  # 3
        (4, TType.STRING, 'beginYear', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'nationality', 'UTF8', None, ),  # 5
        (6, TType.LIST, 'genreIds', (TType.I32, None, False), None, ),  # 6
        (7, TType.LIST, 'countryCodes', (TType.I32, None, False), None, ),  # 7
        (8, TType.I32, 'bestOfPlaylistId', None, None, ),  # 8
        (9, TType.I32, 'mixPlaylistId', None, None, ),  # 9
        (10, TType.LIST, 'playlistIds', (TType.I32, None, False), None, ),  # 10
        (11, TType.STRING, 'birthday', 'UTF8', None, ),  # 11
        (12, TType.I32, 'createdTime', None, None, ),  # 12
        (13, TType.I32, 'modifiedTime', None, None, ),  # 13
    )

    def __init__(self, id=None, name=None, gender=None, beginYear=None, nationality=None, genreIds=None, countryCodes=None, bestOfPlaylistId=None, mixPlaylistId=None, playlistIds=None, birthday=None, createdTime=None, modifiedTime=None,):
        self.id = id
        self.name = name
        self.gender = gender
        self.beginYear = beginYear
        self.nationality = nationality
        self.genreIds = genreIds
        self.countryCodes = countryCodes
        self.bestOfPlaylistId = bestOfPlaylistId
        self.mixPlaylistId = mixPlaylistId
        self.playlistIds = playlistIds
        self.birthday = birthday
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.gender = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.beginYear = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nationality = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.genreIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.genreIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.countryCodes = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.countryCodes.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.bestOfPlaylistId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.mixPlaylistId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.playlistIds = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readI32()
                        self.playlistIds.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.birthday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.createdTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.modifiedTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TArtist')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.I32, 3)
            oprot.writeI32(self.gender)
            oprot.writeFieldEnd()
        if self.beginYear is not None:
            oprot.writeFieldBegin('beginYear', TType.STRING, 4)
            oprot.writeString(self.beginYear.encode('utf-8') if sys.version_info[0] == 2 else self.beginYear)
            oprot.writeFieldEnd()
        if self.nationality is not None:
            oprot.writeFieldBegin('nationality', TType.STRING, 5)
            oprot.writeString(self.nationality.encode('utf-8') if sys.version_info[0] == 2 else self.nationality)
            oprot.writeFieldEnd()
        if self.genreIds is not None:
            oprot.writeFieldBegin('genreIds', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.genreIds))
            for iter18 in self.genreIds:
                oprot.writeI32(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.countryCodes is not None:
            oprot.writeFieldBegin('countryCodes', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.countryCodes))
            for iter19 in self.countryCodes:
                oprot.writeI32(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bestOfPlaylistId is not None:
            oprot.writeFieldBegin('bestOfPlaylistId', TType.I32, 8)
            oprot.writeI32(self.bestOfPlaylistId)
            oprot.writeFieldEnd()
        if self.mixPlaylistId is not None:
            oprot.writeFieldBegin('mixPlaylistId', TType.I32, 9)
            oprot.writeI32(self.mixPlaylistId)
            oprot.writeFieldEnd()
        if self.playlistIds is not None:
            oprot.writeFieldBegin('playlistIds', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.playlistIds))
            for iter20 in self.playlistIds:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRING, 11)
            oprot.writeString(self.birthday.encode('utf-8') if sys.version_info[0] == 2 else self.birthday)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I32, 12)
            oprot.writeI32(self.createdTime)
            oprot.writeFieldEnd()
        if self.modifiedTime is not None:
            oprot.writeFieldBegin('modifiedTime', TType.I32, 13)
            oprot.writeI32(self.modifiedTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TArtistResult(object):
    """
    Attributes:
     - error
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (TArtist, TArtist.thrift_spec), None, ),  # 2
    )

    def __init__(self, error=None, value=None,):
        self.error = error
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TArtist()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TArtistResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TArtistMapResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.MAP, 'values', (TType.I32, None, TType.STRUCT, (TArtist, TArtist.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype22, _vtype23, _size21) = iprot.readMapBegin()
                    for _i25 in range(_size21):
                        _key26 = iprot.readI32()
                        _val27 = TArtist()
                        _val27.read(iprot)
                        self.values[_key26] = _val27
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TArtistMapResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.values))
            for kiter28, viter29 in self.values.items():
                oprot.writeI32(kiter28)
                viter29.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TArtistListResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (TArtist, TArtist.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = TArtist()
                        _elem35.read(iprot)
                        self.values.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TArtistListResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter36 in self.values:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylist(object):
    """
    Attributes:
     - id
     - title
     - artistIds
     - genreIds
     - description
     - coverImage
     - internationalCode
     - productionId
     - producerId
     - releaseDate
     - type
     - mediaType
     - subType
     - isOfficial
     - status
     - mediaIds
     - createdTime
     - modifiedTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'artistIds', (TType.I32, None, False), None, ),  # 3
        (4, TType.LIST, 'genreIds', (TType.I32, None, False), None, ),  # 4
        (5, TType.STRING, 'description', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'coverImage', 'UTF8', None, ),  # 6
        (7, TType.LIST, 'internationalCode', (TType.I32, None, False), None, ),  # 7
        (8, TType.I32, 'productionId', None, None, ),  # 8
        (9, TType.I32, 'producerId', None, None, ),  # 9
        (10, TType.STRING, 'releaseDate', 'UTF8', None, ),  # 10
        (11, TType.I32, 'type', None, None, ),  # 11
        (12, TType.I32, 'mediaType', None, None, ),  # 12
        (13, TType.I32, 'subType', None, None, ),  # 13
        (14, TType.BOOL, 'isOfficial', None, None, ),  # 14
        (15, TType.I32, 'status', None, None, ),  # 15
        (16, TType.LIST, 'mediaIds', (TType.I32, None, False), None, ),  # 16
        (17, TType.I32, 'createdTime', None, None, ),  # 17
        (18, TType.I64, 'modifiedTime', None, None, ),  # 18
    )

    def __init__(self, id=None, title=None, artistIds=None, genreIds=None, description=None, coverImage=None, internationalCode=None, productionId=None, producerId=None, releaseDate=None, type=None, mediaType=None, subType=None, isOfficial=None, status=None, mediaIds=None, createdTime=None, modifiedTime=None,):
        self.id = id
        self.title = title
        self.artistIds = artistIds
        self.genreIds = genreIds
        self.description = description
        self.coverImage = coverImage
        self.internationalCode = internationalCode
        self.productionId = productionId
        self.producerId = producerId
        self.releaseDate = releaseDate
        self.type = type
        self.mediaType = mediaType
        self.subType = subType
        self.isOfficial = isOfficial
        self.status = status
        self.mediaIds = mediaIds
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.artistIds = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = iprot.readI32()
                        self.artistIds.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.genreIds = []
                    (_etype46, _size43) = iprot.readListBegin()
                    for _i47 in range(_size43):
                        _elem48 = iprot.readI32()
                        self.genreIds.append(_elem48)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.coverImage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.internationalCode = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readI32()
                        self.internationalCode.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.productionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.producerId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.releaseDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.mediaType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.subType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.isOfficial = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.mediaIds = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readI32()
                        self.mediaIds.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.createdTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.modifiedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylist')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.artistIds is not None:
            oprot.writeFieldBegin('artistIds', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.artistIds))
            for iter61 in self.artistIds:
                oprot.writeI32(iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genreIds is not None:
            oprot.writeFieldBegin('genreIds', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.genreIds))
            for iter62 in self.genreIds:
                oprot.writeI32(iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 5)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.coverImage is not None:
            oprot.writeFieldBegin('coverImage', TType.STRING, 6)
            oprot.writeString(self.coverImage.encode('utf-8') if sys.version_info[0] == 2 else self.coverImage)
            oprot.writeFieldEnd()
        if self.internationalCode is not None:
            oprot.writeFieldBegin('internationalCode', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.internationalCode))
            for iter63 in self.internationalCode:
                oprot.writeI32(iter63)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.productionId is not None:
            oprot.writeFieldBegin('productionId', TType.I32, 8)
            oprot.writeI32(self.productionId)
            oprot.writeFieldEnd()
        if self.producerId is not None:
            oprot.writeFieldBegin('producerId', TType.I32, 9)
            oprot.writeI32(self.producerId)
            oprot.writeFieldEnd()
        if self.releaseDate is not None:
            oprot.writeFieldBegin('releaseDate', TType.STRING, 10)
            oprot.writeString(self.releaseDate.encode('utf-8') if sys.version_info[0] == 2 else self.releaseDate)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 11)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 12)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        if self.subType is not None:
            oprot.writeFieldBegin('subType', TType.I32, 13)
            oprot.writeI32(self.subType)
            oprot.writeFieldEnd()
        if self.isOfficial is not None:
            oprot.writeFieldBegin('isOfficial', TType.BOOL, 14)
            oprot.writeBool(self.isOfficial)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 15)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.mediaIds is not None:
            oprot.writeFieldBegin('mediaIds', TType.LIST, 16)
            oprot.writeListBegin(TType.I32, len(self.mediaIds))
            for iter64 in self.mediaIds:
                oprot.writeI32(iter64)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I32, 17)
            oprot.writeI32(self.createdTime)
            oprot.writeFieldEnd()
        if self.modifiedTime is not None:
            oprot.writeFieldBegin('modifiedTime', TType.I64, 18)
            oprot.writeI64(self.modifiedTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistResult(object):
    """
    Attributes:
     - error
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (TPlaylist, TPlaylist.thrift_spec), None, ),  # 2
    )

    def __init__(self, error=None, value=None,):
        self.error = error
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TPlaylist()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistListResult(object):
    """
    Attributes:
     - error
     - values
     - total
     - timestamp
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (TPlaylist, TPlaylist.thrift_spec), False), None, ),  # 2
        (3, TType.I32, 'total', None, None, ),  # 3
        (4, TType.I64, 'timestamp', None, None, ),  # 4
    )

    def __init__(self, error=None, values=None, total=None, timestamp=None,):
        self.error = error
        self.values = values
        self.total = total
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = TPlaylist()
                        _elem70.read(iprot)
                        self.values.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistListResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter71 in self.values:
                iter71.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 3)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 4)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistMapResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.MAP, 'values', (TType.I32, None, TType.STRUCT, (TPlaylist, TPlaylist.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype73, _vtype74, _size72) = iprot.readMapBegin()
                    for _i76 in range(_size72):
                        _key77 = iprot.readI32()
                        _val78 = TPlaylist()
                        _val78.read(iprot)
                        self.values[_key77] = _val78
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistMapResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.values))
            for kiter79, viter80 in self.values.items():
                oprot.writeI32(kiter79)
                viter80.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMedia(object):
    """
    Attributes:
     - id
     - title
     - artistIds
     - composerIds
     - genreIds
     - albumIds
     - internationalCode
     - durationAudio
     - karaokeAudio
     - isOffical
     - createdTime
     - modifiedTime
     - audioStatus
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        None,  # 2
        (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        (8, TType.LIST, 'artistIds', (TType.I32, None, False), None, ),  # 8
        (9, TType.LIST, 'composerIds', (TType.I32, None, False), None, ),  # 9
        (10, TType.LIST, 'genreIds', (TType.I32, None, False), None, ),  # 10
        (11, TType.LIST, 'albumIds', (TType.I32, None, False), None, ),  # 11
        None,  # 12
        (13, TType.LIST, 'internationalCode', (TType.STRING, 'UTF8', False), None, ),  # 13
        (14, TType.I32, 'durationAudio', None, None, ),  # 14
        (15, TType.STRING, 'karaokeAudio', 'UTF8', None, ),  # 15
        (16, TType.BOOL, 'isOffical', None, None, ),  # 16
        (17, TType.I32, 'createdTime', None, None, ),  # 17
        (18, TType.I32, 'modifiedTime', None, None, ),  # 18
        (19, TType.I32, 'audioStatus', None, None, ),  # 19
    )

    def __init__(self, id=None, title=None, artistIds=None, composerIds=None, genreIds=None, albumIds=None, internationalCode=None, durationAudio=None, karaokeAudio=None, isOffical=None, createdTime=None, modifiedTime=None, audioStatus=None,):
        self.id = id
        self.title = title
        self.artistIds = artistIds
        self.composerIds = composerIds
        self.genreIds = genreIds
        self.albumIds = albumIds
        self.internationalCode = internationalCode
        self.durationAudio = durationAudio
        self.karaokeAudio = karaokeAudio
        self.isOffical = isOffical
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime
        self.audioStatus = audioStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.artistIds = []
                    (_etype84, _size81) = iprot.readListBegin()
                    for _i85 in range(_size81):
                        _elem86 = iprot.readI32()
                        self.artistIds.append(_elem86)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.composerIds = []
                    (_etype90, _size87) = iprot.readListBegin()
                    for _i91 in range(_size87):
                        _elem92 = iprot.readI32()
                        self.composerIds.append(_elem92)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.genreIds = []
                    (_etype96, _size93) = iprot.readListBegin()
                    for _i97 in range(_size93):
                        _elem98 = iprot.readI32()
                        self.genreIds.append(_elem98)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.albumIds = []
                    (_etype102, _size99) = iprot.readListBegin()
                    for _i103 in range(_size99):
                        _elem104 = iprot.readI32()
                        self.albumIds.append(_elem104)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.internationalCode = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.internationalCode.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.durationAudio = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.karaokeAudio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.isOffical = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.createdTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.modifiedTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.audioStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TMedia')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.artistIds is not None:
            oprot.writeFieldBegin('artistIds', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.artistIds))
            for iter111 in self.artistIds:
                oprot.writeI32(iter111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.composerIds is not None:
            oprot.writeFieldBegin('composerIds', TType.LIST, 9)
            oprot.writeListBegin(TType.I32, len(self.composerIds))
            for iter112 in self.composerIds:
                oprot.writeI32(iter112)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genreIds is not None:
            oprot.writeFieldBegin('genreIds', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.genreIds))
            for iter113 in self.genreIds:
                oprot.writeI32(iter113)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.albumIds is not None:
            oprot.writeFieldBegin('albumIds', TType.LIST, 11)
            oprot.writeListBegin(TType.I32, len(self.albumIds))
            for iter114 in self.albumIds:
                oprot.writeI32(iter114)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internationalCode is not None:
            oprot.writeFieldBegin('internationalCode', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.internationalCode))
            for iter115 in self.internationalCode:
                oprot.writeString(iter115.encode('utf-8') if sys.version_info[0] == 2 else iter115)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.durationAudio is not None:
            oprot.writeFieldBegin('durationAudio', TType.I32, 14)
            oprot.writeI32(self.durationAudio)
            oprot.writeFieldEnd()
        if self.karaokeAudio is not None:
            oprot.writeFieldBegin('karaokeAudio', TType.STRING, 15)
            oprot.writeString(self.karaokeAudio.encode('utf-8') if sys.version_info[0] == 2 else self.karaokeAudio)
            oprot.writeFieldEnd()
        if self.isOffical is not None:
            oprot.writeFieldBegin('isOffical', TType.BOOL, 16)
            oprot.writeBool(self.isOffical)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I32, 17)
            oprot.writeI32(self.createdTime)
            oprot.writeFieldEnd()
        if self.modifiedTime is not None:
            oprot.writeFieldBegin('modifiedTime', TType.I32, 18)
            oprot.writeI32(self.modifiedTime)
            oprot.writeFieldEnd()
        if self.audioStatus is not None:
            oprot.writeFieldBegin('audioStatus', TType.I32, 19)
            oprot.writeI32(self.audioStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMediaResult(object):
    """
    Attributes:
     - error
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (TMedia, TMedia.thrift_spec), None, ),  # 2
    )

    def __init__(self, error=None, value=None,):
        self.error = error
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TMedia()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TMediaResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMediaListResult(object):
    """
    Attributes:
     - error
     - values
     - total
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (TMedia, TMedia.thrift_spec), False), None, ),  # 2
        (3, TType.I32, 'total', None, None, ),  # 3
    )

    def __init__(self, error=None, values=None, total=None,):
        self.error = error
        self.values = values
        self.total = total

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype119, _size116) = iprot.readListBegin()
                    for _i120 in range(_size116):
                        _elem121 = TMedia()
                        _elem121.read(iprot)
                        self.values.append(_elem121)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TMediaListResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter122 in self.values:
                iter122.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 3)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMediaMapResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.MAP, 'values', (TType.I32, None, TType.STRUCT, (TMedia, TMedia.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype124, _vtype125, _size123) = iprot.readMapBegin()
                    for _i127 in range(_size123):
                        _key128 = iprot.readI32()
                        _val129 = TMedia()
                        _val129.read(iprot)
                        self.values[_key128] = _val129
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TMediaMapResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.values))
            for kiter130, viter131 in self.values.items():
                oprot.writeI32(kiter130)
                viter131.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGenre(object):
    """
    Attributes:
     - id
     - name
     - parentId
     - listChildIds
     - enabled
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        None,  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.I32, 'parentId', None, 0, ),  # 4
        (5, TType.LIST, 'listChildIds', (TType.I32, None, False), None, ),  # 5
        (6, TType.BOOL, 'enabled', None, None, ),  # 6
    )

    def __init__(self, id=None, name=None, parentId=thrift_spec[4][4], listChildIds=None, enabled=None,):
        self.id = id
        self.name = name
        self.parentId = parentId
        self.listChildIds = listChildIds
        self.enabled = enabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.parentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.listChildIds = []
                    (_etype135, _size132) = iprot.readListBegin()
                    for _i136 in range(_size132):
                        _elem137 = iprot.readI32()
                        self.listChildIds.append(_elem137)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TGenre')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.parentId is not None:
            oprot.writeFieldBegin('parentId', TType.I32, 4)
            oprot.writeI32(self.parentId)
            oprot.writeFieldEnd()
        if self.listChildIds is not None:
            oprot.writeFieldBegin('listChildIds', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.listChildIds))
            for iter138 in self.listChildIds:
                oprot.writeI32(iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 6)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGenreResult(object):
    """
    Attributes:
     - error
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (TGenre, TGenre.thrift_spec), None, ),  # 2
    )

    def __init__(self, error=None, value=None,):
        self.error = error
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TGenre()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TGenreResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGenreListResult(object):
    """
    Attributes:
     - error
     - values
     - total
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (TGenre, TGenre.thrift_spec), False), None, ),  # 2
        (3, TType.I32, 'total', None, None, ),  # 3
    )

    def __init__(self, error=None, values=None, total=None,):
        self.error = error
        self.values = values
        self.total = total

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype142, _size139) = iprot.readListBegin()
                    for _i143 in range(_size139):
                        _elem144 = TGenre()
                        _elem144.read(iprot)
                        self.values.append(_elem144)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TGenreListResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter145 in self.values:
                iter145.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 3)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGenreMapResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.MAP, 'values', (TType.I32, None, TType.STRUCT, (TGenre, TGenre.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype147, _vtype148, _size146) = iprot.readMapBegin()
                    for _i150 in range(_size146):
                        _key151 = iprot.readI32()
                        _val152 = TGenre()
                        _val152.read(iprot)
                        self.values[_key151] = _val152
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TGenreMapResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.values))
            for kiter153, viter154 in self.values.items():
                oprot.writeI32(kiter153)
                viter154.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TLyric(object):
    """
    Attributes:
     - id
     - content
     - mediaId
     - createdTime
     - modifiedTime
     - status
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
        (3, TType.I32, 'mediaId', None, None, ),  # 3
        (4, TType.I32, 'createdTime', None, None, ),  # 4
        (5, TType.I32, 'modifiedTime', None, None, ),  # 5
        (6, TType.I32, 'status', None, None, ),  # 6
    )

    def __init__(self, id=None, content=None, mediaId=None, createdTime=None, modifiedTime=None, status=None,):
        self.id = id
        self.content = content
        self.mediaId = mediaId
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mediaId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.createdTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.modifiedTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TLyric')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.mediaId is not None:
            oprot.writeFieldBegin('mediaId', TType.I32, 3)
            oprot.writeI32(self.mediaId)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I32, 4)
            oprot.writeI32(self.createdTime)
            oprot.writeFieldEnd()
        if self.modifiedTime is not None:
            oprot.writeFieldBegin('modifiedTime', TType.I32, 5)
            oprot.writeI32(self.modifiedTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TLyricResult(object):
    """
    Attributes:
     - error
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (TLyric, TLyric.thrift_spec), None, ),  # 2
    )

    def __init__(self, error=None, value=None,):
        self.error = error
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TLyric()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TLyricResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TLyricListResult(object):
    """
    Attributes:
     - error
     - values
     - total
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (TLyric, TLyric.thrift_spec), False), None, ),  # 2
        (3, TType.I32, 'total', None, None, ),  # 3
    )

    def __init__(self, error=None, values=None, total=None,):
        self.error = error
        self.values = values
        self.total = total

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype158, _size155) = iprot.readListBegin()
                    for _i159 in range(_size155):
                        _elem160 = TLyric()
                        _elem160.read(iprot)
                        self.values.append(_elem160)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TLyricListResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter161 in self.values:
                iter161.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 3)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TLyricMapResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.MAP, 'values', (TType.I32, None, TType.STRUCT, (TGenre, TGenre.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype163, _vtype164, _size162) = iprot.readMapBegin()
                    for _i166 in range(_size162):
                        _key167 = iprot.readI32()
                        _val168 = TGenre()
                        _val168.read(iprot)
                        self.values[_key167] = _val168
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TLyricMapResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.values))
            for kiter169, viter170 in self.values.items():
                oprot.writeI32(kiter169)
                viter170.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.error is None:
            raise TProtocolException(message='Required field error is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistUser(object):
    """
    Attributes:
     - id
     - title
     - artistIds
     - genreIds
     - description
     - coverImage
     - releaseDate
     - type
     - mediaType
     - subType
     - isOfficial
     - status
     - mediaIds
     - createdBy
     - modifiedBy
     - createdTime
     - modifiedTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'artistIds', (TType.I32, None, False), None, ),  # 3
        (4, TType.LIST, 'genreIds', (TType.I32, None, False), None, ),  # 4
        (5, TType.STRING, 'description', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'coverImage', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'releaseDate', 'UTF8', None, ),  # 7
        (8, TType.I32, 'type', None, None, ),  # 8
        (9, TType.I32, 'mediaType', None, None, ),  # 9
        (10, TType.I32, 'subType', None, None, ),  # 10
        (11, TType.BOOL, 'isOfficial', None, None, ),  # 11
        (12, TType.I32, 'status', None, None, ),  # 12
        (13, TType.LIST, 'mediaIds', (TType.I32, None, False), None, ),  # 13
        (14, TType.I32, 'createdBy', None, None, ),  # 14
        (15, TType.I32, 'modifiedBy', None, None, ),  # 15
        (16, TType.I32, 'createdTime', None, None, ),  # 16
        (17, TType.I64, 'modifiedTime', None, None, ),  # 17
    )

    def __init__(self, id=None, title=None, artistIds=None, genreIds=None, description=None, coverImage=None, releaseDate=None, type=None, mediaType=None, subType=None, isOfficial=None, status=None, mediaIds=None, createdBy=None, modifiedBy=None, createdTime=None, modifiedTime=None,):
        self.id = id
        self.title = title
        self.artistIds = artistIds
        self.genreIds = genreIds
        self.description = description
        self.coverImage = coverImage
        self.releaseDate = releaseDate
        self.type = type
        self.mediaType = mediaType
        self.subType = subType
        self.isOfficial = isOfficial
        self.status = status
        self.mediaIds = mediaIds
        self.createdBy = createdBy
        self.modifiedBy = modifiedBy
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.artistIds = []
                    (_etype174, _size171) = iprot.readListBegin()
                    for _i175 in range(_size171):
                        _elem176 = iprot.readI32()
                        self.artistIds.append(_elem176)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.genreIds = []
                    (_etype180, _size177) = iprot.readListBegin()
                    for _i181 in range(_size177):
                        _elem182 = iprot.readI32()
                        self.genreIds.append(_elem182)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.coverImage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.releaseDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.mediaType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.subType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.isOfficial = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.mediaIds = []
                    (_etype186, _size183) = iprot.readListBegin()
                    for _i187 in range(_size183):
                        _elem188 = iprot.readI32()
                        self.mediaIds.append(_elem188)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.createdBy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.modifiedBy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.createdTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.modifiedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistUser')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.artistIds is not None:
            oprot.writeFieldBegin('artistIds', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.artistIds))
            for iter189 in self.artistIds:
                oprot.writeI32(iter189)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genreIds is not None:
            oprot.writeFieldBegin('genreIds', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.genreIds))
            for iter190 in self.genreIds:
                oprot.writeI32(iter190)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 5)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.coverImage is not None:
            oprot.writeFieldBegin('coverImage', TType.STRING, 6)
            oprot.writeString(self.coverImage.encode('utf-8') if sys.version_info[0] == 2 else self.coverImage)
            oprot.writeFieldEnd()
        if self.releaseDate is not None:
            oprot.writeFieldBegin('releaseDate', TType.STRING, 7)
            oprot.writeString(self.releaseDate.encode('utf-8') if sys.version_info[0] == 2 else self.releaseDate)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 8)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 9)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        if self.subType is not None:
            oprot.writeFieldBegin('subType', TType.I32, 10)
            oprot.writeI32(self.subType)
            oprot.writeFieldEnd()
        if self.isOfficial is not None:
            oprot.writeFieldBegin('isOfficial', TType.BOOL, 11)
            oprot.writeBool(self.isOfficial)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 12)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.mediaIds is not None:
            oprot.writeFieldBegin('mediaIds', TType.LIST, 13)
            oprot.writeListBegin(TType.I32, len(self.mediaIds))
            for iter191 in self.mediaIds:
                oprot.writeI32(iter191)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.createdBy is not None:
            oprot.writeFieldBegin('createdBy', TType.I32, 14)
            oprot.writeI32(self.createdBy)
            oprot.writeFieldEnd()
        if self.modifiedBy is not None:
            oprot.writeFieldBegin('modifiedBy', TType.I32, 15)
            oprot.writeI32(self.modifiedBy)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I32, 16)
            oprot.writeI32(self.createdTime)
            oprot.writeFieldEnd()
        if self.modifiedTime is not None:
            oprot.writeFieldBegin('modifiedTime', TType.I64, 17)
            oprot.writeI64(self.modifiedTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistUserResult(object):
    """
    Attributes:
     - error
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.STRUCT, 'value', (TPlaylistUser, TPlaylistUser.thrift_spec), None, ),  # 2
    )

    def __init__(self, error=None, value=None,):
        self.error = error
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TPlaylistUser()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistUserResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistUserListResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.LIST, 'values', (TType.STRUCT, (TPlaylistUser, TPlaylistUser.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype195, _size192) = iprot.readListBegin()
                    for _i196 in range(_size192):
                        _elem197 = TPlaylistUser()
                        _elem197.read(iprot)
                        self.values.append(_elem197)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistUserListResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter198 in self.values:
                iter198.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlaylistUserMapResult(object):
    """
    Attributes:
     - error
     - values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'error', None, None, ),  # 1
        (2, TType.MAP, 'values', (TType.I32, None, TType.STRUCT, (TPlaylistUser, TPlaylistUser.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, error=None, values=None,):
        self.error = error
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.values = {}
                    (_ktype200, _vtype201, _size199) = iprot.readMapBegin()
                    for _i203 in range(_size199):
                        _key204 = iprot.readI32()
                        _val205 = TPlaylistUser()
                        _val205.read(iprot)
                        self.values[_key204] = _val205
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TPlaylistUserMapResult')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.values))
            for kiter206, viter207 in self.values.items():
                oprot.writeI32(kiter206)
                viter207.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
