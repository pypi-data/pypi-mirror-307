# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _types
else:
    import _types

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _types.delete_SwigPyIterator

    def value(self):
        return _types.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _types.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _types.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _types.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _types.SwigPyIterator_equal(self, x)

    def copy(self):
        return _types.SwigPyIterator_copy(self)

    def next(self):
        return _types.SwigPyIterator_next(self)

    def __next__(self):
        return _types.SwigPyIterator___next__(self)

    def previous(self):
        return _types.SwigPyIterator_previous(self)

    def advance(self, n):
        return _types.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _types.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _types.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _types.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _types.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _types.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _types.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _types:
_types.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _types.SHARED_PTR_DISOWN

# libCellML generated wrapper code starts here.

CellmlElementType_COMPONENT = _types.CellmlElementType_COMPONENT
CellmlElementType_COMPONENT_REF = _types.CellmlElementType_COMPONENT_REF
CellmlElementType_CONNECTION = _types.CellmlElementType_CONNECTION
CellmlElementType_ENCAPSULATION = _types.CellmlElementType_ENCAPSULATION
CellmlElementType_IMPORT = _types.CellmlElementType_IMPORT
CellmlElementType_MAP_VARIABLES = _types.CellmlElementType_MAP_VARIABLES
CellmlElementType_MATH = _types.CellmlElementType_MATH
CellmlElementType_MODEL = _types.CellmlElementType_MODEL
CellmlElementType_RESET = _types.CellmlElementType_RESET
CellmlElementType_RESET_VALUE = _types.CellmlElementType_RESET_VALUE
CellmlElementType_TEST_VALUE = _types.CellmlElementType_TEST_VALUE
CellmlElementType_UNDEFINED = _types.CellmlElementType_UNDEFINED
CellmlElementType_UNIT = _types.CellmlElementType_UNIT
CellmlElementType_UNITS = _types.CellmlElementType_UNITS
CellmlElementType_VARIABLE = _types.CellmlElementType_VARIABLE

def cellmlElementTypeAsString(value):
    r"""Convert a CellmlElementType enumeration value into its string form."""
    return _types.cellmlElementTypeAsString(value)

from enum import IntEnum
def redo(prefix):
    tmpD = {k:v for k,v in globals().items() if k.startswith(prefix + '_')}
    tmpD = {k[len(prefix)+1:]:v for k,v in tmpD.items()}
    globals()[prefix] = IntEnum(prefix,tmpD)
redo('CellmlElementType')
del redo  # cleaning up the namespace
del IntEnum


# libCellML generated wrapper code starts here.

class UnitsItem(object):
    r"""A class for describing a units item."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _types.delete_UnitsItem

    def units(self):
        r"""Return the units for the units item reference."""
        return _types.UnitsItem_units(self)

    def index(self):
        r"""Return the index for the units item reference."""
        return _types.UnitsItem_index(self)

    def isValid(self):
        r"""Test if the units item reference is valid."""
        return _types.UnitsItem_isValid(self)

    def __init__(self, units, index):
        _types.UnitsItem_swiginit(self, _types.new_UnitsItem(units, index))

# Register UnitsItem in _types:
_types.UnitsItem_swigregister(UnitsItem)
class VariablePair(object):
    r"""A class for describing a variable pair."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _types.delete_VariablePair

    def variable1(self):
        r"""Return the first variable in the pair of variables."""
        return _types.VariablePair_variable1(self)

    def variable2(self):
        r"""Return the second variable in the pair of variables."""
        return _types.VariablePair_variable2(self)

    def isValid(self):
        r"""Test if the pair is valid."""
        return _types.VariablePair_isValid(self)

    def __init__(self, variable1, variable2):
        _types.VariablePair_swiginit(self, _types.new_VariablePair(variable1, variable2))

# Register VariablePair in _types:
_types.VariablePair_swigregister(VariablePair)
class AnyCellmlElement(object):
    r"""A class for storing any kind of item."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _types.delete_AnyCellmlElement

    def type(self):
        r"""Get the type of the stored item."""
        return _types.AnyCellmlElement_type(self)

    def component(self):
        r"""Return the item as a component."""
        return _types.AnyCellmlElement_component(self)

    def importSource(self):
        r"""Return the item as an import source."""
        return _types.AnyCellmlElement_importSource(self)

    def model(self):
        r"""Return the item as a model."""
        return _types.AnyCellmlElement_model(self)

    def reset(self):
        r"""Return the item as a reset."""
        return _types.AnyCellmlElement_reset(self)

    def units(self):
        r"""Return the item as a units."""
        return _types.AnyCellmlElement_units(self)

    def unitsItem(self):
        r"""Return the item as a units item."""
        return _types.AnyCellmlElement_unitsItem(self)

    def variable(self):
        r"""Return the item as a variable."""
        return _types.AnyCellmlElement_variable(self)

    def variablePair(self):
        r"""Return the item as a variablePair."""
        return _types.AnyCellmlElement_variablePair(self)

# Register AnyCellmlElement in _types:
_types.AnyCellmlElement_swigregister(AnyCellmlElement)

