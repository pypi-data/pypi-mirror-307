# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _importsource
else:
    import _importsource

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.entity
import libcellml.types

# libCellML generated wrapper code starts here.

class ImportSource(libcellml.entity.Entity):
    r"""
    The `ImportSource` class is for defining a location at which a CellML model is
    expected to be obtainable (the 'source'). The `ImportSource` also acts as a
    handle to indicate that imported entities originate from the same instance of
    that imported source.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _importsource.delete_ImportSource

    def url(self):
        r"""Returns the URL of the source model (empty string if not set)."""
        return _importsource.ImportSource_url(self)

    def setUrl(self, url):
        r"""
        Sets the source model URL that this import source refers to (empty string to
        unset).
        """
        return _importsource.ImportSource_setUrl(self, url)

    def model(self):
        r"""Returns the Model that has been assigned to resolve this ImportSource."""
        return _importsource.ImportSource_model(self)

    def setModel(self, model):
        r"""Sets the Model to resolve this ImportSource."""
        return _importsource.ImportSource_setModel(self, model)

    def removeModel(self):
        r"""Remove the model from this ImportSource."""
        return _importsource.ImportSource_removeModel(self)

    def hasModel(self):
        r"""Returns True if this ImportSource has been resolved, False otherwise."""
        return _importsource.ImportSource_hasModel(self)

    def clone(self):
        r"""Create a copy of this import source."""
        return _importsource.ImportSource_clone(self)

    def __init__(self):
        _importsource.ImportSource_swiginit(self, _importsource.new_ImportSource())

# Register ImportSource in _importsource:
_importsource.ImportSource_swigregister(ImportSource)

