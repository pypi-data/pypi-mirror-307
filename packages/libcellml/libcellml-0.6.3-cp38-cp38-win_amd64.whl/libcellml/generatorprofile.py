# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _generatorprofile
else:
    import _generatorprofile

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.types

# libCellML generated wrapper code starts here.

class GeneratorProfile(object):
    r"""Holds the information for the :class:`Generator` to generate code according to this profile."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Profile_C = _generatorprofile.GeneratorProfile_Profile_C
    Profile_PYTHON = _generatorprofile.GeneratorProfile_Profile_PYTHON
    __swig_destroy__ = _generatorprofile.delete_GeneratorProfile

    def profile(self):
        r"""Returns the :enum:`GeneratorProfile::Profile` for this :class:`GeneratorProfile`."""
        return _generatorprofile.GeneratorProfile_profile(self)

    @staticmethod
    def profileAsString(profile):
        r"""Returns the :enum:`GeneratorProfile::Profile` as a string for this :class:`GeneratorProfile`."""
        return _generatorprofile.GeneratorProfile_profileAsString(profile)

    def setProfile(self, profile):
        r"""Sets the :enum:`GeneratorProfile::Profile` for this :class:`GeneratorProfile`."""
        return _generatorprofile.GeneratorProfile_setProfile(self, profile)

    def hasInterface(self):
        r"""Tests if this :class:`GeneratorProfile` requires an interface."""
        return _generatorprofile.GeneratorProfile_hasInterface(self)

    def setHasInterface(self, hasInterface):
        r"""Sets whether this :class:`GeneratorProfile` requires an interface."""
        return _generatorprofile.GeneratorProfile_setHasInterface(self, hasInterface)

    def equalityString(self):
        r"""Returns the string representing the MathML "equality" operator."""
        return _generatorprofile.GeneratorProfile_equalityString(self)

    def setEqualityString(self, equalityString):
        r"""Sets the string representing the MathML "equality" operator."""
        return _generatorprofile.GeneratorProfile_setEqualityString(self, equalityString)

    def eqString(self):
        r"""Returns the string representing the MathML "equal to" operator."""
        return _generatorprofile.GeneratorProfile_eqString(self)

    def setEqString(self, eqString):
        r"""Sets the string representing the MathML "equal to" operator."""
        return _generatorprofile.GeneratorProfile_setEqString(self, eqString)

    def neqString(self):
        r"""Returns the the string representing the MathML "not equal to" operator."""
        return _generatorprofile.GeneratorProfile_neqString(self)

    def setNeqString(self, neqString):
        r"""Sets the string representing the MathML "not equal to" operator."""
        return _generatorprofile.GeneratorProfile_setNeqString(self, neqString)

    def ltString(self):
        r"""Returns the string representing the MathML "less than" operator."""
        return _generatorprofile.GeneratorProfile_ltString(self)

    def setLtString(self, ltString):
        r"""Sets the string representing the MathML "less than" operator."""
        return _generatorprofile.GeneratorProfile_setLtString(self, ltString)

    def leqString(self):
        r"""Returns the string representing the MathML "less than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_leqString(self)

    def setLeqString(self, leqString):
        r"""Sets the string representing the MathML "less than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_setLeqString(self, leqString)

    def gtString(self):
        r"""Returns the string representing the MathML "greater than" operator."""
        return _generatorprofile.GeneratorProfile_gtString(self)

    def setGtString(self, gtString):
        r"""Sets the string representing the MathML "greater than" operator."""
        return _generatorprofile.GeneratorProfile_setGtString(self, gtString)

    def geqString(self):
        r"""Returns the string representing the MathML "greater than or equal to\ operator."""
        return _generatorprofile.GeneratorProfile_geqString(self)

    def setGeqString(self, geqString):
        r"""Sets the string representing the MathML "greater than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_setGeqString(self, geqString)

    def andString(self):
        r"""Returns the string representing the MathML "and" operator."""
        return _generatorprofile.GeneratorProfile_andString(self)

    def setAndString(self, andString):
        r"""Sets the string representing the MathML "and" operator."""
        return _generatorprofile.GeneratorProfile_setAndString(self, andString)

    def orString(self):
        r"""Returns the string representing the MathML "or" operator."""
        return _generatorprofile.GeneratorProfile_orString(self)

    def setOrString(self, orString):
        r"""Sets the string representing the MathML "or" operator."""
        return _generatorprofile.GeneratorProfile_setOrString(self, orString)

    def xorString(self):
        r"""Returns the string representing the MathML "exclusive or" operator."""
        return _generatorprofile.GeneratorProfile_xorString(self)

    def setXorString(self, xorString):
        r"""Sets the string representing the MathML "exclusive or" operator."""
        return _generatorprofile.GeneratorProfile_setXorString(self, xorString)

    def notString(self):
        r"""Returns the string representing the MathML "not" operator."""
        return _generatorprofile.GeneratorProfile_notString(self)

    def setNotString(self, notString):
        r"""Sets the string representing the MathML "not" operator."""
        return _generatorprofile.GeneratorProfile_setNotString(self, notString)

    def hasEqOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has an "equal to" operator."""
        return _generatorprofile.GeneratorProfile_hasEqOperator(self)

    def setHasEqOperator(self, hasEqOperator):
        r"""Sets whether this :class:`GeneratorProfile` has an "equal to" operator."""
        return _generatorprofile.GeneratorProfile_setHasEqOperator(self, hasEqOperator)

    def hasNeqOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "not equal to" operator."""
        return _generatorprofile.GeneratorProfile_hasNeqOperator(self)

    def setHasNeqOperator(self, hasNeqOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "not equal to" operator."""
        return _generatorprofile.GeneratorProfile_setHasNeqOperator(self, hasNeqOperator)

    def hasLtOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "less than" operator."""
        return _generatorprofile.GeneratorProfile_hasLtOperator(self)

    def setHasLtOperator(self, hasLtOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "less than" operator."""
        return _generatorprofile.GeneratorProfile_setHasLtOperator(self, hasLtOperator)

    def hasLeqOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "less than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_hasLeqOperator(self)

    def setHasLeqOperator(self, hasLeqOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "less than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_setHasLeqOperator(self, hasLeqOperator)

    def hasGtOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "greater than" operator."""
        return _generatorprofile.GeneratorProfile_hasGtOperator(self)

    def setHasGtOperator(self, hasGtOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "greater than" operator."""
        return _generatorprofile.GeneratorProfile_setHasGtOperator(self, hasGtOperator)

    def hasGeqOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "greater than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_hasGeqOperator(self)

    def setHasGeqOperator(self, hasGeqOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "greater than or equal to" operator."""
        return _generatorprofile.GeneratorProfile_setHasGeqOperator(self, hasGeqOperator)

    def hasAndOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has an "and" operator."""
        return _generatorprofile.GeneratorProfile_hasAndOperator(self)

    def setHasAndOperator(self, hasAndOperator):
        r"""Sets whether this :class:`GeneratorProfile` has an "and" operator."""
        return _generatorprofile.GeneratorProfile_setHasAndOperator(self, hasAndOperator)

    def hasOrOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has an "or" operator."""
        return _generatorprofile.GeneratorProfile_hasOrOperator(self)

    def setHasOrOperator(self, hasOrOperator):
        r"""Sets whether this :class:`GeneratorProfile` has an "or" operator."""
        return _generatorprofile.GeneratorProfile_setHasOrOperator(self, hasOrOperator)

    def hasXorOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has an "exclusive or" operator."""
        return _generatorprofile.GeneratorProfile_hasXorOperator(self)

    def setHasXorOperator(self, hasXorOperator):
        r"""Sets whether this :class:`GeneratorProfile` has an "exclusive or" operator."""
        return _generatorprofile.GeneratorProfile_setHasXorOperator(self, hasXorOperator)

    def hasNotOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "not" operator."""
        return _generatorprofile.GeneratorProfile_hasNotOperator(self)

    def setHasNotOperator(self, hasNotOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "not" operator."""
        return _generatorprofile.GeneratorProfile_setHasNotOperator(self, hasNotOperator)

    def plusString(self):
        r"""Returns the string representing the MathML "plus" operator."""
        return _generatorprofile.GeneratorProfile_plusString(self)

    def setPlusString(self, plusString):
        r"""Sets the string representing the MathML "plus" operator."""
        return _generatorprofile.GeneratorProfile_setPlusString(self, plusString)

    def minusString(self):
        r"""Returns the string representing the MathML "minus" operator."""
        return _generatorprofile.GeneratorProfile_minusString(self)

    def setMinusString(self, minusString):
        r"""Sets the string representing the MathML "minus" operator."""
        return _generatorprofile.GeneratorProfile_setMinusString(self, minusString)

    def timesString(self):
        r"""Returns the string representing the MathML "times" operator."""
        return _generatorprofile.GeneratorProfile_timesString(self)

    def setTimesString(self, timesString):
        r"""Sets the string representing the MathML "times" operator."""
        return _generatorprofile.GeneratorProfile_setTimesString(self, timesString)

    def divideString(self):
        r"""Returns the string representing the MathML "divide" operator."""
        return _generatorprofile.GeneratorProfile_divideString(self)

    def setDivideString(self, divideString):
        r"""Sets the string representing the MathML "divide" operator."""
        return _generatorprofile.GeneratorProfile_setDivideString(self, divideString)

    def powerString(self):
        r"""Returns the string representing the MathML "power" operator or function."""
        return _generatorprofile.GeneratorProfile_powerString(self)

    def setPowerString(self, powerString):
        r"""Sets the string representing the MathML "power" operator or function."""
        return _generatorprofile.GeneratorProfile_setPowerString(self, powerString)

    def squareRootString(self):
        r"""Returns the string representing the MathML "square root" function."""
        return _generatorprofile.GeneratorProfile_squareRootString(self)

    def setSquareRootString(self, squareRootString):
        r"""Sets the string representing the MathML "square root" function."""
        return _generatorprofile.GeneratorProfile_setSquareRootString(self, squareRootString)

    def squareString(self):
        r"""Returns the string representing the MathML "square" function."""
        return _generatorprofile.GeneratorProfile_squareString(self)

    def setSquareString(self, squareString):
        r"""Sets the string representing the MathML "square" function."""
        return _generatorprofile.GeneratorProfile_setSquareString(self, squareString)

    def absoluteValueString(self):
        r"""Returns the string representing the MathML "absolute value" function."""
        return _generatorprofile.GeneratorProfile_absoluteValueString(self)

    def setAbsoluteValueString(self, absoluteValueString):
        r"""Sets the string representing the MathML "absolute value" function."""
        return _generatorprofile.GeneratorProfile_setAbsoluteValueString(self, absoluteValueString)

    def exponentialString(self):
        r"""Returns the string representing the MathML "exponential" function."""
        return _generatorprofile.GeneratorProfile_exponentialString(self)

    def setExponentialString(self, exponentialString):
        r"""Sets the string representing the MathML "exponential" function."""
        return _generatorprofile.GeneratorProfile_setExponentialString(self, exponentialString)

    def naturalLogarithmString(self):
        r"""Returns the string representing the MathML "natural logarithm" function."""
        return _generatorprofile.GeneratorProfile_naturalLogarithmString(self)

    def setNaturalLogarithmString(self, naturalLogarithmString):
        r"""Sets the string representing the MathML "natural logarithm" function."""
        return _generatorprofile.GeneratorProfile_setNaturalLogarithmString(self, naturalLogarithmString)

    def commonLogarithmString(self):
        r"""Returns the string representing the MathML "common logarithm" function."""
        return _generatorprofile.GeneratorProfile_commonLogarithmString(self)

    def setCommonLogarithmString(self, commonLogarithmString):
        r"""Sets the string representing the MathML "common logarithm" function."""
        return _generatorprofile.GeneratorProfile_setCommonLogarithmString(self, commonLogarithmString)

    def ceilingString(self):
        r"""Returns the string representing the MathML "ceiling" function."""
        return _generatorprofile.GeneratorProfile_ceilingString(self)

    def setCeilingString(self, ceilingString):
        r"""Sets the string representing the MathML "ceiling" function."""
        return _generatorprofile.GeneratorProfile_setCeilingString(self, ceilingString)

    def floorString(self):
        r"""Returns the string representing the MathML "floor" function."""
        return _generatorprofile.GeneratorProfile_floorString(self)

    def setFloorString(self, floorString):
        r"""Sets the string representing the MathML "floor" function."""
        return _generatorprofile.GeneratorProfile_setFloorString(self, floorString)

    def minString(self):
        r"""Returns the string representing the MathML "minimum" function."""
        return _generatorprofile.GeneratorProfile_minString(self)

    def setMinString(self, minString):
        r"""Sets the string representing the MathML "minimum" function."""
        return _generatorprofile.GeneratorProfile_setMinString(self, minString)

    def maxString(self):
        r"""Returns the string representing the MathML "maximum" function."""
        return _generatorprofile.GeneratorProfile_maxString(self)

    def setMaxString(self, maxString):
        r"""Sets the string representing the MathML "maximum" function."""
        return _generatorprofile.GeneratorProfile_setMaxString(self, maxString)

    def remString(self):
        r"""Returns the string representing the MathML "remainder" function."""
        return _generatorprofile.GeneratorProfile_remString(self)

    def setRemString(self, remString):
        r"""Sets the string representing the MathML "remainder" function."""
        return _generatorprofile.GeneratorProfile_setRemString(self, remString)

    def hasPowerOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "power" operator."""
        return _generatorprofile.GeneratorProfile_hasPowerOperator(self)

    def setHasPowerOperator(self, hasPowerOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "power" operator."""
        return _generatorprofile.GeneratorProfile_setHasPowerOperator(self, hasPowerOperator)

    def sinString(self):
        r"""Returns the string representing the MathML "sine" function."""
        return _generatorprofile.GeneratorProfile_sinString(self)

    def setSinString(self, sinString):
        r"""Sets the string representing the MathML "sine" function."""
        return _generatorprofile.GeneratorProfile_setSinString(self, sinString)

    def cosString(self):
        r"""Returns the string representing the MathML "cosine" function."""
        return _generatorprofile.GeneratorProfile_cosString(self)

    def setCosString(self, cosString):
        r"""Sets the string representing the MathML "cosine" function."""
        return _generatorprofile.GeneratorProfile_setCosString(self, cosString)

    def tanString(self):
        r"""Returns the string representing the MathML "tangent" function."""
        return _generatorprofile.GeneratorProfile_tanString(self)

    def setTanString(self, tanString):
        r"""Sets the string representing the MathML "tangent" function."""
        return _generatorprofile.GeneratorProfile_setTanString(self, tanString)

    def secString(self):
        r"""Returns the string representing the MathML "secant" function."""
        return _generatorprofile.GeneratorProfile_secString(self)

    def setSecString(self, secString):
        r"""Sets the string representing the MathML "secant" function."""
        return _generatorprofile.GeneratorProfile_setSecString(self, secString)

    def cscString(self):
        r"""Returns the string representing the MathML "cosecant" function."""
        return _generatorprofile.GeneratorProfile_cscString(self)

    def setCscString(self, cscString):
        r"""Sets the string representing the MathML "cosecant" function."""
        return _generatorprofile.GeneratorProfile_setCscString(self, cscString)

    def cotString(self):
        r"""Returns the string representing the MathML "cotangent" function."""
        return _generatorprofile.GeneratorProfile_cotString(self)

    def setCotString(self, cotString):
        r"""Sets the string representing the MathML "cotangent" function."""
        return _generatorprofile.GeneratorProfile_setCotString(self, cotString)

    def sinhString(self):
        r"""Returns the string representing the MathML "hyperbolic sine" function."""
        return _generatorprofile.GeneratorProfile_sinhString(self)

    def setSinhString(self, sinhString):
        r"""Sets the string representing the MathML "hyperbolic sine" function."""
        return _generatorprofile.GeneratorProfile_setSinhString(self, sinhString)

    def coshString(self):
        r"""Returns the string representing the MathML "hyperbolic cosine" function."""
        return _generatorprofile.GeneratorProfile_coshString(self)

    def setCoshString(self, coshString):
        r"""Sets the string representing the MathML "hyperbolic cosine" function."""
        return _generatorprofile.GeneratorProfile_setCoshString(self, coshString)

    def tanhString(self):
        r"""Returns the string representing the MathML "hyperbolic tangent" function."""
        return _generatorprofile.GeneratorProfile_tanhString(self)

    def setTanhString(self, tanhString):
        r"""Sets the string representing the MathML "hyperbolic tangent" function."""
        return _generatorprofile.GeneratorProfile_setTanhString(self, tanhString)

    def sechString(self):
        r"""Returns the string representing the MathML "hyperbolic secant" function."""
        return _generatorprofile.GeneratorProfile_sechString(self)

    def setSechString(self, sechString):
        r"""Sets the string representing the MathML "hyperbolic secant" function."""
        return _generatorprofile.GeneratorProfile_setSechString(self, sechString)

    def cschString(self):
        r"""Returns the string representing the MathML "hyperbolic cosecant" function."""
        return _generatorprofile.GeneratorProfile_cschString(self)

    def setCschString(self, cschString):
        r"""Sets the string representing the MathML "hyperbolic cosecant" function."""
        return _generatorprofile.GeneratorProfile_setCschString(self, cschString)

    def cothString(self):
        r"""Returns the string representing the MathML "hyperbolic cotangent" function."""
        return _generatorprofile.GeneratorProfile_cothString(self)

    def setCothString(self, cothString):
        r"""Sets the string representing the MathML "hyperbolic cotangent" function."""
        return _generatorprofile.GeneratorProfile_setCothString(self, cothString)

    def asinString(self):
        r"""Returns the string representing the MathML "arc sine" function."""
        return _generatorprofile.GeneratorProfile_asinString(self)

    def setAsinString(self, asinString):
        r"""Sets the string representing the MathML "arc sine" function."""
        return _generatorprofile.GeneratorProfile_setAsinString(self, asinString)

    def acosString(self):
        r"""Returns the string representing the MathML "arc cosine" function."""
        return _generatorprofile.GeneratorProfile_acosString(self)

    def setAcosString(self, acosString):
        r"""Sets the string representing the MathML "arc cosine" function."""
        return _generatorprofile.GeneratorProfile_setAcosString(self, acosString)

    def atanString(self):
        r"""Returns the string representing the MathML "arc tangent" function."""
        return _generatorprofile.GeneratorProfile_atanString(self)

    def setAtanString(self, atanString):
        r"""Sets the string representing the MathML "arc tangent" function."""
        return _generatorprofile.GeneratorProfile_setAtanString(self, atanString)

    def asecString(self):
        r"""Returns the string representing the MathML "arc secant" function."""
        return _generatorprofile.GeneratorProfile_asecString(self)

    def setAsecString(self, asecString):
        r"""Sets the string representing the MathML "arc secant" function."""
        return _generatorprofile.GeneratorProfile_setAsecString(self, asecString)

    def acscString(self):
        r"""Returns the string representing the MathML "arc cosecant" function."""
        return _generatorprofile.GeneratorProfile_acscString(self)

    def setAcscString(self, acscString):
        r"""Sets the string representing the MathML "arc cosecant" function."""
        return _generatorprofile.GeneratorProfile_setAcscString(self, acscString)

    def acotString(self):
        r"""Returns the string representing the MathML "arc cotangent" function."""
        return _generatorprofile.GeneratorProfile_acotString(self)

    def setAcotString(self, acotString):
        r"""Sets the string representing the MathML "arc cotangent" function."""
        return _generatorprofile.GeneratorProfile_setAcotString(self, acotString)

    def asinhString(self):
        r"""Returns the string representing the MathML "arc hyperbolic sine" function."""
        return _generatorprofile.GeneratorProfile_asinhString(self)

    def setAsinhString(self, asinhString):
        r"""Sets the string representing the MathML "arc hyperbolic sine" function."""
        return _generatorprofile.GeneratorProfile_setAsinhString(self, asinhString)

    def acoshString(self):
        r"""Returns the string representing the MathML "arc hyperbolic cosine" function."""
        return _generatorprofile.GeneratorProfile_acoshString(self)

    def setAcoshString(self, acoshString):
        r"""Sets the string representing the MathML "arc hyperbolic cosine" function."""
        return _generatorprofile.GeneratorProfile_setAcoshString(self, acoshString)

    def atanhString(self):
        r"""Returns the string representing the MathML "arc hyperbolic tangent" function."""
        return _generatorprofile.GeneratorProfile_atanhString(self)

    def setAtanhString(self, atanhString):
        r"""Sets the string representing the MathML "arc hyperbolic tangent" function."""
        return _generatorprofile.GeneratorProfile_setAtanhString(self, atanhString)

    def asechString(self):
        r"""Returns the string representing the MathML "arc hyperbolic secant" function."""
        return _generatorprofile.GeneratorProfile_asechString(self)

    def setAsechString(self, asechString):
        r"""Sets the string representing the MathML "arc hyperbolic secant" function."""
        return _generatorprofile.GeneratorProfile_setAsechString(self, asechString)

    def acschString(self):
        r"""Returns the string representing the MathML "arc hyperbolic cosecant" function."""
        return _generatorprofile.GeneratorProfile_acschString(self)

    def setAcschString(self, acschString):
        r"""Sets the string representing the MathML "arc hyperbolic cosecant" function."""
        return _generatorprofile.GeneratorProfile_setAcschString(self, acschString)

    def acothString(self):
        r"""Returns the string representing the MathML "arc hyperbolic tangent" function."""
        return _generatorprofile.GeneratorProfile_acothString(self)

    def setAcothString(self, acothString):
        r"""Sets the string representing the MathML "arc hyperbolic tangent" function."""
        return _generatorprofile.GeneratorProfile_setAcothString(self, acothString)

    def conditionalOperatorIfString(self):
        r"""Returns the string representing the MathML "if" part of a "conditional" statement or operator."""
        return _generatorprofile.GeneratorProfile_conditionalOperatorIfString(self)

    def setConditionalOperatorIfString(self, conditionalOperatorIfString):
        r"""Sets the string representing the MathML "if" part of a "conditional" statement or operator."""
        return _generatorprofile.GeneratorProfile_setConditionalOperatorIfString(self, conditionalOperatorIfString)

    def conditionalOperatorElseString(self):
        r"""Returns the string representing the MathML "else" part of a "conditional" statement or operator."""
        return _generatorprofile.GeneratorProfile_conditionalOperatorElseString(self)

    def setConditionalOperatorElseString(self, conditionalOperatorElseString):
        r"""Sets the string representing the MathML "else" part of a "conditional" statement or operator."""
        return _generatorprofile.GeneratorProfile_setConditionalOperatorElseString(self, conditionalOperatorElseString)

    def piecewiseIfString(self):
        r"""Returns the string representing the MathML "if" part of a "piecewise" statement."""
        return _generatorprofile.GeneratorProfile_piecewiseIfString(self)

    def setPiecewiseIfString(self, piecewiseIfString):
        r"""Sets the string representing the MathML "if" part of a "piecewise" statement."""
        return _generatorprofile.GeneratorProfile_setPiecewiseIfString(self, piecewiseIfString)

    def piecewiseElseString(self):
        r"""Returns the string representing the MathML "else" part of a "piecewise" statement."""
        return _generatorprofile.GeneratorProfile_piecewiseElseString(self)

    def setPiecewiseElseString(self, piecewiseElseString):
        r"""Sets the string representing the MathML "else" part of a "piecewise" statement."""
        return _generatorprofile.GeneratorProfile_setPiecewiseElseString(self, piecewiseElseString)

    def hasConditionalOperator(self):
        r"""Tests if this :class:`GeneratorProfile` has a "conditional" operator."""
        return _generatorprofile.GeneratorProfile_hasConditionalOperator(self)

    def setHasConditionalOperator(self, hasConditionalOperator):
        r"""Sets whether this :class:`GeneratorProfile` has a "conditional" operator."""
        return _generatorprofile.GeneratorProfile_setHasConditionalOperator(self, hasConditionalOperator)

    def trueString(self):
        r"""Returns the string representing the MathML "true" boolean."""
        return _generatorprofile.GeneratorProfile_trueString(self)

    def setTrueString(self, trueString):
        r"""Sets the string representing the MathML "true" boolean."""
        return _generatorprofile.GeneratorProfile_setTrueString(self, trueString)

    def falseString(self):
        r"""Returns the string representing the MathML "false" boolean."""
        return _generatorprofile.GeneratorProfile_falseString(self)

    def setFalseString(self, falseString):
        r"""Sets the string representing the MathML "false" boolean."""
        return _generatorprofile.GeneratorProfile_setFalseString(self, falseString)

    def eString(self):
        r"""Returns the string representing the MathML "Euler's number"."""
        return _generatorprofile.GeneratorProfile_eString(self)

    def setEString(self, eString):
        r"""Sets the string representing the MathML "Euler's number"."""
        return _generatorprofile.GeneratorProfile_setEString(self, eString)

    def piString(self):
        r"""Returns the string representing the MathML "π" constant."""
        return _generatorprofile.GeneratorProfile_piString(self)

    def setPiString(self, piString):
        r"""Sets the string representing the MathML "π" constant."""
        return _generatorprofile.GeneratorProfile_setPiString(self, piString)

    def infString(self):
        r"""Returns the string representing the MathML "infinity" value."""
        return _generatorprofile.GeneratorProfile_infString(self)

    def setInfString(self, infString):
        r"""Sets the string representing the MathML "infinity" value."""
        return _generatorprofile.GeneratorProfile_setInfString(self, infString)

    def nanString(self):
        r"""Returns the string representing the MathML "not-a-number" value."""
        return _generatorprofile.GeneratorProfile_nanString(self)

    def setNanString(self, nanString):
        r"""Sets the string representing the MathML "not-a-number" value."""
        return _generatorprofile.GeneratorProfile_setNanString(self, nanString)

    def eqFunctionString(self):
        r"""Returns the string for the "equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_eqFunctionString(self)

    def setEqFunctionString(self, eqFunctionString):
        r"""Sets the string for the "equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_setEqFunctionString(self, eqFunctionString)

    def neqFunctionString(self):
        r"""Returns the string for the "not equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_neqFunctionString(self)

    def setNeqFunctionString(self, neqFunctionString):
        r"""Sets the string for the "not equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_setNeqFunctionString(self, neqFunctionString)

    def ltFunctionString(self):
        r"""Returns the string for the "less than" function implementation."""
        return _generatorprofile.GeneratorProfile_ltFunctionString(self)

    def setLtFunctionString(self, ltFunctionString):
        r"""Sets the string for the "less than" function implementation."""
        return _generatorprofile.GeneratorProfile_setLtFunctionString(self, ltFunctionString)

    def leqFunctionString(self):
        r"""Returns the string for the "less than or equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_leqFunctionString(self)

    def setLeqFunctionString(self, leqFunctionString):
        r"""Sets the string for the "less than or equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_setLeqFunctionString(self, leqFunctionString)

    def gtFunctionString(self):
        r"""Returns the string for the "greater than" function implementation."""
        return _generatorprofile.GeneratorProfile_gtFunctionString(self)

    def setGtFunctionString(self, gtFunctionString):
        r"""Sets the string for the "greater than" function implementation."""
        return _generatorprofile.GeneratorProfile_setGtFunctionString(self, gtFunctionString)

    def geqFunctionString(self):
        r"""Returns the string for the "greater than or equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_geqFunctionString(self)

    def setGeqFunctionString(self, geqFunctionString):
        r"""Sets the string for the "greater than or equal to" function implementation."""
        return _generatorprofile.GeneratorProfile_setGeqFunctionString(self, geqFunctionString)

    def andFunctionString(self):
        r"""Returns the string for the "and" function implementation."""
        return _generatorprofile.GeneratorProfile_andFunctionString(self)

    def setAndFunctionString(self, andFunctionString):
        r"""Sets the string for the "and" function implementation."""
        return _generatorprofile.GeneratorProfile_setAndFunctionString(self, andFunctionString)

    def orFunctionString(self):
        r"""Returns the string for the "or" function implementation."""
        return _generatorprofile.GeneratorProfile_orFunctionString(self)

    def setOrFunctionString(self, orFunctionString):
        r"""Sets the string for the "or" function implementation."""
        return _generatorprofile.GeneratorProfile_setOrFunctionString(self, orFunctionString)

    def xorFunctionString(self):
        r"""Returns the string for the "exclusive or" function implementation."""
        return _generatorprofile.GeneratorProfile_xorFunctionString(self)

    def setXorFunctionString(self, xorFunctionString):
        r"""Sets the string for the "exclusive or" function implementation."""
        return _generatorprofile.GeneratorProfile_setXorFunctionString(self, xorFunctionString)

    def notFunctionString(self):
        r"""Returns the string for the "not" function implementation."""
        return _generatorprofile.GeneratorProfile_notFunctionString(self)

    def setNotFunctionString(self, notFunctionString):
        r"""Sets the string for the "not" function implementation."""
        return _generatorprofile.GeneratorProfile_setNotFunctionString(self, notFunctionString)

    def minFunctionString(self):
        r"""Returns the string for the "minimum" function implementation."""
        return _generatorprofile.GeneratorProfile_minFunctionString(self)

    def setMinFunctionString(self, minFunctionString):
        r"""Sets the string for the "minimum" function implementation."""
        return _generatorprofile.GeneratorProfile_setMinFunctionString(self, minFunctionString)

    def maxFunctionString(self):
        r"""Returns the string for the "maximum" function implementation."""
        return _generatorprofile.GeneratorProfile_maxFunctionString(self)

    def setMaxFunctionString(self, maxFunctionString):
        r"""Sets the string for the "maximum" function implementation."""
        return _generatorprofile.GeneratorProfile_setMaxFunctionString(self, maxFunctionString)

    def secFunctionString(self):
        r"""Returns the string for the "secant" function implementation."""
        return _generatorprofile.GeneratorProfile_secFunctionString(self)

    def setSecFunctionString(self, secFunctionString):
        r"""Sets the string for the "secant" function implementation."""
        return _generatorprofile.GeneratorProfile_setSecFunctionString(self, secFunctionString)

    def cscFunctionString(self):
        r"""Returns the string for the "cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_cscFunctionString(self)

    def setCscFunctionString(self, cscFunctionString):
        r"""Sets the string for the "cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_setCscFunctionString(self, cscFunctionString)

    def cotFunctionString(self):
        r"""Returns the string for the "cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_cotFunctionString(self)

    def setCotFunctionString(self, cotFunctionString):
        r"""Sets the string for the "cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_setCotFunctionString(self, cotFunctionString)

    def sechFunctionString(self):
        r"""Returns the string for the "hyperbolic secant" function implementation."""
        return _generatorprofile.GeneratorProfile_sechFunctionString(self)

    def setSechFunctionString(self, sechFunctionString):
        r"""Sets the string for the "hyperbolic secant" function implementation."""
        return _generatorprofile.GeneratorProfile_setSechFunctionString(self, sechFunctionString)

    def cschFunctionString(self):
        r"""Returns the string for the "hyperbolic cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_cschFunctionString(self)

    def setCschFunctionString(self, cschFunctionString):
        r"""Sets the string for the "hyperbolic cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_setCschFunctionString(self, cschFunctionString)

    def cothFunctionString(self):
        r"""Returns the string for the "hyperbolic cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_cothFunctionString(self)

    def setCothFunctionString(self, cothFunctionString):
        r"""Sets the string for the "hyperbolic cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_setCothFunctionString(self, cothFunctionString)

    def asecFunctionString(self):
        r"""Returns the string for the "arc secant" function implementation."""
        return _generatorprofile.GeneratorProfile_asecFunctionString(self)

    def setAsecFunctionString(self, asecFunctionString):
        r"""Sets the string for the "arc secant" function implementation."""
        return _generatorprofile.GeneratorProfile_setAsecFunctionString(self, asecFunctionString)

    def acscFunctionString(self):
        r"""Returns the string for the "arc cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_acscFunctionString(self)

    def setAcscFunctionString(self, acscFunctionString):
        r"""Sets the string for the "arc cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_setAcscFunctionString(self, acscFunctionString)

    def acotFunctionString(self):
        r"""Returns the string for the "arc cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_acotFunctionString(self)

    def setAcotFunctionString(self, acotFunctionString):
        r"""Sets the string for the "arc cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_setAcotFunctionString(self, acotFunctionString)

    def asechFunctionString(self):
        r"""Returns the string for the "arc hyperbolic secant" function implementation."""
        return _generatorprofile.GeneratorProfile_asechFunctionString(self)

    def setAsechFunctionString(self, asechFunctionString):
        r"""Sets the string for the "arc hyperbolic secant" function implementation."""
        return _generatorprofile.GeneratorProfile_setAsechFunctionString(self, asechFunctionString)

    def acschFunctionString(self):
        r"""Returns the string for the "arc hyperbolic cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_acschFunctionString(self)

    def setAcschFunctionString(self, acschFunctionString):
        r"""Sets the string for the "arc hyperbolic cosecant" function implementation."""
        return _generatorprofile.GeneratorProfile_setAcschFunctionString(self, acschFunctionString)

    def acothFunctionString(self):
        r"""Returns the string for the "arc hyperbolic cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_acothFunctionString(self)

    def setAcothFunctionString(self, acothFunctionString):
        r"""Sets the string for the "arc hyperbolic cotangent" function implementation."""
        return _generatorprofile.GeneratorProfile_setAcothFunctionString(self, acothFunctionString)

    def commentString(self):
        r"""Returns the string for a comment."""
        return _generatorprofile.GeneratorProfile_commentString(self)

    def setCommentString(self, commentString):
        r"""
        Sets the string for a comment. To be useful, the string should contain the <CODE> tag, which will be replaced
        with a (proper) comment.
        """
        return _generatorprofile.GeneratorProfile_setCommentString(self, commentString)

    def originCommentString(self):
        r"""Returns the string for an origin comment."""
        return _generatorprofile.GeneratorProfile_originCommentString(self)

    def setOriginCommentString(self, originCommentString):
        r"""
        Sets the string for an origin comment. To be useful, the string should contain the <PROFILE_INFORMATION> and
        <LIBCELLML_VERSION> tags, which will be replaced with a statement about the profile and the version of libCellML
        used respectively.
        """
        return _generatorprofile.GeneratorProfile_setOriginCommentString(self, originCommentString)

    def interfaceFileNameString(self):
        r"""Returns the string for the interface file name."""
        return _generatorprofile.GeneratorProfile_interfaceFileNameString(self)

    def setInterfaceFileNameString(self, interfaceFileNameString):
        r"""Sets the string for the interface file name."""
        return _generatorprofile.GeneratorProfile_setInterfaceFileNameString(self, interfaceFileNameString)

    def interfaceHeaderString(self):
        r"""Returns the string for the interface of a header."""
        return _generatorprofile.GeneratorProfile_interfaceHeaderString(self)

    def setInterfaceHeaderString(self, interfaceHeaderString):
        r"""Sets the string for the interface of a header."""
        return _generatorprofile.GeneratorProfile_setInterfaceHeaderString(self, interfaceHeaderString)

    def implementationHeaderString(self):
        r"""Returns the string for an implementation header."""
        return _generatorprofile.GeneratorProfile_implementationHeaderString(self)

    def setImplementationHeaderString(self, implementationHeaderString):
        r"""Sets the string for an implementation header."""
        return _generatorprofile.GeneratorProfile_setImplementationHeaderString(self, implementationHeaderString)

    def interfaceVersionString(self):
        r"""Returns the string for the interface of the version constant."""
        return _generatorprofile.GeneratorProfile_interfaceVersionString(self)

    def setInterfaceVersionString(self, interfaceVersionString):
        r"""Sets the string for the interface of the version constant."""
        return _generatorprofile.GeneratorProfile_setInterfaceVersionString(self, interfaceVersionString)

    def implementationVersionString(self):
        r"""Returns the string for the implementation of the version constant."""
        return _generatorprofile.GeneratorProfile_implementationVersionString(self)

    def setImplementationVersionString(self, implementationVersionString):
        r"""Sets the string for the implementation of the version constant."""
        return _generatorprofile.GeneratorProfile_setImplementationVersionString(self, implementationVersionString)

    def interfaceLibcellmlVersionString(self):
        r"""Returns the string for the interface of the libCellML version constant."""
        return _generatorprofile.GeneratorProfile_interfaceLibcellmlVersionString(self)

    def setInterfaceLibcellmlVersionString(self, interfaceLibcellmlVersionString):
        r"""Sets the string for the interface of the libCellML version constant."""
        return _generatorprofile.GeneratorProfile_setInterfaceLibcellmlVersionString(self, interfaceLibcellmlVersionString)

    def implementationLibcellmlVersionString(self):
        r"""Returns the string for the implementation of the libCellML version constant."""
        return _generatorprofile.GeneratorProfile_implementationLibcellmlVersionString(self)

    def setImplementationLibcellmlVersionString(self, implementationLibcellmlVersionString):
        r"""Sets the string for the implementation of the libCellML version constant."""
        return _generatorprofile.GeneratorProfile_setImplementationLibcellmlVersionString(self, implementationLibcellmlVersionString)

    def interfaceStateCountString(self):
        r"""Returns the string for the interface of the state count constant."""
        return _generatorprofile.GeneratorProfile_interfaceStateCountString(self)

    def setInterfaceStateCountString(self, interfaceStateCountString):
        r"""Sets the string for the interface of the state count constant."""
        return _generatorprofile.GeneratorProfile_setInterfaceStateCountString(self, interfaceStateCountString)

    def implementationStateCountString(self):
        r"""Returns the string for the implementation of the state count constant."""
        return _generatorprofile.GeneratorProfile_implementationStateCountString(self)

    def setImplementationStateCountString(self, implementationStateCountString):
        r"""
        Sets the string for the implementation of the state count constant. To be useful, the string should contain the
        <STATE_COUNT> tag, which will be replaced with the number of states in the model.
        """
        return _generatorprofile.GeneratorProfile_setImplementationStateCountString(self, implementationStateCountString)

    def interfaceVariableCountString(self):
        r"""Returns the string for the interface of the variable count constant."""
        return _generatorprofile.GeneratorProfile_interfaceVariableCountString(self)

    def setInterfaceVariableCountString(self, interfaceVariableCountString):
        r"""Sets the string for the interface of the variable count constant."""
        return _generatorprofile.GeneratorProfile_setInterfaceVariableCountString(self, interfaceVariableCountString)

    def implementationVariableCountString(self):
        r"""Returns the string for the implementation of the variable count constant."""
        return _generatorprofile.GeneratorProfile_implementationVariableCountString(self)

    def setImplementationVariableCountString(self, implementationVariableCountString):
        r"""
        Sets the string for the implementation of the variable count constant. To be useful, the string should contain
        the <VARIABLE_COUNT> tag, which will be replaced with the number of states in the model.
        """
        return _generatorprofile.GeneratorProfile_setImplementationVariableCountString(self, implementationVariableCountString)

    def variableTypeObjectString(self, forDifferentialModel, withExternalVariables):
        r"""Returns the string for the data structure for the variable type object."""
        return _generatorprofile.GeneratorProfile_variableTypeObjectString(self, forDifferentialModel, withExternalVariables)

    def setVariableTypeObjectString(self, forDifferentialModel, withExternalVariables, variableTypeObjectString):
        r"""Sets the string for the data structure for the variable type object."""
        return _generatorprofile.GeneratorProfile_setVariableTypeObjectString(self, forDifferentialModel, withExternalVariables, variableTypeObjectString)

    def variableOfIntegrationVariableTypeString(self):
        r"""Returns the string for the name of the variable of integration variable type."""
        return _generatorprofile.GeneratorProfile_variableOfIntegrationVariableTypeString(self)

    def setVariableOfIntegrationVariableTypeString(self, variableOfIntegrationVariableTypeString):
        r"""Sets the string for the name of the variable of integration variable type."""
        return _generatorprofile.GeneratorProfile_setVariableOfIntegrationVariableTypeString(self, variableOfIntegrationVariableTypeString)

    def stateVariableTypeString(self):
        r"""Returns the string for the name of the state variable type."""
        return _generatorprofile.GeneratorProfile_stateVariableTypeString(self)

    def setStateVariableTypeString(self, stateVariableTypeString):
        r"""Sets the string for the name of the state variable type."""
        return _generatorprofile.GeneratorProfile_setStateVariableTypeString(self, stateVariableTypeString)

    def constantVariableTypeString(self):
        r"""Returns the string for the name of the constant variable type."""
        return _generatorprofile.GeneratorProfile_constantVariableTypeString(self)

    def setConstantVariableTypeString(self, constantVariableTypeString):
        r"""Sets the string for the name of the constant variable type."""
        return _generatorprofile.GeneratorProfile_setConstantVariableTypeString(self, constantVariableTypeString)

    def computedConstantVariableTypeString(self):
        r"""Returns the string for the name of the computed constant variable type."""
        return _generatorprofile.GeneratorProfile_computedConstantVariableTypeString(self)

    def setComputedConstantVariableTypeString(self, computedConstantVariableTypeString):
        r"""Sets the string for the name of the computed constant variable type."""
        return _generatorprofile.GeneratorProfile_setComputedConstantVariableTypeString(self, computedConstantVariableTypeString)

    def algebraicVariableTypeString(self):
        r"""Returns the string for the name of the algebraic variable type."""
        return _generatorprofile.GeneratorProfile_algebraicVariableTypeString(self)

    def setAlgebraicVariableTypeString(self, algebraicVariableTypeString):
        r"""Sets the string for the name of the algebraic variable type."""
        return _generatorprofile.GeneratorProfile_setAlgebraicVariableTypeString(self, algebraicVariableTypeString)

    def externalVariableTypeString(self):
        r"""Returns the string for the name of the external variable type."""
        return _generatorprofile.GeneratorProfile_externalVariableTypeString(self)

    def setExternalVariableTypeString(self, externalVariableTypeString):
        r"""Sets the string for the name of the external variable type."""
        return _generatorprofile.GeneratorProfile_setExternalVariableTypeString(self, externalVariableTypeString)

    def variableInfoObjectString(self):
        r"""Returns the string for the data structure for the variable information object."""
        return _generatorprofile.GeneratorProfile_variableInfoObjectString(self)

    def setVariableInfoObjectString(self, variableInfoObjectString):
        r"""
        Sets the string for the data structure for the variable information object. To be useful, the string should
        contain the <NAME_SIZE>, <UNITS_SIZE> and <COMPONENT_SIZE> tags, which will be replaced with the maximum size of
        a string for holding the name of a component, variable and units, respectively.
        """
        return _generatorprofile.GeneratorProfile_setVariableInfoObjectString(self, variableInfoObjectString)

    def interfaceVoiInfoString(self):
        r"""Returns the string for the interface of some information about the variable of integration."""
        return _generatorprofile.GeneratorProfile_interfaceVoiInfoString(self)

    def setInterfaceVoiInfoString(self, interfaceVoiInfoString):
        r"""Sets the string for the interface of some information about the variable of integration."""
        return _generatorprofile.GeneratorProfile_setInterfaceVoiInfoString(self, interfaceVoiInfoString)

    def implementationVoiInfoString(self):
        r"""Returns the string for the implementation of some information about the variable of integration."""
        return _generatorprofile.GeneratorProfile_implementationVoiInfoString(self)

    def setImplementationVoiInfoString(self, implementationVoiInfoString):
        r"""
        Sets the string for the implementation of some information about the variable of integration. To be useful, the
        string should contain the <CODE> tag, which will be replaced with some information about the variable of
        integration.
        """
        return _generatorprofile.GeneratorProfile_setImplementationVoiInfoString(self, implementationVoiInfoString)

    def interfaceStateInfoString(self):
        r"""Returns the string for the interface of some information about the different states."""
        return _generatorprofile.GeneratorProfile_interfaceStateInfoString(self)

    def setInterfaceStateInfoString(self, interfaceStateInfoString):
        r"""Sets the string for the interface of some information about the different states."""
        return _generatorprofile.GeneratorProfile_setInterfaceStateInfoString(self, interfaceStateInfoString)

    def implementationStateInfoString(self):
        r"""Returns the string for the implementation of some information about the different states."""
        return _generatorprofile.GeneratorProfile_implementationStateInfoString(self)

    def setImplementationStateInfoString(self, implementationStateInfoString):
        r"""
        Sets the string for the implementation of some information about the different states. To be useful, the string
        should contain the <CODE> tag, which will be replaced with some information about the different states.
        """
        return _generatorprofile.GeneratorProfile_setImplementationStateInfoString(self, implementationStateInfoString)

    def interfaceVariableInfoString(self):
        r"""Returns the string for the interface of some information about the different variables."""
        return _generatorprofile.GeneratorProfile_interfaceVariableInfoString(self)

    def setInterfaceVariableInfoString(self, interfaceVariableInfoString):
        r"""Sets the string for the interface of some information about the different variables."""
        return _generatorprofile.GeneratorProfile_setInterfaceVariableInfoString(self, interfaceVariableInfoString)

    def implementationVariableInfoString(self):
        r"""Returns the string for the implementation of some information about the different variables."""
        return _generatorprofile.GeneratorProfile_implementationVariableInfoString(self)

    def setImplementationVariableInfoString(self, implementationVariableInfoString):
        r"""
        Sets the string for the implementation of some information about the different variables. To be useful, the
        string should contain the <CODE> tag, which will be replaced with some information about the different
        variables.
        """
        return _generatorprofile.GeneratorProfile_setImplementationVariableInfoString(self, implementationVariableInfoString)

    def variableInfoEntryString(self):
        r"""Returns the string for an entry in an array for some information about a variable."""
        return _generatorprofile.GeneratorProfile_variableInfoEntryString(self)

    def setVariableInfoEntryString(self, variableInfoEntryString):
        r"""
        Sets the string for an entry in an array for some information about a variable. To be useful, the string should
        contain the <COMPONENT>, <NAME> and <UNITS> tags, which will be replaced with the name of the component, name
        and units of a variable respectively.
        """
        return _generatorprofile.GeneratorProfile_setVariableInfoEntryString(self, variableInfoEntryString)

    def voiString(self):
        r"""Returns the string for the name of the variable of integration."""
        return _generatorprofile.GeneratorProfile_voiString(self)

    def setVoiString(self, voiString):
        r"""Sets the string for the name of the variable of integration."""
        return _generatorprofile.GeneratorProfile_setVoiString(self, voiString)

    def statesArrayString(self):
        r"""Returns the string for the name of the states array."""
        return _generatorprofile.GeneratorProfile_statesArrayString(self)

    def setStatesArrayString(self, statesArrayString):
        r"""Sets the string for the name of the states array."""
        return _generatorprofile.GeneratorProfile_setStatesArrayString(self, statesArrayString)

    def ratesArrayString(self):
        r"""Returns the string for the name of the rates array."""
        return _generatorprofile.GeneratorProfile_ratesArrayString(self)

    def setRatesArrayString(self, ratesArrayString):
        r"""Sets the string for the name of the rates array."""
        return _generatorprofile.GeneratorProfile_setRatesArrayString(self, ratesArrayString)

    def variablesArrayString(self):
        r"""Returns the string for the name of the variables array."""
        return _generatorprofile.GeneratorProfile_variablesArrayString(self)

    def setVariablesArrayString(self, variablesArrayString):
        r"""Sets the string for the name of the variables array."""
        return _generatorprofile.GeneratorProfile_setVariablesArrayString(self, variablesArrayString)

    def externalVariableMethodTypeDefinitionString(self, forDifferentialModel):
        r"""Returns the string for the type definition of an external variable method."""
        return _generatorprofile.GeneratorProfile_externalVariableMethodTypeDefinitionString(self, forDifferentialModel)

    def setExternalVariableMethodTypeDefinitionString(self, forDifferentialModel, externalVariableMethodTypeDefinitionString):
        r"""Sets the string for the type definition of an external variable method."""
        return _generatorprofile.GeneratorProfile_setExternalVariableMethodTypeDefinitionString(self, forDifferentialModel, externalVariableMethodTypeDefinitionString)

    def externalVariableMethodCallString(self, forDifferentialModel):
        r"""Returns the string for the call to the external variable method."""
        return _generatorprofile.GeneratorProfile_externalVariableMethodCallString(self, forDifferentialModel)

    def setExternalVariableMethodCallString(self, forDifferentialModel, externalVariableMethodCallString):
        r"""Sets the string for the call to the external variable method."""
        return _generatorprofile.GeneratorProfile_setExternalVariableMethodCallString(self, forDifferentialModel, externalVariableMethodCallString)

    def rootFindingInfoObjectString(self, forDifferentialModel):
        r"""Returns the string for the data structure for the root finding information object."""
        return _generatorprofile.GeneratorProfile_rootFindingInfoObjectString(self, forDifferentialModel)

    def setRootFindingInfoObjectString(self, forDifferentialModel, rootFindingInfoObjectString):
        r"""Sets the string for the data structure for the root finding information object."""
        return _generatorprofile.GeneratorProfile_setRootFindingInfoObjectString(self, forDifferentialModel, rootFindingInfoObjectString)

    def externNlaSolveMethodString(self):
        r"""Returns the string for the external NLA solve method."""
        return _generatorprofile.GeneratorProfile_externNlaSolveMethodString(self)

    def setExternNlaSolveMethodString(self, externNlaSolveMethodString):
        r"""Sets the string for the external NLA solve method."""
        return _generatorprofile.GeneratorProfile_setExternNlaSolveMethodString(self, externNlaSolveMethodString)

    def findRootCallString(self, forDifferentialModel):
        r"""Returns the string for the call to the find root method."""
        return _generatorprofile.GeneratorProfile_findRootCallString(self, forDifferentialModel)

    def setFindRootCallString(self, forDifferentialModel, findRootCallString):
        r"""Sets the string for the call to the find root method."""
        return _generatorprofile.GeneratorProfile_setFindRootCallString(self, forDifferentialModel, findRootCallString)

    def findRootMethodString(self, forDifferentialModel):
        r"""Returns the string for the find root method."""
        return _generatorprofile.GeneratorProfile_findRootMethodString(self, forDifferentialModel)

    def setFindRootMethodString(self, forDifferentialModel, findRootMethodString):
        r"""Sets the string for the find root method."""
        return _generatorprofile.GeneratorProfile_setFindRootMethodString(self, forDifferentialModel, findRootMethodString)

    def nlaSolveCallString(self, forDifferentialModel):
        r"""Returns the string for the call to the NLA solve method."""
        return _generatorprofile.GeneratorProfile_nlaSolveCallString(self, forDifferentialModel)

    def setNlaSolveCallString(self, forDifferentialModel, nlaSolveCallString):
        r"""Sets the string for the call to the NLA solve method."""
        return _generatorprofile.GeneratorProfile_setNlaSolveCallString(self, forDifferentialModel, nlaSolveCallString)

    def objectiveFunctionMethodString(self, forDifferentialModel):
        r"""Returns the string for the objective function method."""
        return _generatorprofile.GeneratorProfile_objectiveFunctionMethodString(self, forDifferentialModel)

    def setObjectiveFunctionMethodString(self, forDifferentialModel, objectiveFunctionMethodString):
        r"""Sets the string for the objective function method."""
        return _generatorprofile.GeneratorProfile_setObjectiveFunctionMethodString(self, forDifferentialModel, objectiveFunctionMethodString)

    def uArrayString(self):
        r"""Returns the string for the u array used in the objective function and find root methods."""
        return _generatorprofile.GeneratorProfile_uArrayString(self)

    def setUArrayString(self, uArrayString):
        r"""Sets the string for the u array used in the objective function and find root methods."""
        return _generatorprofile.GeneratorProfile_setUArrayString(self, uArrayString)

    def fArrayString(self):
        r"""Returns the string for the f array used in the objective function and find root methods."""
        return _generatorprofile.GeneratorProfile_fArrayString(self)

    def setFArrayString(self, fArrayString):
        r"""Sets the string for the f array used in the objective function and find root methods."""
        return _generatorprofile.GeneratorProfile_setFArrayString(self, fArrayString)

    def interfaceCreateStatesArrayMethodString(self):
        r"""Returns the string for the interface to create the states array."""
        return _generatorprofile.GeneratorProfile_interfaceCreateStatesArrayMethodString(self)

    def setInterfaceCreateStatesArrayMethodString(self, interfaceCreateStatesArrayMethodString):
        r"""
        Sets the string for the interface to create the states array. To be useful, the string should contain the <CODE>
        tag, which will be replaced with some code to create the states array.
        """
        return _generatorprofile.GeneratorProfile_setInterfaceCreateStatesArrayMethodString(self, interfaceCreateStatesArrayMethodString)

    def implementationCreateStatesArrayMethodString(self):
        r"""Returns the string for the implementation to create the states array."""
        return _generatorprofile.GeneratorProfile_implementationCreateStatesArrayMethodString(self)

    def setImplementationCreateStatesArrayMethodString(self, implementationCreateStatesArrayMethodString):
        r"""
        Sets the string for the implementation to create the states array. To be useful, the string should contain the
        <CODE> tag, which will be replaced with some code to create the states array.
        """
        return _generatorprofile.GeneratorProfile_setImplementationCreateStatesArrayMethodString(self, implementationCreateStatesArrayMethodString)

    def interfaceCreateVariablesArrayMethodString(self):
        r"""Returns the string for the interface to create variables array."""
        return _generatorprofile.GeneratorProfile_interfaceCreateVariablesArrayMethodString(self)

    def setInterfaceCreateVariablesArrayMethodString(self, interfaceCreateVariablesArrayMethodString):
        r"""
        Sets the string for the interface to create variables array. To be useful, the string should contain the <CODE>
        tag, which will be replaced with some code to create the variables array.
        """
        return _generatorprofile.GeneratorProfile_setInterfaceCreateVariablesArrayMethodString(self, interfaceCreateVariablesArrayMethodString)

    def implementationCreateVariablesArrayMethodString(self):
        r"""Returns the string for the implementation to create the variables array."""
        return _generatorprofile.GeneratorProfile_implementationCreateVariablesArrayMethodString(self)

    def setImplementationCreateVariablesArrayMethodString(self, implementationCreateVariablesArrayMethodString):
        r"""
        Sets the string for the implementation to create the variables array. To be useful, the string should contain the
        <CODE> tag, which will be replaced with some code to create the variables array.
        """
        return _generatorprofile.GeneratorProfile_setImplementationCreateVariablesArrayMethodString(self, implementationCreateVariablesArrayMethodString)

    def interfaceDeleteArrayMethodString(self):
        r"""Returns the string for the interface to delete an array."""
        return _generatorprofile.GeneratorProfile_interfaceDeleteArrayMethodString(self)

    def setInterfaceDeleteArrayMethodString(self, interfaceDeleteArrayMethodString):
        r"""Sets the string for the interface to delete an array."""
        return _generatorprofile.GeneratorProfile_setInterfaceDeleteArrayMethodString(self, interfaceDeleteArrayMethodString)

    def implementationDeleteArrayMethodString(self):
        r"""Returns the string for the implementation to delete an array."""
        return _generatorprofile.GeneratorProfile_implementationDeleteArrayMethodString(self)

    def setImplementationDeleteArrayMethodString(self, implementationDeleteArrayMethodString):
        r"""Sets the string for the implementation to delete an array."""
        return _generatorprofile.GeneratorProfile_setImplementationDeleteArrayMethodString(self, implementationDeleteArrayMethodString)

    def interfaceInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables):
        r"""Returns the string for the interface to initialise variables."""
        return _generatorprofile.GeneratorProfile_interfaceInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables)

    def setInterfaceInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables, interfaceInitialiseVariablesMethodString):
        r"""Sets the string for the interface to initialise variables."""
        return _generatorprofile.GeneratorProfile_setInterfaceInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables, interfaceInitialiseVariablesMethodString)

    def implementationInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables):
        r"""Returns the string for the implementation to initialise variables."""
        return _generatorprofile.GeneratorProfile_implementationInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables)

    def setImplementationInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables, implementationInitialiseVariablesMethodString):
        r"""Sets the string for the implementation to initialise variables."""
        return _generatorprofile.GeneratorProfile_setImplementationInitialiseVariablesMethodString(self, forDifferentialModel, withExternalVariables, implementationInitialiseVariablesMethodString)

    def interfaceComputeComputedConstantsMethodString(self):
        r"""Returns the string for the interface to compute computed constants."""
        return _generatorprofile.GeneratorProfile_interfaceComputeComputedConstantsMethodString(self)

    def setInterfaceComputeComputedConstantsMethodString(self, interfaceComputeComputedConstantsMethodString):
        r"""Sets the string for the interface to compute computed constants."""
        return _generatorprofile.GeneratorProfile_setInterfaceComputeComputedConstantsMethodString(self, interfaceComputeComputedConstantsMethodString)

    def implementationComputeComputedConstantsMethodString(self):
        r"""Returns the string for the implementation to compute computed constants."""
        return _generatorprofile.GeneratorProfile_implementationComputeComputedConstantsMethodString(self)

    def setImplementationComputeComputedConstantsMethodString(self, implementationComputeComputedConstantsMethodString):
        r"""Sets the string for the implementation to compute computed constants."""
        return _generatorprofile.GeneratorProfile_setImplementationComputeComputedConstantsMethodString(self, implementationComputeComputedConstantsMethodString)

    def interfaceComputeRatesMethodString(self, withExternalVariables):
        r"""Returns the string for the interface to compute rates."""
        return _generatorprofile.GeneratorProfile_interfaceComputeRatesMethodString(self, withExternalVariables)

    def setInterfaceComputeRatesMethodString(self, withExternalVariables, interfaceComputeRatesMethodString):
        r"""Sets the string for the interface to compute rates."""
        return _generatorprofile.GeneratorProfile_setInterfaceComputeRatesMethodString(self, withExternalVariables, interfaceComputeRatesMethodString)

    def implementationComputeRatesMethodString(self, withExternalVariables):
        r"""Returns the string for the implementation to compute rates."""
        return _generatorprofile.GeneratorProfile_implementationComputeRatesMethodString(self, withExternalVariables)

    def setImplementationComputeRatesMethodString(self, withExternalVariables, implementationComputeRatesMethodString):
        r"""Sets the string for the implementation to compute rates."""
        return _generatorprofile.GeneratorProfile_setImplementationComputeRatesMethodString(self, withExternalVariables, implementationComputeRatesMethodString)

    def interfaceComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables):
        r"""Returns the string for the interface to compute variables."""
        return _generatorprofile.GeneratorProfile_interfaceComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables)

    def setInterfaceComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables, interfaceComputeVariablesMethodString):
        r"""Sets the string for the interface to compute variables."""
        return _generatorprofile.GeneratorProfile_setInterfaceComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables, interfaceComputeVariablesMethodString)

    def implementationComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables):
        r"""Returns the string for the implementation to compute variables."""
        return _generatorprofile.GeneratorProfile_implementationComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables)

    def setImplementationComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables, implementationComputeVariablesMethodString):
        r"""Sets the string for the implementation to compute variables."""
        return _generatorprofile.GeneratorProfile_setImplementationComputeVariablesMethodString(self, forDifferentialModel, withExternalVariables, implementationComputeVariablesMethodString)

    def emptyMethodString(self):
        r"""Returns the string for an empty method."""
        return _generatorprofile.GeneratorProfile_emptyMethodString(self)

    def setEmptyMethodString(self, emptyMethodString):
        r"""Sets the string for an empty method."""
        return _generatorprofile.GeneratorProfile_setEmptyMethodString(self, emptyMethodString)

    def indentString(self):
        r"""Returns the string for an indent."""
        return _generatorprofile.GeneratorProfile_indentString(self)

    def setIndentString(self, indentString):
        r"""Sets the string for an indent."""
        return _generatorprofile.GeneratorProfile_setIndentString(self, indentString)

    def openArrayInitialiserString(self):
        r"""Returns the string for opening an array initialiser."""
        return _generatorprofile.GeneratorProfile_openArrayInitialiserString(self)

    def setOpenArrayInitialiserString(self, openArrayInitialiserString):
        r"""Sets the string for opening an array initialiser."""
        return _generatorprofile.GeneratorProfile_setOpenArrayInitialiserString(self, openArrayInitialiserString)

    def closeArrayInitialiserString(self):
        r"""Returns the string for closing an array initialiser."""
        return _generatorprofile.GeneratorProfile_closeArrayInitialiserString(self)

    def setCloseArrayInitialiserString(self, closeArrayInitialiserString):
        r"""Sets the string for closing an array initialiser."""
        return _generatorprofile.GeneratorProfile_setCloseArrayInitialiserString(self, closeArrayInitialiserString)

    def openArrayString(self):
        r"""Returns the string for opening an array."""
        return _generatorprofile.GeneratorProfile_openArrayString(self)

    def setOpenArrayString(self, openArrayString):
        r"""Sets the string for opening an array."""
        return _generatorprofile.GeneratorProfile_setOpenArrayString(self, openArrayString)

    def closeArrayString(self):
        r"""Returns the string for closing an array."""
        return _generatorprofile.GeneratorProfile_closeArrayString(self)

    def setCloseArrayString(self, closeArrayString):
        r"""Sets the string for closing an array."""
        return _generatorprofile.GeneratorProfile_setCloseArrayString(self, closeArrayString)

    def arrayElementSeparatorString(self):
        r"""Returns the string for separating elements in an array."""
        return _generatorprofile.GeneratorProfile_arrayElementSeparatorString(self)

    def setArrayElementSeparatorString(self, arrayElementSeparatorString):
        r"""Sets the string for separating elements in an array."""
        return _generatorprofile.GeneratorProfile_setArrayElementSeparatorString(self, arrayElementSeparatorString)

    def stringDelimiterString(self):
        r"""Returns the string for a string delimiter."""
        return _generatorprofile.GeneratorProfile_stringDelimiterString(self)

    def setStringDelimiterString(self, stringDelimiterString):
        r"""Sets the string for a string delimiter."""
        return _generatorprofile.GeneratorProfile_setStringDelimiterString(self, stringDelimiterString)

    def commandSeparatorString(self):
        r"""Returns the string for a command separator."""
        return _generatorprofile.GeneratorProfile_commandSeparatorString(self)

    def setCommandSeparatorString(self, commandSeparatorString):
        r"""Sets the string for a command separator."""
        return _generatorprofile.GeneratorProfile_setCommandSeparatorString(self, commandSeparatorString)

    def __init__(self, *args):
        _generatorprofile.GeneratorProfile_swiginit(self, _generatorprofile.new_GeneratorProfile(*args))

# Register GeneratorProfile in _generatorprofile:
_generatorprofile.GeneratorProfile_swigregister(GeneratorProfile)

def GeneratorProfile_profileAsString(profile):
    r"""Returns the :enum:`GeneratorProfile::Profile` as a string for this :class:`GeneratorProfile`."""
    return _generatorprofile.GeneratorProfile_profileAsString(profile)


