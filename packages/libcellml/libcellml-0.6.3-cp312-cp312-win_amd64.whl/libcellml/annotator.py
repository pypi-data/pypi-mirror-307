# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _annotator
else:
    import _annotator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.enums
import libcellml.logger
import libcellml.types

# libCellML generated wrapper code starts here.

from libcellml.enums import CellmlElementType
from libcellml.types import AnyCellmlElement

class Annotator(libcellml.logger.Logger):
    r"""Interacts with CellML objects using their identifier attribute."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _annotator.delete_Annotator

    def setModel(self, model):
        r"""Set the model for this Annotator to work with."""
        return _annotator.Annotator_setModel(self, model)

    def item(self, *args):
        r"""Return the item with the given identifier."""
        return _annotator.Annotator_item(self, *args)

    def component(self, *args):
        r"""Return the component with the given identifier."""
        return _annotator.Annotator_component(self, *args)

    def componentEncapsulation(self, *args):
        r"""Return the ComponentPtr with the given component_ref identifier."""
        return _annotator.Annotator_componentEncapsulation(self, *args)

    def encapsulation(self, *args):
        r"""Return the model with the given encapsulation identifier."""
        return _annotator.Annotator_encapsulation(self, *args)

    def variable(self, *args):
        r"""Return the variable with the given identifier."""
        return _annotator.Annotator_variable(self, *args)

    def reset(self, *args):
        r"""Return the reset with the given identifier."""
        return _annotator.Annotator_reset(self, *args)

    def model(self, *args):
        r"""Return the model assigned to this Annotator or the model with the given identifier."""
        return _annotator.Annotator_model(self, *args)

    def importSource(self, *args):
        r"""Return the import source with the given identifier."""
        return _annotator.Annotator_importSource(self, *args)

    def units(self, *args):
        r"""Return the units with the given identifier."""
        return _annotator.Annotator_units(self, *args)

    def mapVariables(self, *args):
        r"""Return a VariablePair that defines a map_variables with given identifier."""
        return _annotator.Annotator_mapVariables(self, *args)

    def connection(self, *args):
        r"""Return a VariablePair that defines a connection with given identifier."""
        return _annotator.Annotator_connection(self, *args)

    def unitsItem(self, *args):
        r"""Returns a UnitsItem, a pair consisting of UnitsPtr and index which defines the Unit with the given identifier."""
        return _annotator.Annotator_unitsItem(self, *args)

    def testValue(self, *args):
        r"""Return the ResetPtr whose test_value has the given identifier."""
        return _annotator.Annotator_testValue(self, *args)

    def resetValue(self, *args):
        r"""Return the ResetPtr whose reset_value has the given identifier."""
        return _annotator.Annotator_resetValue(self, *args)

    def assignAllIds(self, *args):
        r"""Traverse the stored model and set any blank identifier fields to an automatically generated identifier."""
        return _annotator.Annotator_assignAllIds(self, *args)

    def assignIds(self, type):
        r"""Set all items of the given type in the stored model to automatically generated, unique strings."""
        return _annotator.Annotator_assignIds(self, type)

    def clearAllIds(self, *args):
        r"""Clear all the identifier strings in the given or stored model."""
        return _annotator.Annotator_clearAllIds(self, *args)

    def isUnique(self, id):
        r"""Return `true` if the given string occurs exactly once as an identifier in the stored model, `false` otherwise."""
        return _annotator.Annotator_isUnique(self, id)

    def ids(self):
        r"""Return a list of all identifier strings within the stored model."""
        return _annotator.Annotator_ids(self)

    def duplicateIds(self):
        r"""Return a list of identifier strings which are duplicated within the stored model."""
        return _annotator.Annotator_duplicateIds(self)

    def assignId(self, *args):
        r"""Function to assign an automatic identifier."""
        return _annotator.Annotator_assignId(self, *args)

    def itemCount(self, id):
        r"""Return the number of items in the stored model with the given identifier."""
        return _annotator.Annotator_itemCount(self, id)

    def hasModel(self):
        r"""Report whether the annotator has a model assigned or not."""
        return _annotator.Annotator_hasModel(self)

    def __init__(self):
        _annotator.Annotator_swiginit(self, _annotator.new_Annotator())

    def items(self, id):
        r"""Returns everything with the given identifier as a list of (type, item) tuples."""
        count = _annotator.Annotator_itemCount(self, id)
        itemsList = []
        for c in range(0, count):
            items_with_id = self.item(id, c)
            itemsList.append(items_with_id)
        return itemsList


# Register Annotator in _annotator:
_annotator.Annotator_swigregister(Annotator)

