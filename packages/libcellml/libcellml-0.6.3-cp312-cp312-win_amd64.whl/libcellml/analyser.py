# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _analyser
else:
    import _analyser

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.logger
import libcellml.types

# libCellML generated wrapper code starts here.

class Analyser(libcellml.logger.Logger):
    r"""Creates an :class:`Analyser` object."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _analyser.delete_Analyser

    def analyseModel(self, model):
        r"""Analyses the model to determine whether it can be used for simulation purposes."""
        return _analyser.Analyser_analyseModel(self, model)

    def addExternalVariable(self, externalVariable):
        r"""Adds a variable as an external variable to this analyser."""
        return _analyser.Analyser_addExternalVariable(self, externalVariable)

    def removeExternalVariable(self, *args):
        r"""
        Removes an external variable specified by 1) an index, 2) a :class:`Model` object, component name and variable
        name, or 3) a :class:`Variable` object. Returns `True` on success.
        """
        return _analyser.Analyser_removeExternalVariable(self, *args)

    def removeAllExternalVariables(self):
        r"""Removes all external variables from this analyser."""
        return _analyser.Analyser_removeAllExternalVariables(self)

    def containsExternalVariable(self, *args):
        r"""
        Tests if an external variable, specified by 1) a :class:`Model` object, component name and variable name, or 2)
        an :class:`AnalyserExternalVariable` object, is contained within this analyser.
        """
        return _analyser.Analyser_containsExternalVariable(self, *args)

    def externalVariable(self, *args):
        r"""
        Returns the external variable, specified by 1) an index, or 2) a :class:`Model` object, component name and
        variable name.
        """
        return _analyser.Analyser_externalVariable(self, *args)

    def externalVariableCount(self):
        r"""Returns the number of external variables this analyser contains."""
        return _analyser.Analyser_externalVariableCount(self)

    def model(self):
        r"""Returns the :class:`AnalysedModel` object which results from the analysis of a model."""
        return _analyser.Analyser_model(self)

    def __init__(self):
        _analyser.Analyser_swiginit(self, _analyser.new_Analyser())

# Register Analyser in _analyser:
_analyser.Analyser_swigregister(Analyser)

