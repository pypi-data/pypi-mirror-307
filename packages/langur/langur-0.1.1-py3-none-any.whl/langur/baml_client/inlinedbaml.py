###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "../c:\\Users\\anerli\\Sync\\projects\\langur\\langur\\baml_src\\assumptions.baml": "class Assumption {\r\n    assumption_id string @description(\"Unique natural language ID in lower_snake_case\")\r\n    assumption string @description(\"The assumption being made\")\r\n}\r\n\r\nfunction CreateAssumptions(task: string, observables: string) -> Assumption[] {\r\n    client Fallback\r\n    prompt #\"\r\n        You are a component of a graph-driven agentic LLM system.\r\n\r\n        Relevant context:\r\n        {{observables}}\r\n\r\n        ---\r\n\r\n        Given the following task, create assumptions about how to complete the task.\r\n        Task: {{task}}\r\n\r\n        {{ctx.output_format}}\r\n    \"#\r\n}",
    "../c:\\Users\\anerli\\Sync\\projects\\langur\\langur\\baml_src\\clients.baml": "// In Langur, clients are defined with a ClientRegistry programatically - so these are just for testing.\r\n// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> Fallback {\r\n    provider anthropic\r\n    options {\r\n        model \"claude-3-5-sonnet-20241022\"\r\n        api_key env.ANTHROPIC_API_KEY\r\n        temperature 0.0\r\n    }\r\n}\r\n",
    "../c:\\Users\\anerli\\Sync\\projects\\langur\\langur\\baml_src\\fill_params.baml": "class FilledParams {\r\n    @@dynamic\r\n}\r\n\r\nfunction FillParams(context: string, action_desc: string, filled_inputs: string, needed_inputs: string) -> FilledParams {\r\n    client Fallback\r\n    prompt #\"\r\n        You are a component of a graph-driven agentic LLM system.\r\n\r\n        Relevant context:\r\n        {{context}}\r\n\r\n        ---\r\n        \r\n        Your job is to fill in missing inputs for a certain action.\r\n\r\n        The action is:\r\n        {{action_desc}}\r\n\r\n        These inputs are already filled:\r\n        {{filled_inputs}}\r\n\r\n        You need to provide:\r\n        {{needed_inputs}}\r\n\r\n        {{ctx.output_format}}\r\n    \"#\r\n}",
    "../c:\\Users\\anerli\\Sync\\projects\\langur\\langur\\baml_src\\generators.baml": "// This helps use auto generate libraries you can use in the language of\r\n// your choice. You can have multiple generators if you use multiple languages.\r\n// Just ensure that the output_dir is different for each generator.\r\ngenerator target {\r\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\r\n    output_type \"python/pydantic\"\r\n\r\n    // Where the generated code will be saved (relative to baml_src/)\r\n    output_dir \"../langur\"\r\n\r\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\r\n    // The BAML VSCode extension version should also match this version.\r\n    version \"0.67.0\"\r\n\r\n    // Valid values: \"sync\", \"async\"\r\n    // This controls what `b.FunctionName()` will be (sync or async).\r\n    default_client_mode async\r\n}\r\n",
    "../c:\\Users\\anerli\\Sync\\projects\\langur\\langur\\baml_src\\planner.baml": "// class Node {\r\n//     id string\r\n//     content string\r\n//     action_types string[]\r\n// }\r\n\r\n// Action\r\nclass ActionNode {\r\n    id string @description(\"A unique natural language ID in lower_snake_case which reflects the action use.\")\r\n    description string @description(\"Description of what this action is for.\")\r\n    //upstream_action_ids string[] @description(\"Define which other actions this one depends on\")\r\n    //action_input ActionInput @description(\"Provide inputs if known else null. Do not hallicinate values.\")\r\n    @@dynamic\r\n}\r\n\r\nclass Edge {\r\n    from_id string\r\n    to_id string\r\n}\r\n\r\nclass Graph {\r\n    nodes ActionNode[]\r\n    edges Edge[]\r\n}\r\n\r\nfunction PlanActions (goal: string, observables: string, action_types: string) -> Graph {\r\n    client Fallback\r\n    prompt #\"\r\n        You are a component of a graph-driven agentic LLM system.\r\n\r\n        Your overall goal is: {{goal}}\r\n\r\n        Relevant context:\r\n        {{observables}}\r\n\r\n        ---\r\n\r\n        Your job is to plan out the execution of the given task by designing a graph of actions with dependency relations.\r\n        You can do this by creating nodes, each of which defines an action, and edges, which represent a dependency relation.\r\n        In an edge dependency relation, you should choose the direction such that the FROM node should be completed before the TO node.\r\n        Please capture all relevant dependency relations with edges.\r\n        Design each action by observing the available action types and resources in the graph, and be as specific as possible.\r\n\r\n        When you provide action inputs, you have a choice whether to provide parameters or null.\r\n        When the parameter is known right now as part of the plan, provide it.\r\n        If its not known or depends on some other result, leave it as null.\r\n\r\n        For each node, provide also the action type from the following:\r\n        {{action_types}}\r\n\r\n        {{ctx.output_format}}\r\n    \"#\r\n}\r\n",
    "../c:\\Users\\anerli\\Sync\\projects\\langur\\langur\\baml_src\\think.baml": "\r\nfunction Think(context: string, description: string) -> string {\r\n    client Fallback\r\n    prompt #\"\r\n        You are a component of a graph-driven agentic LLM system.\r\n\r\n        Relevant context:\r\n        {{context}}\r\n\r\n        ---\r\n        \r\n        Your job is to consider the context and do the following: {{description}}\r\n    \"#\r\n}",
}

def get_baml_files():
    return file_map