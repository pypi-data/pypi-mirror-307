"""
This type stub file was generated by cyright.
"""

from .core import *

class ViewportDrawList(ViewportDrawList_):
    @property
    def front(self): # -> bint:
        ...
    
    @front.setter
    def front(self, value: bool): # -> None:
        ...
    
    @property
    def show(self): # -> bint:
        """
        Writable attribute: Should the object be drawn/shown ?
        In case show is set to False, this disables any
        callback (for example the close callback won't be called
        if a window is hidden with show = False).
        In the case of items that can be closed,
        show is set to False automatically on close.
        """
        ...
    
    @show.setter
    def show(self, value: bool): # -> None:
        ...
    


class DrawArrow(DrawArrow_):
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def size(self):
        ...
    
    @size.setter
    def size(self, value: float): # -> None:
        ...
    


class DrawBezierCubic(DrawBezierCubic_):
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def p3(self): # -> list:
        ...
    
    @p3.setter
    def p3(self, value): # -> None:
        ...
    
    @property
    def p4(self): # -> list:
        ...
    
    @p4.setter
    def p4(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def segments(self):
        ...
    
    @segments.setter
    def segments(self, value: int): # -> None:
        ...
    


class DrawBezierQuadratic(DrawBezierQuadratic_):
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def p3(self): # -> list:
        ...
    
    @p3.setter
    def p3(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def segments(self):
        ...
    
    @segments.setter
    def segments(self, value: int): # -> None:
        ...
    


class DrawCircle(DrawCircle_):
    @property
    def center(self): # -> list:
        ...
    
    @center.setter
    def center(self, value): # -> None:
        ...
    
    @property
    def radius(self): # -> list:
        ...
    
    @radius.setter
    def radius(self, value: float): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def fill(self): # -> list:
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def segments(self):
        ...
    
    @segments.setter
    def segments(self, value: int): # -> None:
        ...
    


class DrawEllipse(DrawEllipse_):
    @property
    def pmin(self): # -> list:
        ...
    
    @pmin.setter
    def pmin(self, value): # -> None:
        ...
    
    @property
    def pmax(self): # -> list:
        ...
    
    @pmax.setter
    def pmax(self, value): # -> None:
        ...
    
    @property
    def radius(self): # -> list:
        ...
    
    @radius.setter
    def radius(self, value: float): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def fill(self): # -> list:
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def segments(self):
        ...
    
    @segments.setter
    def segments(self, value: int): # -> None:
        ...
    


class DrawImage(DrawImage_):
    @property
    def texture(self):
        ...
    
    @texture.setter
    def texture(self, value): # -> None:
        ...
    
    @property
    def pmin(self): # -> list:
        ...
    
    @pmin.setter
    def pmin(self, value): # -> None:
        ...
    
    @property
    def pmax(self): # -> list:
        ...
    
    @pmax.setter
    def pmax(self, value): # -> None:
        ...
    
    @property
    def uv(self): # -> list:
        ...
    
    @uv.setter
    def uv(self, value): # -> None:
        ...
    
    @property
    def color_multiplier(self): # -> list:
        ...
    
    @color_multiplier.setter
    def color_multiplier(self, value): # -> None:
        ...
    


class DrawImageQuad(DrawImageQuad_):
    @property
    def texture(self):
        ...
    
    @texture.setter
    def texture(self, value): # -> None:
        ...
    
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def p3(self): # -> list:
        ...
    
    @p3.setter
    def p3(self, value): # -> None:
        ...
    
    @property
    def p4(self): # -> list:
        ...
    
    @p4.setter
    def p4(self, value): # -> None:
        ...
    
    @property
    def uv1(self): # -> list:
        ...
    
    @uv1.setter
    def uv1(self, value): # -> None:
        ...
    
    @property
    def uv2(self): # -> list:
        ...
    
    @uv2.setter
    def uv2(self, value): # -> None:
        ...
    
    @property
    def uv3(self): # -> list:
        ...
    
    @uv3.setter
    def uv3(self, value): # -> None:
        ...
    
    @property
    def uv4(self): # -> list:
        ...
    
    @uv4.setter
    def uv4(self, value): # -> None:
        ...
    
    @property
    def color_multiplier(self): # -> list:
        ...
    
    @color_multiplier.setter
    def color_multiplier(self, value): # -> None:
        ...
    


class DrawLine(DrawLine_):
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    


class DrawPolyline(DrawPolyline_):
    @property
    def points(self): # -> list:
        ...
    
    @points.setter
    def points(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def closed(self):
        ...
    
    @closed.setter
    def closed(self, value: bool): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    


class DrawPolygon(DrawPolygon_):
    @property
    def points(self): # -> list:
        ...
    
    @points.setter
    def points(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def fill(self): # -> list:
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    


class DrawQuad(DrawQuad_):
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def p3(self): # -> list:
        ...
    
    @p3.setter
    def p3(self, value): # -> None:
        ...
    
    @property
    def p4(self): # -> list:
        ...
    
    @p4.setter
    def p4(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def fill(self): # -> list:
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    


class DrawRect(DrawRect_):
    @property
    def pmin(self): # -> list:
        ...
    
    @pmin.setter
    def pmin(self, value): # -> None:
        ...
    
    @property
    def pmax(self): # -> list:
        ...
    
    @pmax.setter
    def pmax(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def fill(self): # -> list:
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def color_upper_left(self): # -> list:
        ...
    
    @color_upper_left.setter
    def color_upper_left(self, value): # -> None:
        ...
    
    @property
    def color_upper_right(self): # -> list:
        ...
    
    @color_upper_right.setter
    def color_upper_right(self, value): # -> None:
        ...
    
    @property
    def color_bottom_left(self): # -> list:
        ...
    
    @color_bottom_left.setter
    def color_bottom_left(self, value): # -> None:
        ...
    
    @property
    def color_bottom_right(self): # -> list:
        ...
    
    @color_bottom_right.setter
    def color_bottom_right(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def multicolor(self):
        ...
    
    @multicolor.setter
    def multicolor(self, value: bool): # -> None:
        ...
    
    @property
    def rounding(self):
        ...
    
    @rounding.setter
    def rounding(self, value: float): # -> None:
        ...
    


class DrawText(DrawText_):
    @property
    def pos(self): # -> list:
        ...
    
    @pos.setter
    def pos(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def font(self): # -> Font:
        """
        Writable attribute: font used for the text rendered
        """
        ...
    
    @font.setter
    def font(self, value: Font): # -> None:
        ...
    
    @property
    def text(self): # -> str:
        ...
    
    @text.setter
    def text(self, value: str): # -> None:
        ...
    
    @property
    def size(self):
        ...
    
    @size.setter
    def size(self, value: float): # -> None:
        ...
    


class DrawTriangle(DrawTriangle_):
    @property
    def p1(self): # -> list:
        ...
    
    @p1.setter
    def p1(self, value): # -> None:
        ...
    
    @property
    def p2(self): # -> list:
        ...
    
    @p2.setter
    def p2(self, value): # -> None:
        ...
    
    @property
    def p3(self): # -> list:
        ...
    
    @p3.setter
    def p3(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> list:
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def fill(self): # -> list:
        ...
    
    @fill.setter
    def fill(self, value): # -> None:
        ...
    
    @property
    def thickness(self):
        ...
    
    @thickness.setter
    def thickness(self, value: float): # -> None:
        ...
    
    @property
    def cull_mode(self):
        ...
    
    @cull_mode.setter
    def cull_mode(self, value: int): # -> None:
        ...
    


