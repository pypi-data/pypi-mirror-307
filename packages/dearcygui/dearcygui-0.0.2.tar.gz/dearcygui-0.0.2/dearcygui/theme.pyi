"""
This type stub file was generated by cyright.
"""

import cython
from .core import *

class ThemeColorImGui(baseTheme):
    """
    Theme color parameters that affect how ImGui
    renders items.
    All colors accept three formats:
    - unsigned (encodes a rgba little-endian)
    - (r, g, b, a) with r, g, b, a as integers.
    - (r, g, b, a) with r, g, b, a as floats.

    When r, g, b, a are floats, they should be normalized
    between 0 and 1, while integers are between 0 and 255.
    If a is missing, it defaults to 255.

    Keyword Arguments:
        Text: Color for text rendering
        TextDisabled: Color for the text of disabled items
        WindowBg: Background of normal windows
        ChildBg:  Background of child windows
        PopupBg: Background of popups, menus, tooltips windows
        Border: Color of borders
        BorderShadow: Color of border shadows
        FrameBg: Background of checkbox, radio button, plot, slider, text input
        FrameBgHovered: Color of FrameBg when the item is hovered
        FrameBgActive: Color of FrameBg when the item is active
        TitleBg: Title bar
        TitleBgActive: Title bar when focused
        TitleBgCollapsed: Title bar when collapsed
        MenuBarBg: Background color of the menu bar
        ScrollbarBg: Background color of the scroll bar
        ScrollbarGrab: Color of the scroll slider
        ScrollbarGrabHovered: Color of the scroll slider when hovered
        ScrollbarGrabActive: Color of the scroll slider when selected
        CheckMark: Checkbox tick and RadioButton circle
        SliderGrab: Color of sliders
        SliderGrabActive: Color of selected sliders
        Button: Color of buttons
        ButtonHovered: Color of buttons when hovered
        ButtonActive: Color of buttons when selected
        Header: Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
        HeaderHovered: Header color when hovered
        HeaderActive: Header color when clicked
        Separator: Color of separators
        SeparatorHovered: Color of separator when hovered
        SeparatorActive: Color of separator when active
        ResizeGrip: Resize grip in lower-right and lower-left corners of windows.
        ResizeGripHovered: ResizeGrip when hovered
        ResizeGripActive: ResizeGrip when clicked
        TabHovered: Tab background, when hovered
        Tab: Tab background, when tab-bar is focused & tab is unselected
        TabSelected: Tab background, when tab-bar is focused & tab is selected
        TabSelectedOverline: Tab horizontal overline, when tab-bar is focused & tab is selected
        TabDimmed: Tab background, when tab-bar is unfocused & tab is unselected
        TabDimmedSelected: Tab background, when tab-bar is unfocused & tab is selected
        TabDimmedSelectedOverline: ..horizontal overline, when tab-bar is unfocused & tab is selected
        PlotLines: Color of SimplePlot lines
        PlotLinesHovered: Color of SimplePlot lines when hovered
        PlotHistogram: Color of SimplePlot histogram
        PlotHistogramHovered: Color of SimplePlot histogram when hovered
        TableHeaderBg: Table header background
        TableBorderStrong: Table outer and header borders (prefer using Alpha=1.0 here)
        TableBorderLight: Table inner borders (prefer using Alpha=1.0 here)
        TableRowBg: Table row background (even rows)
        TableRowBgAlt: Table row background (odd rows)
        TextLink: Hyperlink color
        TextSelectedBg: Color of the background of selected text
        DragDropTarget: Rectangle highlighting a drop target
        NavHighlight: Gamepad/keyboard: current highlighted item
        NavWindowingHighlight: Highlight window when using CTRL+TAB
        NavWindowingDimBg: Darken/colorize entire screen behind the CTRL+TAB window list, when active
        ModalWindowDimBg: Darken/colorize entire screen behind a modal window, when one is active
    """
    def __dir__(self): # -> list:
        ...
    
    def __getattr__(self, name): # -> ImU32 | None:
        ...
    
    def __getitem__(self, key): # -> ImU32 | None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __iter__(self): # -> Iterator:
        ...
    


@cython.no_gc_clear
class ThemeColorImPlot(baseTheme):
    def __dir__(self): # -> list:
        ...
    
    def __getattr__(self, name): # -> ImU32 | None:
        ...
    
    def __getitem__(self, key): # -> ImU32 | None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __iter__(self): # -> Iterator:
        ...
    


@cython.no_gc_clear
class ThemeColorImNodes(baseTheme):
    def __dir__(self): # -> list[str | bytes]:
        ...
    
    def __getattr__(self, name): # -> ImU32 | None:
        ...
    
    def __getitem__(self, key): # -> ImU32 | None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __iter__(self): # -> Iterator:
        ...
    


class baseThemeStyle(baseTheme):
    @property
    def no_scaling(self): # -> bool:
        """
        boolean. Defaults to False.
        If set, disables the automated scaling to the dpi
        scale value for this theme
        """
        ...
    
    @no_scaling.setter
    def no_scaling(self, value: bool): # -> None:
        ...
    
    @property
    def no_rounding(self): # -> bool:
        """
        boolean. Defaults to False.
        If set, disables rounding (after scaling) to the
        closest integer the parameters. The rounding is only
        applied to parameters which impact item positioning
        in a way that would prevent a pixel perfect result.
        """
        ...
    
    @no_rounding.setter
    def no_rounding(self, value: bool): # -> None:
        ...
    
    def __getitem__(self, key): # -> Any:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __iter__(self): # -> Iterator:
        ...
    


class ThemeStyleImGui(baseThemeStyle):
    @property
    def Alpha(self): # -> object:
        """
        Global alpha applied to everything in Dear ImGui.

        The value is in the range [0, 1]. Defaults to 1.
        """
        ...
    
    @Alpha.setter
    def Alpha(self, value): # -> None:
        ...
    
    @property
    def DisabledAlpha(self): # -> object:
        """
        Unused currently.

        The value is in the range [0, 1]. Defaults to 0.6
        """
        ...
    
    @DisabledAlpha.setter
    def DisabledAlpha(self, value): # -> None:
        ...
    
    @property
    def WindowPadding(self): # -> object:
        """
        Padding within a window.

        The value is a pair of float (dx, dy). Defaults to (8, 8)
        """
        ...
    
    @WindowPadding.setter
    def WindowPadding(self, value): # -> None:
        ...
    
    @property
    def WindowRounding(self): # -> object:
        """
        Radius of window corners rounding. Set to 0.0 to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.

        The value is a float. Defaults to 0.
        """
        ...
    
    @WindowRounding.setter
    def WindowRounding(self, value): # -> None:
        ...
    
    @property
    def WindowBorderSize(self): # -> object:
        """
        Thickness of border around windows. Generally set to 0.0 or 1.0f. Other values not well tested.

        The value is a float. Defaults to 1.
        """
        ...
    
    @WindowBorderSize.setter
    def WindowBorderSize(self, value): # -> None:
        ...
    
    @property
    def WindowMinSize(self): # -> object:
        """
        Minimum window size

        The value is a pair of float (dx, dy). Defaults to (32, 32)
        """
        ...
    
    @WindowMinSize.setter
    def WindowMinSize(self, value): # -> None:
        ...
    
    @property
    def WindowTitleAlign(self): # -> object:
        """
        Alignment for window title bar text in percentages

        The value is a pair of float (dx, dy). Defaults to (0., 0.5), which means left-aligned, vertical centering on the row
        """
        ...
    
    @WindowTitleAlign.setter
    def WindowTitleAlign(self, value): # -> None:
        ...
    
    @property
    def ChildRounding(self): # -> object:
        """
        Radius of child window corners rounding. Set to 0.0 to have rectangular child windows.

        The value is a float. Defaults to 0.
        """
        ...
    
    @ChildRounding.setter
    def ChildRounding(self, value): # -> None:
        ...
    
    @property
    def ChildBorderSize(self): # -> object:
        """
        Thickness of border around child windows. Generally set to 0.0f or 1.0f. Other values not well tested.

        The value is a float. Defaults to 1.
        """
        ...
    
    @ChildBorderSize.setter
    def ChildBorderSize(self, value): # -> None:
        ...
    
    @property
    def PopupRounding(self): # -> object:
        """
        Radius of popup or tooltip window corners rounding. Set to 0.0 to have rectangular popup or tooltip windows.

        The value is a float. Defaults to 0.
        """
        ...
    
    @PopupRounding.setter
    def PopupRounding(self, value): # -> None:
        ...
    
    @property
    def PopupBorderSize(self): # -> object:
        """
        Thickness of border around popup or tooltip windows. Generally set to 0.0f or 1.0f. Other values not well tested.

        The value is a float. Defaults to 1.
        """
        ...
    
    @PopupBorderSize.setter
    def PopupBorderSize(self, value): # -> None:
        ...
    
    @property
    def FramePadding(self): # -> object:
        """
        Padding within a framed rectangle (used by most widgets)

        The value is a pair of floats. Defaults to (4,3).
        """
        ...
    
    @FramePadding.setter
    def FramePadding(self, value): # -> None:
        ...
    
    @property
    def FrameRounding(self): # -> object:
        """
        Radius of frame corners rounding. Set to 0.0 to have rectangular frame (most widgets).

        The value is a float. Defaults to 0.
        """
        ...
    
    @FrameRounding.setter
    def FrameRounding(self, value): # -> None:
        ...
    
    @property
    def FrameBorderSize(self): # -> object:
        """
        Thickness of border around frames (most widgets). Generally set to 0.0f or 1.0f. Other values not well tested.

        The value is a float. Defaults to 0.
        """
        ...
    
    @FrameBorderSize.setter
    def FrameBorderSize(self, value): # -> None:
        ...
    
    @property
    def ItemSpacing(self): # -> object:
        """
        Horizontal and vertical spacing between widgets/lines.

        The value is a pair of floats. Defaults to (8, 4).
        """
        ...
    
    @ItemSpacing.setter
    def ItemSpacing(self, value): # -> None:
        ...
    
    @property
    def ItemInnerSpacing(self): # -> object:
        """
        Horizontal and vertical spacing between elements inside of a composed widget.

        The value is a pair of floats. Defaults to (4, 4).
        """
        ...
    
    @ItemInnerSpacing.setter
    def ItemInnerSpacing(self, value): # -> None:
        ...
    
    @property
    def IndentSpacing(self): # -> object:
        """
        Default horizontal spacing for indentations. For instance when entering a tree node.
        A good value is Generally == (FontSize + FramePadding.x*2).

        The value is a float. Defaults to 21.
        """
        ...
    
    @IndentSpacing.setter
    def IndentSpacing(self, value): # -> None:
        ...
    
    @property
    def CellPadding(self): # -> object:
        """
        Tables: padding between cells.
        The x padding is applied for the whole Table,
        while y can be different for every row.

        The value is a pair of floats. Defaults to (4, 2).
        """
        ...
    
    @CellPadding.setter
    def CellPadding(self, value): # -> None:
        ...
    
    @property
    def ScrollbarSize(self): # -> object:
        """
        Width of the vertical scrollbar, Height of the horizontal scrollbar

        The value is a float. Defaults to 14.
        """
        ...
    
    @ScrollbarSize.setter
    def ScrollbarSize(self, value): # -> None:
        ...
    
    @property
    def ScrollbarRounding(self): # -> object:
        """
        Radius of grab corners rounding for scrollbar.

        The value is a float. Defaults to 9.
        """
        ...
    
    @ScrollbarRounding.setter
    def ScrollbarRounding(self, value): # -> None:
        ...
    
    @property
    def GrabMinSize(self): # -> object:
        """
        Minimum width/height of a grab box for slider/scrollbar.

        The value is a float. Defaults to 12.
        """
        ...
    
    @GrabMinSize.setter
    def GrabMinSize(self, value): # -> None:
        ...
    
    @property
    def GrabRounding(self): # -> object:
        """
        Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.

        The value is a float. Defaults to 0.
        """
        ...
    
    @GrabRounding.setter
    def GrabRounding(self, value): # -> None:
        ...
    
    @property
    def TabRounding(self): # -> object:
        """
        Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.

        The value is a float. Defaults to 4.
        """
        ...
    
    @TabRounding.setter
    def TabRounding(self, value): # -> None:
        ...
    
    @property
    def TabBorderSize(self): # -> object:
        """
        Thickness of borders around tabs.

        The value is a float. Defaults to 0.
        """
        ...
    
    @TabBorderSize.setter
    def TabBorderSize(self, value): # -> None:
        ...
    
    @property
    def TabBarBorderSize(self): # -> object:
        """
        Thickness of tab-bar separator, which takes on the tab active color to denote focus.

        The value is a float. Defaults to 1.
        """
        ...
    
    @TabBarBorderSize.setter
    def TabBarBorderSize(self, value): # -> None:
        ...
    
    @property
    def TabBarOverlineSize(self): # -> object:
        """
        Thickness of tab-bar overline, which highlights the selected tab-bar.

        The value is a float. Defaults to 2.
        """
        ...
    
    @TabBarOverlineSize.setter
    def TabBarOverlineSize(self, value): # -> None:
        ...
    
    @property
    def TableAngledHeadersAngle(self): # -> object:
        """
        Tables: Angle of angled headers (supported values range from -50 degrees to +50 degrees).

        The value is a float. Defaults to 35.0f * (IM_PI / 180.0f).
        """
        ...
    
    @TableAngledHeadersAngle.setter
    def TableAngledHeadersAngle(self, value): # -> None:
        ...
    
    @property
    def TableAngledHeadersTextAlign(self): # -> object:
        """
        Tables: Alignment (percentages) of angled headers within the cell
    
        The value is a pair of floats. Defaults to (0.5, 0.), i.e. top-centered
        """
        ...
    
    @TableAngledHeadersTextAlign.setter
    def TableAngledHeadersTextAlign(self, value): # -> None:
        ...
    
    @property
    def ButtonTextAlign(self): # -> object:
        """
        Alignment of button text when button is larger than text.
    
        The value is a pair of floats. Defaults to (0.5, 0.5), i.e. centered
        """
        ...
    
    @ButtonTextAlign.setter
    def ButtonTextAlign(self, value): # -> None:
        ...
    
    @property
    def SelectableTextAlign(self): # -> object:
        """
        Alignment of selectable text (in percentages).
    
        The value is a pair of floats. Defaults to (0., 0.), i.e. top-left. It is advised to keep the default.
        """
        ...
    
    @SelectableTextAlign.setter
    def SelectableTextAlign(self, value): # -> None:
        ...
    
    @property
    def SeparatorTextBorderSize(self): # -> object:
        """
        Thickness of border in Separator() text.
    
        The value is a float. Defaults to 3.
        """
        ...
    
    @SeparatorTextBorderSize.setter
    def SeparatorTextBorderSize(self, value): # -> None:
        ...
    
    @property
    def SelectableTextAlign(self): # -> object:
        """
        Alignment of text within the separator in percentages.
    
        The value is a pair of floats. Defaults to (0., 0.5), i.e. left-centered
        """
        ...
    
    @SelectableTextAlign.setter
    def SelectableTextAlign(self, value): # -> None:
        ...
    
    @property
    def SeparatorTextPadding(self): # -> object:
        """
        Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.
    
        The value is a pair of floats. Defaults to (20., 3.).
        """
        ...
    
    @SeparatorTextPadding.setter
    def SeparatorTextPadding(self, value): # -> None:
        ...
    


class ThemeStyleImPlot(baseThemeStyle):
    @property
    def LineWeight(self): # -> object:
        """
        Plot item line weight in pixels.

        The value is a float. Defaults to 1.
        """
        ...
    
    @LineWeight.setter
    def LineWeight(self, value): # -> None:
        ...
    
    @property
    def Marker(self): # -> object:
        """
        Marker specification.

        The value is an integer. Defaults to 1.
        """
        ...
    
    @Marker.setter
    def Marker(self, value): # -> None:
        ...
    
    @property
    def MarkerSize(self): # -> object:
        """
        Marker size in pixels (roughly the marker's "radius").

        The value is a float. Defaults to 4.
        """
        ...
    
    @MarkerSize.setter
    def MarkerSize(self, value): # -> None:
        ...
    
    @property
    def MarkerWeight(self): # -> object:
        """
        Plot outline weight of markers in pixels.

        The value is a float. Defaults to 1.
        """
        ...
    
    @MarkerWeight.setter
    def MarkerWeight(self, value): # -> None:
        ...
    
    @property
    def FillAlpha(self): # -> object:
        """
        Alpha modifier applied to all plot item fills.

        The value is a float. Defaults to 1.
        """
        ...
    
    @FillAlpha.setter
    def FillAlpha(self, value): # -> None:
        ...
    
    @property
    def ErrorBarSize(self): # -> object:
        """
        Error bar whisker width in pixels.

        The value is a float. Defaults to 5.
        """
        ...
    
    @ErrorBarSize.setter
    def ErrorBarSize(self, value): # -> None:
        ...
    
    @property
    def ErrorBarWeight(self): # -> object:
        """
        Error bar whisker weight in pixels.

        The value is a float. Defaults to 1.5.
        """
        ...
    
    @ErrorBarWeight.setter
    def ErrorBarWeight(self, value): # -> None:
        ...
    
    @property
    def DigitalBitHeight(self): # -> object:
        """
        Digital channels bit height (at 1) in pixels.

        The value is a float. Defaults to 8.
        """
        ...
    
    @DigitalBitHeight.setter
    def DigitalBitHeight(self, value): # -> None:
        ...
    
    @property
    def DigitalBitGap(self): # -> object:
        """
        Digital channels bit padding gap in pixels.

        The value is a float. Defaults to 4.
        """
        ...
    
    @DigitalBitGap.setter
    def DigitalBitGap(self, value): # -> None:
        ...
    
    @property
    def PlotBorderSize(self): # -> object:
        """
        Thickness of border around plot area.

        The value is a float. Defaults to 1.
        """
        ...
    
    @PlotBorderSize.setter
    def PlotBorderSize(self, value): # -> None:
        ...
    
    @property
    def MinorAlpha(self): # -> object:
        """
        Alpha multiplier applied to minor axis grid lines.

        The value is a float. Defaults to 0.25.
        """
        ...
    
    @MinorAlpha.setter
    def MinorAlpha(self, value): # -> None:
        ...
    
    @property
    def MajorTickLen(self): # -> object:
        """
        Major tick lengths for X and Y axes.

        The value is a pair of floats. Defaults to (10, 10).
        """
        ...
    
    @MajorTickLen.setter
    def MajorTickLen(self, value): # -> None:
        ...
    
    @property
    def MinorTickLen(self): # -> object:
        """
        Minor tick lengths for X and Y axes.

        The value is a pair of floats. Defaults to (5, 5).
        """
        ...
    
    @MinorTickLen.setter
    def MinorTickLen(self, value): # -> None:
        ...
    
    @property
    def MajorTickSize(self): # -> object:
        """
        Line thickness of major ticks.

        The value is a pair of floats. Defaults to (1, 1).
        """
        ...
    
    @MajorTickSize.setter
    def MajorTickSize(self, value): # -> None:
        ...
    
    @property
    def MinorTickSize(self): # -> object:
        """
        Line thickness of minor ticks.

        The value is a pair of floats. Defaults to (1, 1).
        """
        ...
    
    @MinorTickSize.setter
    def MinorTickSize(self, value): # -> None:
        ...
    
    @property
    def MajorGridSize(self): # -> object:
        """
        Line thickness of major grid lines.

        The value is a pair of floats. Defaults to (1, 1).
        """
        ...
    
    @MajorGridSize.setter
    def MajorGridSize(self, value): # -> None:
        ...
    
    @property
    def MinorGridSize(self): # -> object:
        """
        Line thickness of minor grid lines.

        The value is a pair of floats. Defaults to (1, 1).
        """
        ...
    
    @MinorGridSize.setter
    def MinorGridSize(self, value): # -> None:
        ...
    
    @property
    def PlotPadding(self): # -> object:
        """
        Padding between widget frame and plot area, labels, or outside legends (i.e. main padding).

        The value is a pair of floats. Defaults to (10, 10).
        """
        ...
    
    @PlotPadding.setter
    def PlotPadding(self, value): # -> None:
        ...
    
    @property
    def LabelPadding(self): # -> object:
        """
        Padding between axes labels, tick labels, and plot edge.

        The value is a pair of floats. Defaults to (5, 5).
        """
        ...
    
    @LabelPadding.setter
    def LabelPadding(self, value): # -> None:
        ...
    
    @property
    def LegendPadding(self): # -> object:
        """
        Legend padding from plot edges.

        The value is a pair of floats. Defaults to (10, 10).
        """
        ...
    
    @LegendPadding.setter
    def LegendPadding(self, value): # -> None:
        ...
    
    @property
    def LegendInnerPadding(self): # -> object:
        """
        Legend inner padding from legend edges.

        The value is a pair of floats. Defaults to (5, 5).
        """
        ...
    
    @LegendInnerPadding.setter
    def LegendInnerPadding(self, value): # -> None:
        ...
    
    @property
    def LegendSpacing(self): # -> object:
        """
        Spacing between legend entries.

        The value is a pair of floats. Defaults to (5, 0).
        """
        ...
    
    @LegendSpacing.setter
    def LegendSpacing(self, value): # -> None:
        ...
    
    @property
    def MousePosPadding(self): # -> object:
        """
        Padding between plot edge and interior info text.

        The value is a pair of floats. Defaults to (10, 10).
        """
        ...
    
    @MousePosPadding.setter
    def MousePosPadding(self, value): # -> None:
        ...
    
    @property
    def AnnotationPadding(self): # -> object:
        """
        Text padding around annotation labels.

        The value is a pair of floats. Defaults to (2, 2).
        """
        ...
    
    @AnnotationPadding.setter
    def AnnotationPadding(self, value): # -> None:
        ...
    
    @property
    def FitPadding(self): # -> object:
        """
        Additional fit padding as a percentage of the fit extents (e.g. (0.1,0.1) adds 10% to the fit extents of X and Y).

        The value is a pair of floats. Defaults to (0, 0).
        """
        ...
    
    @FitPadding.setter
    def FitPadding(self, value): # -> None:
        ...
    
    @property
    def PlotDefaultSize(self): # -> object:
        """
        Default size used for plots

        The value is a pair of floats. Defaults to (400, 300).
        """
        ...
    
    @PlotDefaultSize.setter
    def PlotDefaultSize(self, value): # -> None:
        ...
    
    @property
    def PlotMinSize(self): # -> object:
        """
        Minimum size plot frame can be when shrunk.

        The value is a pair of floats. Defaults to (200, 150).
        """
        ...
    
    @PlotMinSize.setter
    def PlotMinSize(self, value): # -> None:
        ...
    


class ThemeStyleImNodes(baseThemeStyle):
    ...


class ThemeList(baseTheme):
    ...


class ThemeListWithCondition(baseTheme):
    @property
    def condition_enabled(self): # -> theme_enablers:
        """
        Writable attribute: As long as it is active, the theme list
        waits to be applied that the conditions are met.
        enabled condition: 0: no condition. 1: enabled must be true. 2: enabled must be false
        """
        ...
    
    @condition_enabled.setter
    def condition_enabled(self, value: theme_enablers): # -> None:
        ...
    
    @property
    def condition_category(self): # -> theme_categories:
        """
        Writable attribute: As long as it is active, the theme list
        waits to be applied that the conditions are met.
        category condition: 0: no condition. other value: see list
        """
        ...
    
    @condition_category.setter
    def condition_category(self, value: theme_categories): # -> None:
        ...
    


class ThemeStopCondition(baseTheme):
    ...


