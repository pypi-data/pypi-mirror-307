[project]
name = "fastapi-problem-details"
version = "0.1.4"
description = "Structure your FastAPI APIs error responses with consistent and machine readable format using the RFC 9457 \"Problem Details for HTTP APIs\" standard"
authors = [
    { name = "g0di", email = "benoit.godard.p@gmail.com" },
]
dependencies = [
    "fastapi>=0.100.0",
    "pydantic>=2.0.0",
]
requires-python = ">=3.10"
readme = "README.md"
keywords = [
    "fastapi",
    "problem",
    "plugin",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Plugins",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Telecommunications Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries",
]

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://github.com/g0di/fastapi-problem-details"
Documentation = "https://github.com/g0di/fastapi-problem-details"
Source = "https://github.com/g0di/fastapi-problem-details"
Changelog = "https://github.com/g0di/fastapi-problem-details/blob/main/README.md"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
lint = [
    "ruff>=0.0.13",
    "mypy>=0.1",
]
test = [
    "mypy>=1.11.0",
    "ruff>=0.5.5",
    "pytest>=8.3.2",
    "faker>=26.0.0",
    "pytest-cov>=5.0.0",
    "tox-pdm>=0.7.2",
]

[tool.pdm.scripts]
test = "pytest"

[tool.pdm.scripts.lint]
composite = [
    "ruff format --check",
    "ruff check",
    "mypy",
]

[tool.pdm.scripts.qa]
composite = [
    "ruff format",
    "ruff check --fix --show-fixes",
    "mypy",
    "test",
]

[tool.mypy]
strict = true
files = [
    "src",
    "tests",
]
plugins = [
    "pydantic.mypy",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
src = [
    "src",
    "tests",
]

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "COM812",
    "COM819",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "E501",
    "ISC001",
    "ISC001",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
    "ANN1",
    "D1",
    "TD002",
    "TD003",
    "FIX002",
]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = [
    "typing",
    "typing_extensions",
]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
]
strict = true

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.field_validator",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
addopts = [
    "--cov",
    "--cov-report=term-missing",
    "-vv",
]

[tool.coverage.run]
branch = true
source = [
    "fastapi_problem_details",
]

[tool.coverage.paths]
source = [
    "src/fastapi_problem_details",
    "*/site-packages/fastapi_problem_details",
]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@overload",
]
